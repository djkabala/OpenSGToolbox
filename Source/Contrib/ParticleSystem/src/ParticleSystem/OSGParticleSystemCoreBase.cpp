/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleSystemCore!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGParticleSystem.h"          // System Class
#include "OSGParticleSystemDrawer.h"    // Drawer Class

#include "OSGParticleSystemCoreBase.h"
#include "OSGParticleSystemCore.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ParticleSystemCore
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ParticleSystem * ParticleSystemCoreBase::_sfSystem
    
*/

/*! \var ParticleSystemDrawer * ParticleSystemCoreBase::_sfDrawer
    
*/

/*! \var UInt32          ParticleSystemCoreBase::_sfSortingMode
    The method used to sort particles.
    NONE - no particle sorting.
    FRONT_TO_BACK - particles will be sorted from closest to the view point to the furthest.
    BACK_TO_FRONT - particles will be sorted from furthest to the view point to the closest.
*/

/*! \var UInt32          ParticleSystemCoreBase::_mfSort
    Sort is used to keep track of indices used to draw particles from 
    nearest to farthest.
*/

/*! \var Real32          ParticleSystemCoreBase::_mfDistances
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ParticleSystemCore *>::_type("ParticleSystemCorePtr", "MaterialDrawablePtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ParticleSystemCore *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ParticleSystemCore *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ParticleSystemCore *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ParticleSystemCoreBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecParticleSystemPtr::Description(
        SFUnrecParticleSystemPtr::getClassType(),
        "System",
        "",
        SystemFieldId, SystemFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemCore::editHandleSystem),
        static_cast<FieldGetMethodSig >(&ParticleSystemCore::getHandleSystem));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecParticleSystemDrawerPtr::Description(
        SFUnrecParticleSystemDrawerPtr::getClassType(),
        "Drawer",
        "",
        DrawerFieldId, DrawerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemCore::editHandleDrawer),
        static_cast<FieldGetMethodSig >(&ParticleSystemCore::getHandleDrawer));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "SortingMode",
        "The method used to sort particles.\n"
        "NONE - no particle sorting.\n"
        "FRONT_TO_BACK - particles will be sorted from closest to the view point to the furthest.\n"
        "BACK_TO_FRONT - particles will be sorted from furthest to the view point to the closest.\n",
        SortingModeFieldId, SortingModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemCore::editHandleSortingMode),
        static_cast<FieldGetMethodSig >(&ParticleSystemCore::getHandleSortingMode));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "Sort",
        "Sort is used to keep track of indices used to draw particles from \n"
        "nearest to farthest.\n",
        SortFieldId, SortFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemCore::editHandleSort),
        static_cast<FieldGetMethodSig >(&ParticleSystemCore::getHandleSort));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "Distances",
        "",
        DistancesFieldId, DistancesFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleSystemCore::editHandleDistances),
        static_cast<FieldGetMethodSig >(&ParticleSystemCore::getHandleDistances));

    oType.addInitialDesc(pDesc);
}


ParticleSystemCoreBase::TypeObject ParticleSystemCoreBase::_type(
    ParticleSystemCoreBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ParticleSystemCoreBase::createEmptyLocal),
    ParticleSystemCore::initMethod,
    ParticleSystemCore::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ParticleSystemCore::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ParticleSystemCore\"\n"
    "\tparent=\"MaterialDrawable\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"System\"\n"
    "\t\ttype=\"ParticleSystem\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Drawer\"\n"
    "\t\ttype=\"ParticleSystemDrawer\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"SortingMode\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"ParticleSystemCore::NONE\"\n"
    "\t>\n"
    "   The method used to sort particles.\n"
    "   NONE - no particle sorting.\n"
    "   FRONT_TO_BACK - particles will be sorted from closest to the view point to the furthest.\n"
    "   BACK_TO_FRONT - particles will be sorted from furthest to the view point to the closest.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Sort\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\tSort is used to keep track of indices used to draw particles from \n"
    "\tnearest to farthest.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Distances\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ParticleSystemCoreBase::getType(void)
{
    return _type;
}

const FieldContainerType &ParticleSystemCoreBase::getType(void) const
{
    return _type;
}

UInt32 ParticleSystemCoreBase::getContainerSize(void) const
{
    return sizeof(ParticleSystemCore);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ParticleSystemCore::_sfSystem field.
const SFUnrecParticleSystemPtr *ParticleSystemCoreBase::getSFSystem(void) const
{
    return &_sfSystem;
}

SFUnrecParticleSystemPtr *ParticleSystemCoreBase::editSFSystem         (void)
{
    editSField(SystemFieldMask);

    return &_sfSystem;
}

//! Get the ParticleSystemCore::_sfDrawer field.
const SFUnrecParticleSystemDrawerPtr *ParticleSystemCoreBase::getSFDrawer(void) const
{
    return &_sfDrawer;
}

SFUnrecParticleSystemDrawerPtr *ParticleSystemCoreBase::editSFDrawer         (void)
{
    editSField(DrawerFieldMask);

    return &_sfDrawer;
}

SFUInt32 *ParticleSystemCoreBase::editSFSortingMode(void)
{
    editSField(SortingModeFieldMask);

    return &_sfSortingMode;
}

const SFUInt32 *ParticleSystemCoreBase::getSFSortingMode(void) const
{
    return &_sfSortingMode;
}


MFUInt32 *ParticleSystemCoreBase::editMFSort(void)
{
    editMField(SortFieldMask, _mfSort);

    return &_mfSort;
}

const MFUInt32 *ParticleSystemCoreBase::getMFSort(void) const
{
    return &_mfSort;
}


MFReal32 *ParticleSystemCoreBase::editMFDistances(void)
{
    editMField(DistancesFieldMask, _mfDistances);

    return &_mfDistances;
}

const MFReal32 *ParticleSystemCoreBase::getMFDistances(void) const
{
    return &_mfDistances;
}






/*------------------------------ access -----------------------------------*/

UInt32 ParticleSystemCoreBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SystemFieldMask & whichField))
    {
        returnValue += _sfSystem.getBinSize();
    }
    if(FieldBits::NoField != (DrawerFieldMask & whichField))
    {
        returnValue += _sfDrawer.getBinSize();
    }
    if(FieldBits::NoField != (SortingModeFieldMask & whichField))
    {
        returnValue += _sfSortingMode.getBinSize();
    }
    if(FieldBits::NoField != (SortFieldMask & whichField))
    {
        returnValue += _mfSort.getBinSize();
    }
    if(FieldBits::NoField != (DistancesFieldMask & whichField))
    {
        returnValue += _mfDistances.getBinSize();
    }

    return returnValue;
}

void ParticleSystemCoreBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SystemFieldMask & whichField))
    {
        _sfSystem.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawerFieldMask & whichField))
    {
        _sfDrawer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SortingModeFieldMask & whichField))
    {
        _sfSortingMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SortFieldMask & whichField))
    {
        _mfSort.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DistancesFieldMask & whichField))
    {
        _mfDistances.copyToBin(pMem);
    }
}

void ParticleSystemCoreBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SystemFieldMask & whichField))
    {
        _sfSystem.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawerFieldMask & whichField))
    {
        _sfDrawer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SortingModeFieldMask & whichField))
    {
        _sfSortingMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SortFieldMask & whichField))
    {
        _mfSort.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DistancesFieldMask & whichField))
    {
        _mfDistances.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ParticleSystemCoreTransitPtr ParticleSystemCoreBase::createLocal(BitVector bFlags)
{
    ParticleSystemCoreTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ParticleSystemCore>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ParticleSystemCoreTransitPtr ParticleSystemCoreBase::createDependent(BitVector bFlags)
{
    ParticleSystemCoreTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ParticleSystemCore>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ParticleSystemCoreTransitPtr ParticleSystemCoreBase::create(void)
{
    ParticleSystemCoreTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ParticleSystemCore>(tmpPtr);
    }

    return fc;
}

ParticleSystemCore *ParticleSystemCoreBase::createEmptyLocal(BitVector bFlags)
{
    ParticleSystemCore *returnValue;

    newPtr<ParticleSystemCore>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ParticleSystemCore *ParticleSystemCoreBase::createEmpty(void)
{
    ParticleSystemCore *returnValue;

    newPtr<ParticleSystemCore>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr ParticleSystemCoreBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ParticleSystemCore *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ParticleSystemCore *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ParticleSystemCoreBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ParticleSystemCore *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ParticleSystemCore *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ParticleSystemCoreBase::shallowCopy(void) const
{
    ParticleSystemCore *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ParticleSystemCore *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

ParticleSystemCoreBase::ParticleSystemCoreBase(void) :
    Inherited(),
    _sfSystem                 (NULL),
    _sfDrawer                 (NULL),
    _sfSortingMode            (UInt32(ParticleSystemCore::NONE)),
    _mfSort                   (),
    _mfDistances              ()
{
}

ParticleSystemCoreBase::ParticleSystemCoreBase(const ParticleSystemCoreBase &source) :
    Inherited(source),
    _sfSystem                 (NULL),
    _sfDrawer                 (NULL),
    _sfSortingMode            (source._sfSortingMode            ),
    _mfSort                   (source._mfSort                   ),
    _mfDistances              (source._mfDistances              )
{
}


/*-------------------------- destructors ----------------------------------*/

ParticleSystemCoreBase::~ParticleSystemCoreBase(void)
{
}

void ParticleSystemCoreBase::onCreate(const ParticleSystemCore *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ParticleSystemCore *pThis = static_cast<ParticleSystemCore *>(this);

        pThis->setSystem(source->getSystem());

        pThis->setDrawer(source->getDrawer());
    }
}

GetFieldHandlePtr ParticleSystemCoreBase::getHandleSystem          (void) const
{
    SFUnrecParticleSystemPtr::GetHandlePtr returnValue(
        new  SFUnrecParticleSystemPtr::GetHandle(
             &_sfSystem,
             this->getType().getFieldDesc(SystemFieldId),
             const_cast<ParticleSystemCoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemCoreBase::editHandleSystem         (void)
{
    SFUnrecParticleSystemPtr::EditHandlePtr returnValue(
        new  SFUnrecParticleSystemPtr::EditHandle(
             &_sfSystem,
             this->getType().getFieldDesc(SystemFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleSystemCore::setSystem,
                    static_cast<ParticleSystemCore *>(this), _1));

    editSField(SystemFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemCoreBase::getHandleDrawer          (void) const
{
    SFUnrecParticleSystemDrawerPtr::GetHandlePtr returnValue(
        new  SFUnrecParticleSystemDrawerPtr::GetHandle(
             &_sfDrawer,
             this->getType().getFieldDesc(DrawerFieldId),
             const_cast<ParticleSystemCoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemCoreBase::editHandleDrawer         (void)
{
    SFUnrecParticleSystemDrawerPtr::EditHandlePtr returnValue(
        new  SFUnrecParticleSystemDrawerPtr::EditHandle(
             &_sfDrawer,
             this->getType().getFieldDesc(DrawerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleSystemCore::setDrawer,
                    static_cast<ParticleSystemCore *>(this), _1));

    editSField(DrawerFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemCoreBase::getHandleSortingMode     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSortingMode,
             this->getType().getFieldDesc(SortingModeFieldId),
             const_cast<ParticleSystemCoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemCoreBase::editHandleSortingMode    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSortingMode,
             this->getType().getFieldDesc(SortingModeFieldId),
             this));


    editSField(SortingModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemCoreBase::getHandleSort            (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfSort,
             this->getType().getFieldDesc(SortFieldId),
             const_cast<ParticleSystemCoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemCoreBase::editHandleSort           (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfSort,
             this->getType().getFieldDesc(SortFieldId),
             this));


    editMField(SortFieldMask, _mfSort);

    return returnValue;
}

GetFieldHandlePtr ParticleSystemCoreBase::getHandleDistances       (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfDistances,
             this->getType().getFieldDesc(DistancesFieldId),
             const_cast<ParticleSystemCoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleSystemCoreBase::editHandleDistances      (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfDistances,
             this->getType().getFieldDesc(DistancesFieldId),
             this));


    editMField(DistancesFieldMask, _mfDistances);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void ParticleSystemCoreBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ParticleSystemCore *pThis = static_cast<ParticleSystemCore *>(this);

    pThis->execSync(static_cast<ParticleSystemCore *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ParticleSystemCoreBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ParticleSystemCore *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ParticleSystemCore *>(pRefAspect),
                  dynamic_cast<const ParticleSystemCore *>(this));

    return returnValue;
}
#endif

void ParticleSystemCoreBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ParticleSystemCore *>(this)->setSystem(NULL);

    static_cast<ParticleSystemCore *>(this)->setDrawer(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfSort.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfDistances.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
