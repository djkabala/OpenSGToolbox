/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ConditionalParticleAffector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGParticleAffector.h"        // Affectors Class

#include "OSGConditionalParticleAffectorBase.h"
#include "OSGConditionalParticleAffector.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ConditionalParticleAffector
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     ConditionalParticleAffectorBase::_sfConditionalAttribute
    
*/

/*! \var UInt16          ConditionalParticleAffectorBase::_sfConditionalOperator
    
*/

/*! \var UInt32          ConditionalParticleAffectorBase::_sfConditionalValue
    
*/

/*! \var ParticleAffector * ConditionalParticleAffectorBase::_mfAffectors
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ConditionalParticleAffector *>::_type("ConditionalParticleAffectorPtr", "ParticleAffectorPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ConditionalParticleAffector *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ConditionalParticleAffector *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ConditionalParticleAffector *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ConditionalParticleAffectorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFString::Description(
        SFString::getClassType(),
        "ConditionalAttribute",
        "",
        ConditionalAttributeFieldId, ConditionalAttributeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ConditionalParticleAffector::editHandleConditionalAttribute),
        static_cast<FieldGetMethodSig >(&ConditionalParticleAffector::getHandleConditionalAttribute));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(),
        "ConditionalOperator",
        "",
        ConditionalOperatorFieldId, ConditionalOperatorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ConditionalParticleAffector::editHandleConditionalOperator),
        static_cast<FieldGetMethodSig >(&ConditionalParticleAffector::getHandleConditionalOperator));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "ConditionalValue",
        "",
        ConditionalValueFieldId, ConditionalValueFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ConditionalParticleAffector::editHandleConditionalValue),
        static_cast<FieldGetMethodSig >(&ConditionalParticleAffector::getHandleConditionalValue));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecParticleAffectorPtr::Description(
        MFUnrecParticleAffectorPtr::getClassType(),
        "Affectors",
        "",
        AffectorsFieldId, AffectorsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ConditionalParticleAffector::editHandleAffectors),
        static_cast<FieldGetMethodSig >(&ConditionalParticleAffector::getHandleAffectors));

    oType.addInitialDesc(pDesc);
}


ConditionalParticleAffectorBase::TypeObject ConditionalParticleAffectorBase::_type(
    ConditionalParticleAffectorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ConditionalParticleAffectorBase::createEmptyLocal),
    ConditionalParticleAffector::initMethod,
    ConditionalParticleAffector::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ConditionalParticleAffector::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ConditionalParticleAffector\"\n"
    "\tparent=\"ParticleAffector\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"ConditionalAttribute\"\n"
    "\t\ttype=\"std::string\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t>\n"
    "\t</Field>\n"
    "    <Field\n"
    "\t\tname=\"ConditionalOperator\"\n"
    "\t\ttype=\"UInt16\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t>\n"
    "\t</Field>\n"
    "    <Field\n"
    "\t\tname=\"ConditionalValue\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "    <Field\n"
    "        name=\"Affectors\"\n"
    "        type=\"ParticleAffector\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ConditionalParticleAffectorBase::getType(void)
{
    return _type;
}

const FieldContainerType &ConditionalParticleAffectorBase::getType(void) const
{
    return _type;
}

UInt32 ConditionalParticleAffectorBase::getContainerSize(void) const
{
    return sizeof(ConditionalParticleAffector);
}

/*------------------------- decorator get ------------------------------*/


SFString *ConditionalParticleAffectorBase::editSFConditionalAttribute(void)
{
    editSField(ConditionalAttributeFieldMask);

    return &_sfConditionalAttribute;
}

const SFString *ConditionalParticleAffectorBase::getSFConditionalAttribute(void) const
{
    return &_sfConditionalAttribute;
}


SFUInt16 *ConditionalParticleAffectorBase::editSFConditionalOperator(void)
{
    editSField(ConditionalOperatorFieldMask);

    return &_sfConditionalOperator;
}

const SFUInt16 *ConditionalParticleAffectorBase::getSFConditionalOperator(void) const
{
    return &_sfConditionalOperator;
}


SFUInt32 *ConditionalParticleAffectorBase::editSFConditionalValue(void)
{
    editSField(ConditionalValueFieldMask);

    return &_sfConditionalValue;
}

const SFUInt32 *ConditionalParticleAffectorBase::getSFConditionalValue(void) const
{
    return &_sfConditionalValue;
}


//! Get the ConditionalParticleAffector::_mfAffectors field.
const MFUnrecParticleAffectorPtr *ConditionalParticleAffectorBase::getMFAffectors(void) const
{
    return &_mfAffectors;
}

MFUnrecParticleAffectorPtr *ConditionalParticleAffectorBase::editMFAffectors      (void)
{
    editMField(AffectorsFieldMask, _mfAffectors);

    return &_mfAffectors;
}



void ConditionalParticleAffectorBase::pushToAffectors(ParticleAffector * const value)
{
    editMField(AffectorsFieldMask, _mfAffectors);

    _mfAffectors.push_back(value);
}

void ConditionalParticleAffectorBase::assignAffectors(const MFUnrecParticleAffectorPtr &value)
{
    MFUnrecParticleAffectorPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecParticleAffectorPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<ConditionalParticleAffector *>(this)->clearAffectors();

    while(elemIt != elemEnd)
    {
        this->pushToAffectors(*elemIt);

        ++elemIt;
    }
}

void ConditionalParticleAffectorBase::removeFromAffectors(UInt32 uiIndex)
{
    if(uiIndex < _mfAffectors.size())
    {
        editMField(AffectorsFieldMask, _mfAffectors);

        _mfAffectors.erase(uiIndex);
    }
}

void ConditionalParticleAffectorBase::removeObjFromAffectors(ParticleAffector * const value)
{
    Int32 iElemIdx = _mfAffectors.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(AffectorsFieldMask, _mfAffectors);

        _mfAffectors.erase(iElemIdx);
    }
}
void ConditionalParticleAffectorBase::clearAffectors(void)
{
    editMField(AffectorsFieldMask, _mfAffectors);


    _mfAffectors.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 ConditionalParticleAffectorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ConditionalAttributeFieldMask & whichField))
    {
        returnValue += _sfConditionalAttribute.getBinSize();
    }
    if(FieldBits::NoField != (ConditionalOperatorFieldMask & whichField))
    {
        returnValue += _sfConditionalOperator.getBinSize();
    }
    if(FieldBits::NoField != (ConditionalValueFieldMask & whichField))
    {
        returnValue += _sfConditionalValue.getBinSize();
    }
    if(FieldBits::NoField != (AffectorsFieldMask & whichField))
    {
        returnValue += _mfAffectors.getBinSize();
    }

    return returnValue;
}

void ConditionalParticleAffectorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ConditionalAttributeFieldMask & whichField))
    {
        _sfConditionalAttribute.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConditionalOperatorFieldMask & whichField))
    {
        _sfConditionalOperator.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConditionalValueFieldMask & whichField))
    {
        _sfConditionalValue.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AffectorsFieldMask & whichField))
    {
        _mfAffectors.copyToBin(pMem);
    }
}

void ConditionalParticleAffectorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ConditionalAttributeFieldMask & whichField))
    {
        _sfConditionalAttribute.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConditionalOperatorFieldMask & whichField))
    {
        _sfConditionalOperator.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConditionalValueFieldMask & whichField))
    {
        _sfConditionalValue.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AffectorsFieldMask & whichField))
    {
        _mfAffectors.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ConditionalParticleAffectorTransitPtr ConditionalParticleAffectorBase::createLocal(BitVector bFlags)
{
    ConditionalParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ConditionalParticleAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ConditionalParticleAffectorTransitPtr ConditionalParticleAffectorBase::createDependent(BitVector bFlags)
{
    ConditionalParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ConditionalParticleAffector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ConditionalParticleAffectorTransitPtr ConditionalParticleAffectorBase::create(void)
{
    ConditionalParticleAffectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ConditionalParticleAffector>(tmpPtr);
    }

    return fc;
}

ConditionalParticleAffector *ConditionalParticleAffectorBase::createEmptyLocal(BitVector bFlags)
{
    ConditionalParticleAffector *returnValue;

    newPtr<ConditionalParticleAffector>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ConditionalParticleAffector *ConditionalParticleAffectorBase::createEmpty(void)
{
    ConditionalParticleAffector *returnValue;

    newPtr<ConditionalParticleAffector>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr ConditionalParticleAffectorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ConditionalParticleAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ConditionalParticleAffector *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ConditionalParticleAffectorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ConditionalParticleAffector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ConditionalParticleAffector *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ConditionalParticleAffectorBase::shallowCopy(void) const
{
    ConditionalParticleAffector *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ConditionalParticleAffector *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

ConditionalParticleAffectorBase::ConditionalParticleAffectorBase(void) :
    Inherited(),
    _sfConditionalAttribute   (),
    _sfConditionalOperator    (UInt16(1)),
    _sfConditionalValue       (UInt32(0.0)),
    _mfAffectors              ()
{
}

ConditionalParticleAffectorBase::ConditionalParticleAffectorBase(const ConditionalParticleAffectorBase &source) :
    Inherited(source),
    _sfConditionalAttribute   (source._sfConditionalAttribute   ),
    _sfConditionalOperator    (source._sfConditionalOperator    ),
    _sfConditionalValue       (source._sfConditionalValue       ),
    _mfAffectors              ()
{
}


/*-------------------------- destructors ----------------------------------*/

ConditionalParticleAffectorBase::~ConditionalParticleAffectorBase(void)
{
}

void ConditionalParticleAffectorBase::onCreate(const ConditionalParticleAffector *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ConditionalParticleAffector *pThis = static_cast<ConditionalParticleAffector *>(this);

        MFUnrecParticleAffectorPtr::const_iterator AffectorsIt  =
            source->_mfAffectors.begin();
        MFUnrecParticleAffectorPtr::const_iterator AffectorsEnd =
            source->_mfAffectors.end  ();

        while(AffectorsIt != AffectorsEnd)
        {
            pThis->pushToAffectors(*AffectorsIt);

            ++AffectorsIt;
        }
    }
}

GetFieldHandlePtr ConditionalParticleAffectorBase::getHandleConditionalAttribute (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfConditionalAttribute,
             this->getType().getFieldDesc(ConditionalAttributeFieldId),
             const_cast<ConditionalParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ConditionalParticleAffectorBase::editHandleConditionalAttribute(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfConditionalAttribute,
             this->getType().getFieldDesc(ConditionalAttributeFieldId),
             this));


    editSField(ConditionalAttributeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ConditionalParticleAffectorBase::getHandleConditionalOperator (void) const
{
    SFUInt16::GetHandlePtr returnValue(
        new  SFUInt16::GetHandle(
             &_sfConditionalOperator,
             this->getType().getFieldDesc(ConditionalOperatorFieldId),
             const_cast<ConditionalParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ConditionalParticleAffectorBase::editHandleConditionalOperator(void)
{
    SFUInt16::EditHandlePtr returnValue(
        new  SFUInt16::EditHandle(
             &_sfConditionalOperator,
             this->getType().getFieldDesc(ConditionalOperatorFieldId),
             this));


    editSField(ConditionalOperatorFieldMask);

    return returnValue;
}

GetFieldHandlePtr ConditionalParticleAffectorBase::getHandleConditionalValue (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfConditionalValue,
             this->getType().getFieldDesc(ConditionalValueFieldId),
             const_cast<ConditionalParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ConditionalParticleAffectorBase::editHandleConditionalValue(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfConditionalValue,
             this->getType().getFieldDesc(ConditionalValueFieldId),
             this));


    editSField(ConditionalValueFieldMask);

    return returnValue;
}

GetFieldHandlePtr ConditionalParticleAffectorBase::getHandleAffectors       (void) const
{
    MFUnrecParticleAffectorPtr::GetHandlePtr returnValue(
        new  MFUnrecParticleAffectorPtr::GetHandle(
             &_mfAffectors,
             this->getType().getFieldDesc(AffectorsFieldId),
             const_cast<ConditionalParticleAffectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ConditionalParticleAffectorBase::editHandleAffectors      (void)
{
    MFUnrecParticleAffectorPtr::EditHandlePtr returnValue(
        new  MFUnrecParticleAffectorPtr::EditHandle(
             &_mfAffectors,
             this->getType().getFieldDesc(AffectorsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&ConditionalParticleAffector::pushToAffectors,
                    static_cast<ConditionalParticleAffector *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&ConditionalParticleAffector::removeFromAffectors,
                    static_cast<ConditionalParticleAffector *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&ConditionalParticleAffector::removeObjFromAffectors,
                    static_cast<ConditionalParticleAffector *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&ConditionalParticleAffector::clearAffectors,
                    static_cast<ConditionalParticleAffector *>(this)));

    editMField(AffectorsFieldMask, _mfAffectors);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void ConditionalParticleAffectorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ConditionalParticleAffector *pThis = static_cast<ConditionalParticleAffector *>(this);

    pThis->execSync(static_cast<ConditionalParticleAffector *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ConditionalParticleAffectorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ConditionalParticleAffector *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ConditionalParticleAffector *>(pRefAspect),
                  dynamic_cast<const ConditionalParticleAffector *>(this));

    return returnValue;
}
#endif

void ConditionalParticleAffectorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ConditionalParticleAffector *>(this)->clearAffectors();


}


OSG_END_NAMESPACE
