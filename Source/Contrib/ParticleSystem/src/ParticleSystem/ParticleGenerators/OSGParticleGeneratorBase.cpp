/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com), Daniel Guilliams           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParticleGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGNode.h"                    // Beacon Class

#include "OSGParticleGeneratorBase.h"
#include "OSGParticleGenerator.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ParticleGenerator
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Node *          ParticleGeneratorBase::_sfBeacon
    
*/

/*! \var bool            ParticleGeneratorBase::_sfGenerateInWorldSpace
    
*/

/*! \var bool            ParticleGeneratorBase::_sfActive
    If true then this Generator will be applied.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ParticleGenerator *>::_type("ParticleGeneratorPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ParticleGenerator *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ParticleGenerator *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ParticleGenerator *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ParticleGeneratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "Beacon",
        "",
        BeaconFieldId, BeaconFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGenerator::editHandleBeacon),
        static_cast<FieldGetMethodSig >(&ParticleGenerator::getHandleBeacon));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "GenerateInWorldSpace",
        "",
        GenerateInWorldSpaceFieldId, GenerateInWorldSpaceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGenerator::editHandleGenerateInWorldSpace),
        static_cast<FieldGetMethodSig >(&ParticleGenerator::getHandleGenerateInWorldSpace));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Active",
        "If true then this Generator will be applied.\n",
        ActiveFieldId, ActiveFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ParticleGenerator::editHandleActive),
        static_cast<FieldGetMethodSig >(&ParticleGenerator::getHandleActive));

    oType.addInitialDesc(pDesc);
}


ParticleGeneratorBase::TypeObject ParticleGeneratorBase::_type(
    ParticleGeneratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    ParticleGenerator::initMethod,
    ParticleGenerator::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ParticleGenerator::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ParticleGenerator\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribParticleSystem\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com), Daniel Guilliams           \"\n"
    "    >\n"
    "    <Field\n"
    "        name=\"Beacon\"\n"
    "        type=\"Node\"\n"
    "        category=\"pointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"GenerateInWorldSpace\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "\t<Field\n"
    "\t\tname=\"Active\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"true\"\n"
    "\t>\n"
    "\tIf true then this Generator will be applied.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ParticleGeneratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &ParticleGeneratorBase::getType(void) const
{
    return _type;
}

UInt32 ParticleGeneratorBase::getContainerSize(void) const
{
    return sizeof(ParticleGenerator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ParticleGenerator::_sfBeacon field.
const SFUnrecNodePtr *ParticleGeneratorBase::getSFBeacon(void) const
{
    return &_sfBeacon;
}

SFUnrecNodePtr      *ParticleGeneratorBase::editSFBeacon         (void)
{
    editSField(BeaconFieldMask);

    return &_sfBeacon;
}

SFBool *ParticleGeneratorBase::editSFGenerateInWorldSpace(void)
{
    editSField(GenerateInWorldSpaceFieldMask);

    return &_sfGenerateInWorldSpace;
}

const SFBool *ParticleGeneratorBase::getSFGenerateInWorldSpace(void) const
{
    return &_sfGenerateInWorldSpace;
}


SFBool *ParticleGeneratorBase::editSFActive(void)
{
    editSField(ActiveFieldMask);

    return &_sfActive;
}

const SFBool *ParticleGeneratorBase::getSFActive(void) const
{
    return &_sfActive;
}






/*------------------------------ access -----------------------------------*/

UInt32 ParticleGeneratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        returnValue += _sfBeacon.getBinSize();
    }
    if(FieldBits::NoField != (GenerateInWorldSpaceFieldMask & whichField))
    {
        returnValue += _sfGenerateInWorldSpace.getBinSize();
    }
    if(FieldBits::NoField != (ActiveFieldMask & whichField))
    {
        returnValue += _sfActive.getBinSize();
    }

    return returnValue;
}

void ParticleGeneratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GenerateInWorldSpaceFieldMask & whichField))
    {
        _sfGenerateInWorldSpace.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ActiveFieldMask & whichField))
    {
        _sfActive.copyToBin(pMem);
    }
}

void ParticleGeneratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GenerateInWorldSpaceFieldMask & whichField))
    {
        _sfGenerateInWorldSpace.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ActiveFieldMask & whichField))
    {
        _sfActive.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

ParticleGeneratorBase::ParticleGeneratorBase(void) :
    Inherited(),
    _sfBeacon                 (NULL),
    _sfGenerateInWorldSpace   (bool(false)),
    _sfActive                 (bool(true))
{
}

ParticleGeneratorBase::ParticleGeneratorBase(const ParticleGeneratorBase &source) :
    Inherited(source),
    _sfBeacon                 (NULL),
    _sfGenerateInWorldSpace   (source._sfGenerateInWorldSpace   ),
    _sfActive                 (source._sfActive                 )
{
}


/*-------------------------- destructors ----------------------------------*/

ParticleGeneratorBase::~ParticleGeneratorBase(void)
{
}

void ParticleGeneratorBase::onCreate(const ParticleGenerator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ParticleGenerator *pThis = static_cast<ParticleGenerator *>(this);

        pThis->setBeacon(source->getBeacon());
    }
}

GetFieldHandlePtr ParticleGeneratorBase::getHandleBeacon          (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfBeacon,
             this->getType().getFieldDesc(BeaconFieldId),
             const_cast<ParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeneratorBase::editHandleBeacon         (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfBeacon,
             this->getType().getFieldDesc(BeaconFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ParticleGenerator::setBeacon,
                    static_cast<ParticleGenerator *>(this), _1));

    editSField(BeaconFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleGeneratorBase::getHandleGenerateInWorldSpace (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfGenerateInWorldSpace,
             this->getType().getFieldDesc(GenerateInWorldSpaceFieldId),
             const_cast<ParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeneratorBase::editHandleGenerateInWorldSpace(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfGenerateInWorldSpace,
             this->getType().getFieldDesc(GenerateInWorldSpaceFieldId),
             this));


    editSField(GenerateInWorldSpaceFieldMask);

    return returnValue;
}

GetFieldHandlePtr ParticleGeneratorBase::getHandleActive          (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfActive,
             this->getType().getFieldDesc(ActiveFieldId),
             const_cast<ParticleGeneratorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ParticleGeneratorBase::editHandleActive         (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfActive,
             this->getType().getFieldDesc(ActiveFieldId),
             this));


    editSField(ActiveFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void ParticleGeneratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ParticleGenerator *pThis = static_cast<ParticleGenerator *>(this);

    pThis->execSync(static_cast<ParticleGenerator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ParticleGeneratorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ParticleGenerator *>(this)->setBeacon(NULL);


}


OSG_END_NAMESPACE
