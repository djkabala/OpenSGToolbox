/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsGeom!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGPhysicsBody.h"             // Body Class
#include "OSGPhysicsSpace.h"            // Space Class

#include "OSGPhysicsGeomBase.h"
#include "OSGPhysicsGeom.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsGeom
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var PhysicsBody *   PhysicsGeomBase::_sfBody
    
*/

/*! \var Vec3f           PhysicsGeomBase::_sfPosition
    
*/

/*! \var Matrix          PhysicsGeomBase::_sfRotation
    
*/

/*! \var Quaternion      PhysicsGeomBase::_sfQuaternion
    
*/

/*! \var Vec3f           PhysicsGeomBase::_sfOffsetPosition
    
*/

/*! \var Matrix          PhysicsGeomBase::_sfOffsetRotation
    
*/

/*! \var Quaternion      PhysicsGeomBase::_sfOffsetQuaternion
    
*/

/*! \var UInt64          PhysicsGeomBase::_sfCategoryBits
    
*/

/*! \var UInt64          PhysicsGeomBase::_sfCollideBits
    
*/

/*! \var PhysicsSpace *  PhysicsGeomBase::_sfSpace
    
*/

/*! \var bool            PhysicsGeomBase::_sfEnable
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsGeom *>::_type("PhysicsGeomPtr", "AttachmentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsGeom *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsGeom *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsGeom *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsGeomBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecPhysicsBodyPtr::Description(
        SFUnrecPhysicsBodyPtr::getClassType(),
        "body",
        "",
        BodyFieldId, BodyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleBody),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleBody));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "position",
        "",
        PositionFieldId, PositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandlePosition),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandlePosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "rotation",
        "",
        RotationFieldId, RotationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleRotation),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleRotation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFQuaternion::Description(
        SFQuaternion::getClassType(),
        "quaternion",
        "",
        QuaternionFieldId, QuaternionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleQuaternion),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleQuaternion));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "offsetPosition",
        "",
        OffsetPositionFieldId, OffsetPositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleOffsetPosition),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleOffsetPosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "offsetRotation",
        "",
        OffsetRotationFieldId, OffsetRotationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleOffsetRotation),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleOffsetRotation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFQuaternion::Description(
        SFQuaternion::getClassType(),
        "offsetQuaternion",
        "",
        OffsetQuaternionFieldId, OffsetQuaternionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleOffsetQuaternion),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleOffsetQuaternion));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt64::Description(
        SFUInt64::getClassType(),
        "categoryBits",
        "",
        CategoryBitsFieldId, CategoryBitsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleCategoryBits),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleCategoryBits));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt64::Description(
        SFUInt64::getClassType(),
        "collideBits",
        "",
        CollideBitsFieldId, CollideBitsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleCollideBits),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleCollideBits));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPhysicsSpacePtr::Description(
        SFUnrecPhysicsSpacePtr::getClassType(),
        "space",
        "",
        SpaceFieldId, SpaceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleSpace),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleSpace));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "enable",
        "",
        EnableFieldId, EnableFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsGeom::editHandleEnable),
        static_cast<FieldGetMethodSig >(&PhysicsGeom::getHandleEnable));

    oType.addInitialDesc(pDesc);
}


PhysicsGeomBase::TypeObject PhysicsGeomBase::_type(
    PhysicsGeomBase::getClassname(),
    Inherited::getClassname(),
    "PhysicsGeom",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsGeomBase::createEmptyLocal),
    PhysicsGeom::initMethod,
    PhysicsGeom::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsGeom::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsGeom\"\n"
    "\tparent=\"Attachment\"\n"
    "    library=\"ContribPhysics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com),  Behboud Kalantary         \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"body\"\n"
    "\t\ttype=\"PhysicsBody\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"position\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"rotation\"\n"
    "\t\ttype=\"Matrix\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"quaternion\"\n"
    "\t\ttype=\"Quaternion\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"offsetPosition\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"offsetRotation\"\n"
    "\t\ttype=\"Matrix\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"offsetQuaternion\"\n"
    "\t\ttype=\"Quaternion\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"categoryBits\"\n"
    "\t\ttype=\"UInt64\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"collideBits\"\n"
    "\t\ttype=\"UInt64\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"space\"\n"
    "\t\ttype=\"PhysicsSpace\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"enable\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsGeomBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsGeomBase::getType(void) const
{
    return _type;
}

UInt32 PhysicsGeomBase::getContainerSize(void) const
{
    return sizeof(PhysicsGeom);
}

/*------------------------- decorator get ------------------------------*/


//! Get the PhysicsGeom::_sfBody field.
const SFUnrecPhysicsBodyPtr *PhysicsGeomBase::getSFBody(void) const
{
    return &_sfBody;
}

SFUnrecPhysicsBodyPtr *PhysicsGeomBase::editSFBody           (void)
{
    editSField(BodyFieldMask);

    return &_sfBody;
}

SFVec3f *PhysicsGeomBase::editSFPosition(void)
{
    editSField(PositionFieldMask);

    return &_sfPosition;
}

const SFVec3f *PhysicsGeomBase::getSFPosition(void) const
{
    return &_sfPosition;
}


SFMatrix *PhysicsGeomBase::editSFRotation(void)
{
    editSField(RotationFieldMask);

    return &_sfRotation;
}

const SFMatrix *PhysicsGeomBase::getSFRotation(void) const
{
    return &_sfRotation;
}


SFQuaternion *PhysicsGeomBase::editSFQuaternion(void)
{
    editSField(QuaternionFieldMask);

    return &_sfQuaternion;
}

const SFQuaternion *PhysicsGeomBase::getSFQuaternion(void) const
{
    return &_sfQuaternion;
}


SFVec3f *PhysicsGeomBase::editSFOffsetPosition(void)
{
    editSField(OffsetPositionFieldMask);

    return &_sfOffsetPosition;
}

const SFVec3f *PhysicsGeomBase::getSFOffsetPosition(void) const
{
    return &_sfOffsetPosition;
}


SFMatrix *PhysicsGeomBase::editSFOffsetRotation(void)
{
    editSField(OffsetRotationFieldMask);

    return &_sfOffsetRotation;
}

const SFMatrix *PhysicsGeomBase::getSFOffsetRotation(void) const
{
    return &_sfOffsetRotation;
}


SFQuaternion *PhysicsGeomBase::editSFOffsetQuaternion(void)
{
    editSField(OffsetQuaternionFieldMask);

    return &_sfOffsetQuaternion;
}

const SFQuaternion *PhysicsGeomBase::getSFOffsetQuaternion(void) const
{
    return &_sfOffsetQuaternion;
}


SFUInt64 *PhysicsGeomBase::editSFCategoryBits(void)
{
    editSField(CategoryBitsFieldMask);

    return &_sfCategoryBits;
}

const SFUInt64 *PhysicsGeomBase::getSFCategoryBits(void) const
{
    return &_sfCategoryBits;
}


SFUInt64 *PhysicsGeomBase::editSFCollideBits(void)
{
    editSField(CollideBitsFieldMask);

    return &_sfCollideBits;
}

const SFUInt64 *PhysicsGeomBase::getSFCollideBits(void) const
{
    return &_sfCollideBits;
}


//! Get the PhysicsGeom::_sfSpace field.
const SFUnrecPhysicsSpacePtr *PhysicsGeomBase::getSFSpace(void) const
{
    return &_sfSpace;
}

SFUnrecPhysicsSpacePtr *PhysicsGeomBase::editSFSpace          (void)
{
    editSField(SpaceFieldMask);

    return &_sfSpace;
}

SFBool *PhysicsGeomBase::editSFEnable(void)
{
    editSField(EnableFieldMask);

    return &_sfEnable;
}

const SFBool *PhysicsGeomBase::getSFEnable(void) const
{
    return &_sfEnable;
}






/*------------------------------ access -----------------------------------*/

UInt32 PhysicsGeomBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (BodyFieldMask & whichField))
    {
        returnValue += _sfBody.getBinSize();
    }
    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }
    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        returnValue += _sfRotation.getBinSize();
    }
    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
    {
        returnValue += _sfQuaternion.getBinSize();
    }
    if(FieldBits::NoField != (OffsetPositionFieldMask & whichField))
    {
        returnValue += _sfOffsetPosition.getBinSize();
    }
    if(FieldBits::NoField != (OffsetRotationFieldMask & whichField))
    {
        returnValue += _sfOffsetRotation.getBinSize();
    }
    if(FieldBits::NoField != (OffsetQuaternionFieldMask & whichField))
    {
        returnValue += _sfOffsetQuaternion.getBinSize();
    }
    if(FieldBits::NoField != (CategoryBitsFieldMask & whichField))
    {
        returnValue += _sfCategoryBits.getBinSize();
    }
    if(FieldBits::NoField != (CollideBitsFieldMask & whichField))
    {
        returnValue += _sfCollideBits.getBinSize();
    }
    if(FieldBits::NoField != (SpaceFieldMask & whichField))
    {
        returnValue += _sfSpace.getBinSize();
    }
    if(FieldBits::NoField != (EnableFieldMask & whichField))
    {
        returnValue += _sfEnable.getBinSize();
    }

    return returnValue;
}

void PhysicsGeomBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (BodyFieldMask & whichField))
    {
        _sfBody.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        _sfRotation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
    {
        _sfQuaternion.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OffsetPositionFieldMask & whichField))
    {
        _sfOffsetPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OffsetRotationFieldMask & whichField))
    {
        _sfOffsetRotation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OffsetQuaternionFieldMask & whichField))
    {
        _sfOffsetQuaternion.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CategoryBitsFieldMask & whichField))
    {
        _sfCategoryBits.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CollideBitsFieldMask & whichField))
    {
        _sfCollideBits.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpaceFieldMask & whichField))
    {
        _sfSpace.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnableFieldMask & whichField))
    {
        _sfEnable.copyToBin(pMem);
    }
}

void PhysicsGeomBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (BodyFieldMask & whichField))
    {
        _sfBody.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        _sfRotation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (QuaternionFieldMask & whichField))
    {
        _sfQuaternion.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OffsetPositionFieldMask & whichField))
    {
        _sfOffsetPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OffsetRotationFieldMask & whichField))
    {
        _sfOffsetRotation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OffsetQuaternionFieldMask & whichField))
    {
        _sfOffsetQuaternion.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CategoryBitsFieldMask & whichField))
    {
        _sfCategoryBits.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CollideBitsFieldMask & whichField))
    {
        _sfCollideBits.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpaceFieldMask & whichField))
    {
        _sfSpace.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnableFieldMask & whichField))
    {
        _sfEnable.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsGeomTransitPtr PhysicsGeomBase::createLocal(BitVector bFlags)
{
    PhysicsGeomTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsGeom>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsGeomTransitPtr PhysicsGeomBase::createDependent(BitVector bFlags)
{
    PhysicsGeomTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsGeom>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsGeomTransitPtr PhysicsGeomBase::create(void)
{
    PhysicsGeomTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsGeom>(tmpPtr);
    }

    return fc;
}

PhysicsGeom *PhysicsGeomBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsGeom *returnValue;

    newPtr<PhysicsGeom>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsGeom *PhysicsGeomBase::createEmpty(void)
{
    PhysicsGeom *returnValue;

    newPtr<PhysicsGeom>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr PhysicsGeomBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsGeom *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsGeom *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsGeomBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsGeom *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsGeom *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsGeomBase::shallowCopy(void) const
{
    PhysicsGeom *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsGeom *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

PhysicsGeomBase::PhysicsGeomBase(void) :
    Inherited(),
    _sfBody                   (NULL),
    _sfPosition               (),
    _sfRotation               (),
    _sfQuaternion             (),
    _sfOffsetPosition         (),
    _sfOffsetRotation         (),
    _sfOffsetQuaternion       (),
    _sfCategoryBits           (),
    _sfCollideBits            (),
    _sfSpace                  (NULL),
    _sfEnable                 (bool(true))
{
}

PhysicsGeomBase::PhysicsGeomBase(const PhysicsGeomBase &source) :
    Inherited(source),
    _sfBody                   (NULL),
    _sfPosition               (source._sfPosition               ),
    _sfRotation               (source._sfRotation               ),
    _sfQuaternion             (source._sfQuaternion             ),
    _sfOffsetPosition         (source._sfOffsetPosition         ),
    _sfOffsetRotation         (source._sfOffsetRotation         ),
    _sfOffsetQuaternion       (source._sfOffsetQuaternion       ),
    _sfCategoryBits           (source._sfCategoryBits           ),
    _sfCollideBits            (source._sfCollideBits            ),
    _sfSpace                  (NULL),
    _sfEnable                 (source._sfEnable                 )
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsGeomBase::~PhysicsGeomBase(void)
{
}

void PhysicsGeomBase::onCreate(const PhysicsGeom *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        PhysicsGeom *pThis = static_cast<PhysicsGeom *>(this);

        pThis->setBody(source->getBody());

        pThis->setSpace(source->getSpace());
    }
}

GetFieldHandlePtr PhysicsGeomBase::getHandleBody            (void) const
{
    SFUnrecPhysicsBodyPtr::GetHandlePtr returnValue(
        new  SFUnrecPhysicsBodyPtr::GetHandle(
             &_sfBody,
             this->getType().getFieldDesc(BodyFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleBody           (void)
{
    SFUnrecPhysicsBodyPtr::EditHandlePtr returnValue(
        new  SFUnrecPhysicsBodyPtr::EditHandle(
             &_sfBody,
             this->getType().getFieldDesc(BodyFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsGeom::setBody,
                    static_cast<PhysicsGeom *>(this), _1));

    editSField(BodyFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandlePosition        (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandlePosition       (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             this));


    editSField(PositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandleRotation        (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfRotation,
             this->getType().getFieldDesc(RotationFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleRotation       (void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfRotation,
             this->getType().getFieldDesc(RotationFieldId),
             this));


    editSField(RotationFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandleQuaternion      (void) const
{
    SFQuaternion::GetHandlePtr returnValue(
        new  SFQuaternion::GetHandle(
             &_sfQuaternion,
             this->getType().getFieldDesc(QuaternionFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleQuaternion     (void)
{
    SFQuaternion::EditHandlePtr returnValue(
        new  SFQuaternion::EditHandle(
             &_sfQuaternion,
             this->getType().getFieldDesc(QuaternionFieldId),
             this));


    editSField(QuaternionFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandleOffsetPosition  (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfOffsetPosition,
             this->getType().getFieldDesc(OffsetPositionFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleOffsetPosition (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfOffsetPosition,
             this->getType().getFieldDesc(OffsetPositionFieldId),
             this));


    editSField(OffsetPositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandleOffsetRotation  (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfOffsetRotation,
             this->getType().getFieldDesc(OffsetRotationFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleOffsetRotation (void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfOffsetRotation,
             this->getType().getFieldDesc(OffsetRotationFieldId),
             this));


    editSField(OffsetRotationFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandleOffsetQuaternion (void) const
{
    SFQuaternion::GetHandlePtr returnValue(
        new  SFQuaternion::GetHandle(
             &_sfOffsetQuaternion,
             this->getType().getFieldDesc(OffsetQuaternionFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleOffsetQuaternion(void)
{
    SFQuaternion::EditHandlePtr returnValue(
        new  SFQuaternion::EditHandle(
             &_sfOffsetQuaternion,
             this->getType().getFieldDesc(OffsetQuaternionFieldId),
             this));


    editSField(OffsetQuaternionFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandleCategoryBits    (void) const
{
    SFUInt64::GetHandlePtr returnValue(
        new  SFUInt64::GetHandle(
             &_sfCategoryBits,
             this->getType().getFieldDesc(CategoryBitsFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleCategoryBits   (void)
{
    SFUInt64::EditHandlePtr returnValue(
        new  SFUInt64::EditHandle(
             &_sfCategoryBits,
             this->getType().getFieldDesc(CategoryBitsFieldId),
             this));


    editSField(CategoryBitsFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandleCollideBits     (void) const
{
    SFUInt64::GetHandlePtr returnValue(
        new  SFUInt64::GetHandle(
             &_sfCollideBits,
             this->getType().getFieldDesc(CollideBitsFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleCollideBits    (void)
{
    SFUInt64::EditHandlePtr returnValue(
        new  SFUInt64::EditHandle(
             &_sfCollideBits,
             this->getType().getFieldDesc(CollideBitsFieldId),
             this));


    editSField(CollideBitsFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandleSpace           (void) const
{
    SFUnrecPhysicsSpacePtr::GetHandlePtr returnValue(
        new  SFUnrecPhysicsSpacePtr::GetHandle(
             &_sfSpace,
             this->getType().getFieldDesc(SpaceFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleSpace          (void)
{
    SFUnrecPhysicsSpacePtr::EditHandlePtr returnValue(
        new  SFUnrecPhysicsSpacePtr::EditHandle(
             &_sfSpace,
             this->getType().getFieldDesc(SpaceFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsGeom::setSpace,
                    static_cast<PhysicsGeom *>(this), _1));

    editSField(SpaceFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsGeomBase::getHandleEnable          (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnable,
             this->getType().getFieldDesc(EnableFieldId),
             const_cast<PhysicsGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsGeomBase::editHandleEnable         (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnable,
             this->getType().getFieldDesc(EnableFieldId),
             this));


    editSField(EnableFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void PhysicsGeomBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsGeom *pThis = static_cast<PhysicsGeom *>(this);

    pThis->execSync(static_cast<PhysicsGeom *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsGeomBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsGeom *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsGeom *>(pRefAspect),
                  dynamic_cast<const PhysicsGeom *>(this));

    return returnValue;
}
#endif

void PhysicsGeomBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PhysicsGeom *>(this)->setBody(NULL);

    static_cast<PhysicsGeom *>(this)->setSpace(NULL);


}


OSG_END_NAMESPACE
