/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsGeom
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPHYSICSGEOMBASE_H_
#define _OSGPHYSICSGEOMBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribPhysicsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachment.h" // Parent

#include "OSGPhysicsBodyFields.h"       // Body type
#include "OSGVecFields.h"               // Position type
#include "OSGMathFields.h"              // Rotation type
#include "OSGSysFields.h"               // CategoryBits type
#include "OSGPhysicsSpaceFields.h"      // Space type

#include "OSGPhysicsGeomFields.h"

OSG_BEGIN_NAMESPACE

class PhysicsGeom;

//! \brief PhysicsGeom Base Class.

class OSG_CONTRIBPHYSICS_DLLMAPPING PhysicsGeomBase : public Attachment
{
  public:

    typedef Attachment Inherited;
    typedef Attachment ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(PhysicsGeom);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        BodyFieldId = Inherited::NextFieldId,
        PositionFieldId = BodyFieldId + 1,
        RotationFieldId = PositionFieldId + 1,
        QuaternionFieldId = RotationFieldId + 1,
        OffsetPositionFieldId = QuaternionFieldId + 1,
        OffsetRotationFieldId = OffsetPositionFieldId + 1,
        OffsetQuaternionFieldId = OffsetRotationFieldId + 1,
        CategoryBitsFieldId = OffsetQuaternionFieldId + 1,
        CollideBitsFieldId = CategoryBitsFieldId + 1,
        SpaceFieldId = CollideBitsFieldId + 1,
        EnableFieldId = SpaceFieldId + 1,
        NextFieldId = EnableFieldId + 1
    };

    static const OSG::BitVector BodyFieldMask =
        (TypeTraits<BitVector>::One << BodyFieldId);
    static const OSG::BitVector PositionFieldMask =
        (TypeTraits<BitVector>::One << PositionFieldId);
    static const OSG::BitVector RotationFieldMask =
        (TypeTraits<BitVector>::One << RotationFieldId);
    static const OSG::BitVector QuaternionFieldMask =
        (TypeTraits<BitVector>::One << QuaternionFieldId);
    static const OSG::BitVector OffsetPositionFieldMask =
        (TypeTraits<BitVector>::One << OffsetPositionFieldId);
    static const OSG::BitVector OffsetRotationFieldMask =
        (TypeTraits<BitVector>::One << OffsetRotationFieldId);
    static const OSG::BitVector OffsetQuaternionFieldMask =
        (TypeTraits<BitVector>::One << OffsetQuaternionFieldId);
    static const OSG::BitVector CategoryBitsFieldMask =
        (TypeTraits<BitVector>::One << CategoryBitsFieldId);
    static const OSG::BitVector CollideBitsFieldMask =
        (TypeTraits<BitVector>::One << CollideBitsFieldId);
    static const OSG::BitVector SpaceFieldMask =
        (TypeTraits<BitVector>::One << SpaceFieldId);
    static const OSG::BitVector EnableFieldMask =
        (TypeTraits<BitVector>::One << EnableFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecPhysicsBodyPtr SFBodyType;
    typedef SFVec3f           SFPositionType;
    typedef SFMatrix          SFRotationType;
    typedef SFQuaternion      SFQuaternionType;
    typedef SFVec3f           SFOffsetPositionType;
    typedef SFMatrix          SFOffsetRotationType;
    typedef SFQuaternion      SFOffsetQuaternionType;
    typedef SFUInt64          SFCategoryBitsType;
    typedef SFUInt64          SFCollideBitsType;
    typedef SFUnrecPhysicsSpacePtr SFSpaceType;
    typedef SFBool            SFEnableType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecPhysicsBodyPtr *getSFBody           (void) const;
                  SFUnrecPhysicsBodyPtr *editSFBody           (void);

                  SFVec3f             *editSFPosition       (void);
            const SFVec3f             *getSFPosition        (void) const;

                  SFMatrix            *editSFRotation       (void);
            const SFMatrix            *getSFRotation        (void) const;

                  SFQuaternion        *editSFQuaternion     (void);
            const SFQuaternion        *getSFQuaternion      (void) const;

                  SFVec3f             *editSFOffsetPosition (void);
            const SFVec3f             *getSFOffsetPosition  (void) const;

                  SFMatrix            *editSFOffsetRotation (void);
            const SFMatrix            *getSFOffsetRotation  (void) const;

                  SFQuaternion        *editSFOffsetQuaternion(void);
            const SFQuaternion        *getSFOffsetQuaternion (void) const;

                  SFUInt64            *editSFCategoryBits   (void);
            const SFUInt64            *getSFCategoryBits    (void) const;

                  SFUInt64            *editSFCollideBits    (void);
            const SFUInt64            *getSFCollideBits     (void) const;
            const SFUnrecPhysicsSpacePtr *getSFSpace          (void) const;
                  SFUnrecPhysicsSpacePtr *editSFSpace          (void);

                  SFBool              *editSFEnable         (void);
            const SFBool              *getSFEnable          (void) const;


                  PhysicsBody * getBody           (void) const;

                  Vec3f               &editPosition       (void);
            const Vec3f               &getPosition        (void) const;

                  Matrix              &editRotation       (void);
            const Matrix              &getRotation        (void) const;

                  Quaternion          &editQuaternion     (void);
            const Quaternion          &getQuaternion      (void) const;

                  Vec3f               &editOffsetPosition (void);
            const Vec3f               &getOffsetPosition  (void) const;

                  Matrix              &editOffsetRotation (void);
            const Matrix              &getOffsetRotation  (void) const;

                  Quaternion          &editOffsetQuaternion(void);
            const Quaternion          &getOffsetQuaternion (void) const;

                  UInt64              &editCategoryBits   (void);
                  UInt64               getCategoryBits    (void) const;

                  UInt64              &editCollideBits    (void);
                  UInt64               getCollideBits     (void) const;

                  PhysicsSpace * getSpace          (void) const;

                  bool                &editEnable         (void);
                  bool                 getEnable          (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setBody           (PhysicsBody * const value);
            void setPosition       (const Vec3f &value);
            void setRotation       (const Matrix &value);
            void setQuaternion     (const Quaternion &value);
            void setOffsetPosition (const Vec3f &value);
            void setOffsetRotation (const Matrix &value);
            void setOffsetQuaternion(const Quaternion &value);
            void setCategoryBits   (const UInt64 value);
            void setCollideBits    (const UInt64 value);
            void setSpace          (PhysicsSpace * const value);
            void setEnable         (const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  PhysicsGeomTransitPtr  create          (void);
    static  PhysicsGeom           *createEmpty     (void);

    static  PhysicsGeomTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  PhysicsGeom            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  PhysicsGeomTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecPhysicsBodyPtr _sfBody;
    SFVec3f           _sfPosition;
    SFMatrix          _sfRotation;
    SFQuaternion      _sfQuaternion;
    SFVec3f           _sfOffsetPosition;
    SFMatrix          _sfOffsetRotation;
    SFQuaternion      _sfOffsetQuaternion;
    SFUInt64          _sfCategoryBits;
    SFUInt64          _sfCollideBits;
    SFUnrecPhysicsSpacePtr _sfSpace;
    SFBool            _sfEnable;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    PhysicsGeomBase(void);
    PhysicsGeomBase(const PhysicsGeomBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~PhysicsGeomBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const PhysicsGeom *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleBody            (void) const;
    EditFieldHandlePtr editHandleBody           (void);
    GetFieldHandlePtr  getHandlePosition        (void) const;
    EditFieldHandlePtr editHandlePosition       (void);
    GetFieldHandlePtr  getHandleRotation        (void) const;
    EditFieldHandlePtr editHandleRotation       (void);
    GetFieldHandlePtr  getHandleQuaternion      (void) const;
    EditFieldHandlePtr editHandleQuaternion     (void);
    GetFieldHandlePtr  getHandleOffsetPosition  (void) const;
    EditFieldHandlePtr editHandleOffsetPosition (void);
    GetFieldHandlePtr  getHandleOffsetRotation  (void) const;
    EditFieldHandlePtr editHandleOffsetRotation (void);
    GetFieldHandlePtr  getHandleOffsetQuaternion (void) const;
    EditFieldHandlePtr editHandleOffsetQuaternion(void);
    GetFieldHandlePtr  getHandleCategoryBits    (void) const;
    EditFieldHandlePtr editHandleCategoryBits   (void);
    GetFieldHandlePtr  getHandleCollideBits     (void) const;
    EditFieldHandlePtr editHandleCollideBits    (void);
    GetFieldHandlePtr  getHandleSpace           (void) const;
    EditFieldHandlePtr editHandleSpace          (void);
    GetFieldHandlePtr  getHandleEnable          (void) const;
    EditFieldHandlePtr editHandleEnable         (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      PhysicsGeomBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const PhysicsGeomBase &source);
};

typedef PhysicsGeomBase *PhysicsGeomBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPHYSICSGEOMBASE_H_ */
