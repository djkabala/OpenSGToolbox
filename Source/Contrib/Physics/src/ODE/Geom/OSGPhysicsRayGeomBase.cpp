/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsRayGeom!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGPhysicsRayGeomBase.h"
#include "OSGPhysicsRayGeom.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsRayGeom
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          PhysicsRayGeomBase::_sfLength
    
*/

/*! \var Pnt3f           PhysicsRayGeomBase::_sfRayPosition
    
*/

/*! \var Vec3f           PhysicsRayGeomBase::_sfDirection
    
*/

/*! \var bool            PhysicsRayGeomBase::_sfClosestHit
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsRayGeom *>::_type("PhysicsRayGeomPtr", "PhysicsGeomPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsRayGeom *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsRayGeom *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsRayGeom *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsRayGeomBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "length",
        "",
        LengthFieldId, LengthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsRayGeom::editHandleLength),
        static_cast<FieldGetMethodSig >(&PhysicsRayGeom::getHandleLength));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "rayPosition",
        "",
        RayPositionFieldId, RayPositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsRayGeom::editHandleRayPosition),
        static_cast<FieldGetMethodSig >(&PhysicsRayGeom::getHandleRayPosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "direction",
        "",
        DirectionFieldId, DirectionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsRayGeom::editHandleDirection),
        static_cast<FieldGetMethodSig >(&PhysicsRayGeom::getHandleDirection));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "closestHit",
        "",
        ClosestHitFieldId, ClosestHitFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsRayGeom::editHandleClosestHit),
        static_cast<FieldGetMethodSig >(&PhysicsRayGeom::getHandleClosestHit));

    oType.addInitialDesc(pDesc);
}


PhysicsRayGeomBase::TypeObject PhysicsRayGeomBase::_type(
    PhysicsRayGeomBase::getClassname(),
    Inherited::getClassname(),
    "PhysicsGeom",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsRayGeomBase::createEmptyLocal),
    PhysicsRayGeom::initMethod,
    PhysicsRayGeom::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsRayGeom::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsRayGeom\"\n"
    "\tparent=\"PhysicsGeom\"\n"
    "    library=\"ContribPhysics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    group=\"PhysicsGeom\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com),  Behboud Kalantary         \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"length\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"rayPosition\"\n"
    "\t\ttype=\"Pnt3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"direction\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,1.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"closestHit\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsRayGeomBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsRayGeomBase::getType(void) const
{
    return _type;
}

UInt32 PhysicsRayGeomBase::getContainerSize(void) const
{
    return sizeof(PhysicsRayGeom);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *PhysicsRayGeomBase::editSFLength(void)
{
    editSField(LengthFieldMask);

    return &_sfLength;
}

const SFReal32 *PhysicsRayGeomBase::getSFLength(void) const
{
    return &_sfLength;
}


SFPnt3f *PhysicsRayGeomBase::editSFRayPosition(void)
{
    editSField(RayPositionFieldMask);

    return &_sfRayPosition;
}

const SFPnt3f *PhysicsRayGeomBase::getSFRayPosition(void) const
{
    return &_sfRayPosition;
}


SFVec3f *PhysicsRayGeomBase::editSFDirection(void)
{
    editSField(DirectionFieldMask);

    return &_sfDirection;
}

const SFVec3f *PhysicsRayGeomBase::getSFDirection(void) const
{
    return &_sfDirection;
}


SFBool *PhysicsRayGeomBase::editSFClosestHit(void)
{
    editSField(ClosestHitFieldMask);

    return &_sfClosestHit;
}

const SFBool *PhysicsRayGeomBase::getSFClosestHit(void) const
{
    return &_sfClosestHit;
}






/*------------------------------ access -----------------------------------*/

UInt32 PhysicsRayGeomBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        returnValue += _sfLength.getBinSize();
    }
    if(FieldBits::NoField != (RayPositionFieldMask & whichField))
    {
        returnValue += _sfRayPosition.getBinSize();
    }
    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        returnValue += _sfDirection.getBinSize();
    }
    if(FieldBits::NoField != (ClosestHitFieldMask & whichField))
    {
        returnValue += _sfClosestHit.getBinSize();
    }

    return returnValue;
}

void PhysicsRayGeomBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        _sfLength.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RayPositionFieldMask & whichField))
    {
        _sfRayPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        _sfDirection.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClosestHitFieldMask & whichField))
    {
        _sfClosestHit.copyToBin(pMem);
    }
}

void PhysicsRayGeomBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        _sfLength.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RayPositionFieldMask & whichField))
    {
        _sfRayPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        _sfDirection.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClosestHitFieldMask & whichField))
    {
        _sfClosestHit.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsRayGeomTransitPtr PhysicsRayGeomBase::createLocal(BitVector bFlags)
{
    PhysicsRayGeomTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsRayGeom>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsRayGeomTransitPtr PhysicsRayGeomBase::createDependent(BitVector bFlags)
{
    PhysicsRayGeomTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsRayGeom>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsRayGeomTransitPtr PhysicsRayGeomBase::create(void)
{
    PhysicsRayGeomTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsRayGeom>(tmpPtr);
    }

    return fc;
}

PhysicsRayGeom *PhysicsRayGeomBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsRayGeom *returnValue;

    newPtr<PhysicsRayGeom>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsRayGeom *PhysicsRayGeomBase::createEmpty(void)
{
    PhysicsRayGeom *returnValue;

    newPtr<PhysicsRayGeom>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr PhysicsRayGeomBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsRayGeom *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsRayGeom *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsRayGeomBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsRayGeom *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsRayGeom *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsRayGeomBase::shallowCopy(void) const
{
    PhysicsRayGeom *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsRayGeom *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

PhysicsRayGeomBase::PhysicsRayGeomBase(void) :
    Inherited(),
    _sfLength                 (),
    _sfRayPosition            (Pnt3f(0.0f,0.0f,0.0f)),
    _sfDirection              (Vec3f(0.0f,0.0f,1.0f)),
    _sfClosestHit             (bool(true))
{
}

PhysicsRayGeomBase::PhysicsRayGeomBase(const PhysicsRayGeomBase &source) :
    Inherited(source),
    _sfLength                 (source._sfLength                 ),
    _sfRayPosition            (source._sfRayPosition            ),
    _sfDirection              (source._sfDirection              ),
    _sfClosestHit             (source._sfClosestHit             )
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsRayGeomBase::~PhysicsRayGeomBase(void)
{
}


GetFieldHandlePtr PhysicsRayGeomBase::getHandleLength          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLength,
             this->getType().getFieldDesc(LengthFieldId),
             const_cast<PhysicsRayGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsRayGeomBase::editHandleLength         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLength,
             this->getType().getFieldDesc(LengthFieldId),
             this));


    editSField(LengthFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsRayGeomBase::getHandleRayPosition     (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfRayPosition,
             this->getType().getFieldDesc(RayPositionFieldId),
             const_cast<PhysicsRayGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsRayGeomBase::editHandleRayPosition    (void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfRayPosition,
             this->getType().getFieldDesc(RayPositionFieldId),
             this));


    editSField(RayPositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsRayGeomBase::getHandleDirection       (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfDirection,
             this->getType().getFieldDesc(DirectionFieldId),
             const_cast<PhysicsRayGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsRayGeomBase::editHandleDirection      (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfDirection,
             this->getType().getFieldDesc(DirectionFieldId),
             this));


    editSField(DirectionFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsRayGeomBase::getHandleClosestHit      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfClosestHit,
             this->getType().getFieldDesc(ClosestHitFieldId),
             const_cast<PhysicsRayGeomBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsRayGeomBase::editHandleClosestHit     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfClosestHit,
             this->getType().getFieldDesc(ClosestHitFieldId),
             this));


    editSField(ClosestHitFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void PhysicsRayGeomBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsRayGeom *pThis = static_cast<PhysicsRayGeom *>(this);

    pThis->execSync(static_cast<PhysicsRayGeom *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsRayGeomBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsRayGeom *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsRayGeom *>(pRefAspect),
                  dynamic_cast<const PhysicsRayGeom *>(this));

    return returnValue;
}
#endif

void PhysicsRayGeomBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
