/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsAMotorJoint!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "ode/ode.h"                      // Mode default header


#include "OSGPhysicsAMotorJointBase.h"
#include "OSGPhysicsAMotorJoint.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsAMotorJoint
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Int8            PhysicsAMotorJointBase::_sfMode
    
*/

/*! \var UInt8           PhysicsAMotorJointBase::_sfNumAxes
    
*/

/*! \var Vec3f           PhysicsAMotorJointBase::_sfAxis1
    
*/

/*! \var Vec3f           PhysicsAMotorJointBase::_sfAxis2
    
*/

/*! \var Vec3f           PhysicsAMotorJointBase::_sfAxis3
    
*/

/*! \var UInt8           PhysicsAMotorJointBase::_sfAxis1ReferenceFrame
    
*/

/*! \var UInt8           PhysicsAMotorJointBase::_sfAxis2ReferenceFrame
    
*/

/*! \var UInt8           PhysicsAMotorJointBase::_sfAxis3ReferenceFrame
    
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfVel
    Desired motor angular velocity. 
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfFMax
    The maximum torque that the motor will use to achieve the desired velocity. This must always be greater than or equal to zero. Setting this to zero (the default value) turns off the motor.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfFudgeFactor
    The current joint stop/motor implementation has a small problem: when the joint is at one stop and the motor is set to move it away from the stop, too much force may be applied for one time step, causing a jumping motion. This fudge factor is used to scale this excess force. It should have a value between zero and one (the default value). If the jumping motion is too visible in a joint, the value can be reduced. Making this value too small can prevent the motor from being able to move the joint away from a stop.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfVel2
    Desired motor linear velocity. 
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfFMax2
    The maximum force that the motor will use to achieve the desired velocity. This must always be greater than or equal to zero. Setting this to zero (the default value) turns off the motor.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfFudgeFactor2
    The current joint stop/motor implementation has a small problem: when the joint is at one stop and the motor is set to move it away from the stop, too much force may be applied for one time step, causing a jumping motion. This fudge factor is used to scale this excess force. It should have a value between zero and one (the default value). If the jumping motion is too visible in a joint, the value can be reduced. Making this value too small can prevent the motor from being able to move the joint away from a stop.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfVel3
    Desired motor linear velocity. 
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfFMax3
    The maximum force that the motor will use to achieve the desired velocity. This must always be greater than or equal to zero. Setting this to zero (the default value) turns off the motor.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfFudgeFactor3
    The current joint stop/motor implementation has a small problem: when the joint is at one stop and the motor is set to move it away from the stop, too much force may be applied for one time step, causing a jumping motion. This fudge factor is used to scale this excess force. It should have a value between zero and one (the default value). If the jumping motion is too visible in a joint, the value can be reduced. Making this value too small can prevent the motor from being able to move the joint away from a stop.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfHiStop
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfLoStop
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. 
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfBounce
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfCFM
    The constraint force mixing (CFM) value used when not at a stop.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfStopERP
    The error reduction parameter (ERP) used by the stops.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfStopCFM
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. 
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfHiStop2
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfLoStop2
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. 
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfBounce2
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfCFM2
    The constraint force mixing (CFM) value used when not at a stop.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfStopERP2
    The error reduction parameter (ERP) used by the stops.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfStopCFM2
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. 
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfHiStop3
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfLoStop3
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. 
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfBounce3
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfCFM3
    The constraint force mixing (CFM) value used when not at a stop.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfStopERP3
    The error reduction parameter (ERP) used by the stops.
*/

/*! \var Real32          PhysicsAMotorJointBase::_sfStopCFM3
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. 
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsAMotorJoint *>::_type("PhysicsAMotorJointPtr", "PhysicsJointPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsAMotorJoint *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsAMotorJoint *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsAMotorJoint *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsAMotorJointBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt8::Description(
        SFInt8::getClassType(),
        "mode",
        "",
        ModeFieldId, ModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleMode),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "numAxes",
        "",
        NumAxesFieldId, NumAxesFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleNumAxes),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleNumAxes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "axis1",
        "",
        Axis1FieldId, Axis1FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleAxis1),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleAxis1));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "axis2",
        "",
        Axis2FieldId, Axis2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleAxis2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleAxis2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "axis3",
        "",
        Axis3FieldId, Axis3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleAxis3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleAxis3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "axis1ReferenceFrame",
        "",
        Axis1ReferenceFrameFieldId, Axis1ReferenceFrameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleAxis1ReferenceFrame),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleAxis1ReferenceFrame));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "axis2ReferenceFrame",
        "",
        Axis2ReferenceFrameFieldId, Axis2ReferenceFrameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleAxis2ReferenceFrame),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleAxis2ReferenceFrame));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "axis3ReferenceFrame",
        "",
        Axis3ReferenceFrameFieldId, Axis3ReferenceFrameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleAxis3ReferenceFrame),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleAxis3ReferenceFrame));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "vel",
        "Desired motor angular velocity. \n",
        VelFieldId, VelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleVel),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleVel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "fMax",
        "The maximum torque that the motor will use to achieve the desired velocity. This must always be greater than or equal to zero. Setting this to zero (the default value) turns off the motor.\n",
        FMaxFieldId, FMaxFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleFMax),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleFMax));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "fudgeFactor",
        "The current joint stop/motor implementation has a small problem: when the joint is at one stop and the motor is set to move it away from the stop, too much force may be applied for one time step, causing a jumping motion. This fudge factor is used to scale this excess force. It should have a value between zero and one (the default value). If the jumping motion is too visible in a joint, the value can be reduced. Making this value too small can prevent the motor from being able to move the joint away from a stop.\n",
        FudgeFactorFieldId, FudgeFactorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleFudgeFactor),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleFudgeFactor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "vel2",
        "Desired motor linear velocity. \n",
        Vel2FieldId, Vel2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleVel2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleVel2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "fMax2",
        "The maximum force that the motor will use to achieve the desired velocity. This must always be greater than or equal to zero. Setting this to zero (the default value) turns off the motor.\n",
        FMax2FieldId, FMax2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleFMax2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleFMax2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "fudgeFactor2",
        "The current joint stop/motor implementation has a small problem: when the joint is at one stop and the motor is set to move it away from the stop, too much force may be applied for one time step, causing a jumping motion. This fudge factor is used to scale this excess force. It should have a value between zero and one (the default value). If the jumping motion is too visible in a joint, the value can be reduced. Making this value too small can prevent the motor from being able to move the joint away from a stop.\n",
        FudgeFactor2FieldId, FudgeFactor2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleFudgeFactor2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleFudgeFactor2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "vel3",
        "Desired motor linear velocity. \n",
        Vel3FieldId, Vel3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleVel3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleVel3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "fMax3",
        "The maximum force that the motor will use to achieve the desired velocity. This must always be greater than or equal to zero. Setting this to zero (the default value) turns off the motor.\n",
        FMax3FieldId, FMax3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleFMax3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleFMax3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "fudgeFactor3",
        "The current joint stop/motor implementation has a small problem: when the joint is at one stop and the motor is set to move it away from the stop, too much force may be applied for one time step, causing a jumping motion. This fudge factor is used to scale this excess force. It should have a value between zero and one (the default value). If the jumping motion is too visible in a joint, the value can be reduced. Making this value too small can prevent the motor from being able to move the joint away from a stop.\n",
        FudgeFactor3FieldId, FudgeFactor3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleFudgeFactor3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleFudgeFactor3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "hiStop",
        "High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n",
        HiStopFieldId, HiStopFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleHiStop),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleHiStop));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "loStop",
        "Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n",
        LoStopFieldId, LoStopFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleLoStop),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleLoStop));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "bounce",
        "The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n",
        BounceFieldId, BounceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleBounce),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleBounce));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "CFM",
        "The constraint force mixing (CFM) value used when not at a stop.\n",
        CFMFieldId, CFMFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleCFM),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleCFM));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopERP",
        "The error reduction parameter (ERP) used by the stops.\n",
        StopERPFieldId, StopERPFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleStopERP),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleStopERP));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopCFM",
        "The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n",
        StopCFMFieldId, StopCFMFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleStopCFM),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleStopCFM));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "hiStop2",
        "High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n",
        HiStop2FieldId, HiStop2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleHiStop2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleHiStop2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "loStop2",
        "Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n",
        LoStop2FieldId, LoStop2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleLoStop2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleLoStop2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "bounce2",
        "The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n",
        Bounce2FieldId, Bounce2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleBounce2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleBounce2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "CFM2",
        "The constraint force mixing (CFM) value used when not at a stop.\n",
        CFM2FieldId, CFM2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleCFM2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleCFM2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopERP2",
        "The error reduction parameter (ERP) used by the stops.\n",
        StopERP2FieldId, StopERP2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleStopERP2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleStopERP2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopCFM2",
        "The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n",
        StopCFM2FieldId, StopCFM2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleStopCFM2),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleStopCFM2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "hiStop3",
        "High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n",
        HiStop3FieldId, HiStop3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleHiStop3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleHiStop3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "loStop3",
        "Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n",
        LoStop3FieldId, LoStop3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleLoStop3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleLoStop3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "bounce3",
        "The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n",
        Bounce3FieldId, Bounce3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleBounce3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleBounce3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "CFM3",
        "The constraint force mixing (CFM) value used when not at a stop.\n",
        CFM3FieldId, CFM3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleCFM3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleCFM3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopERP3",
        "The error reduction parameter (ERP) used by the stops.\n",
        StopERP3FieldId, StopERP3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleStopERP3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleStopERP3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopCFM3",
        "The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n",
        StopCFM3FieldId, StopCFM3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsAMotorJoint::editHandleStopCFM3),
        static_cast<FieldGetMethodSig >(&PhysicsAMotorJoint::getHandleStopCFM3));

    oType.addInitialDesc(pDesc);
}


PhysicsAMotorJointBase::TypeObject PhysicsAMotorJointBase::_type(
    PhysicsAMotorJointBase::getClassname(),
    Inherited::getClassname(),
    "PhysicsAMotorJoint",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsAMotorJointBase::createEmptyLocal),
    PhysicsAMotorJoint::initMethod,
    PhysicsAMotorJoint::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsAMotorJoint::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsAMotorJoint\"\n"
    "\tparent=\"PhysicsJoint\"\n"
    "    library=\"ContribPhysics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    group=\"PhysicsAMotorJoint\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com),  Behboud Kalantary         \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"mode\"\n"
    "\t\ttype=\"Int8\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\" dAMotorUser\"\n"
    "\t\tdefaultHeader=\"ode/ode.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"numAxes\"\n"
    "\t\ttype=\"UInt8\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"3\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axis1\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"1.0, 0.0, 0.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axis2\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"0.0, 1.0, 0.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axis3\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"0.0, 0.0, 1.0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axis1ReferenceFrame\"\n"
    "\t\ttype=\"UInt8\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axis2ReferenceFrame\"\n"
    "\t\ttype=\"UInt8\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axis3ReferenceFrame\"\n"
    "\t\ttype=\"UInt8\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"vel\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDesired motor angular velocity. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"fMax\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe maximum torque that the motor will use to achieve the desired velocity. This must always be greater than or equal to zero. Setting this to zero (the default value) turns off the motor.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"fudgeFactor\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe current joint stop/motor implementation has a small problem: when the joint is at one stop and the motor is set to move it away from the stop, too much force may be applied for one time step, causing a jumping motion. This fudge factor is used to scale this excess force. It should have a value between zero and one (the default value). If the jumping motion is too visible in a joint, the value can be reduced. Making this value too small can prevent the motor from being able to move the joint away from a stop.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"vel2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDesired motor linear velocity. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"fMax2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe maximum force that the motor will use to achieve the desired velocity. This must always be greater than or equal to zero. Setting this to zero (the default value) turns off the motor.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"fudgeFactor2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe current joint stop/motor implementation has a small problem: when the joint is at one stop and the motor is set to move it away from the stop, too much force may be applied for one time step, causing a jumping motion. This fudge factor is used to scale this excess force. It should have a value between zero and one (the default value). If the jumping motion is too visible in a joint, the value can be reduced. Making this value too small can prevent the motor from being able to move the joint away from a stop.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"vel3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDesired motor linear velocity. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"fMax3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe maximum force that the motor will use to achieve the desired velocity. This must always be greater than or equal to zero. Setting this to zero (the default value) turns off the motor.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"fudgeFactor3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe current joint stop/motor implementation has a small problem: when the joint is at one stop and the motor is set to move it away from the stop, too much force may be applied for one time step, causing a jumping motion. This fudge factor is used to scale this excess force. It should have a value between zero and one (the default value). If the jumping motion is too visible in a joint, the value can be reduced. Making this value too small can prevent the motor from being able to move the joint away from a stop.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"hiStop\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tHigh stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"loStop\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tLow stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bounce\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CFM\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used when not at a stop.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopERP\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe error reduction parameter (ERP) used by the stops.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopCFM\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"hiStop2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tHigh stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"loStop2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tLow stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bounce2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CFM2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used when not at a stop.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopERP2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe error reduction parameter (ERP) used by the stops.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopCFM2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"hiStop3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tHigh stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"loStop3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tLow stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bounce3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CFM3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used when not at a stop.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopERP3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe error reduction parameter (ERP) used by the stops.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopCFM3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsAMotorJointBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsAMotorJointBase::getType(void) const
{
    return _type;
}

UInt32 PhysicsAMotorJointBase::getContainerSize(void) const
{
    return sizeof(PhysicsAMotorJoint);
}

/*------------------------- decorator get ------------------------------*/


SFInt8 *PhysicsAMotorJointBase::editSFMode(void)
{
    editSField(ModeFieldMask);

    return &_sfMode;
}

const SFInt8 *PhysicsAMotorJointBase::getSFMode(void) const
{
    return &_sfMode;
}


SFUInt8 *PhysicsAMotorJointBase::editSFNumAxes(void)
{
    editSField(NumAxesFieldMask);

    return &_sfNumAxes;
}

const SFUInt8 *PhysicsAMotorJointBase::getSFNumAxes(void) const
{
    return &_sfNumAxes;
}


SFVec3f *PhysicsAMotorJointBase::editSFAxis1(void)
{
    editSField(Axis1FieldMask);

    return &_sfAxis1;
}

const SFVec3f *PhysicsAMotorJointBase::getSFAxis1(void) const
{
    return &_sfAxis1;
}


SFVec3f *PhysicsAMotorJointBase::editSFAxis2(void)
{
    editSField(Axis2FieldMask);

    return &_sfAxis2;
}

const SFVec3f *PhysicsAMotorJointBase::getSFAxis2(void) const
{
    return &_sfAxis2;
}


SFVec3f *PhysicsAMotorJointBase::editSFAxis3(void)
{
    editSField(Axis3FieldMask);

    return &_sfAxis3;
}

const SFVec3f *PhysicsAMotorJointBase::getSFAxis3(void) const
{
    return &_sfAxis3;
}


SFUInt8 *PhysicsAMotorJointBase::editSFAxis1ReferenceFrame(void)
{
    editSField(Axis1ReferenceFrameFieldMask);

    return &_sfAxis1ReferenceFrame;
}

const SFUInt8 *PhysicsAMotorJointBase::getSFAxis1ReferenceFrame(void) const
{
    return &_sfAxis1ReferenceFrame;
}


SFUInt8 *PhysicsAMotorJointBase::editSFAxis2ReferenceFrame(void)
{
    editSField(Axis2ReferenceFrameFieldMask);

    return &_sfAxis2ReferenceFrame;
}

const SFUInt8 *PhysicsAMotorJointBase::getSFAxis2ReferenceFrame(void) const
{
    return &_sfAxis2ReferenceFrame;
}


SFUInt8 *PhysicsAMotorJointBase::editSFAxis3ReferenceFrame(void)
{
    editSField(Axis3ReferenceFrameFieldMask);

    return &_sfAxis3ReferenceFrame;
}

const SFUInt8 *PhysicsAMotorJointBase::getSFAxis3ReferenceFrame(void) const
{
    return &_sfAxis3ReferenceFrame;
}


SFReal32 *PhysicsAMotorJointBase::editSFVel(void)
{
    editSField(VelFieldMask);

    return &_sfVel;
}

const SFReal32 *PhysicsAMotorJointBase::getSFVel(void) const
{
    return &_sfVel;
}


SFReal32 *PhysicsAMotorJointBase::editSFFMax(void)
{
    editSField(FMaxFieldMask);

    return &_sfFMax;
}

const SFReal32 *PhysicsAMotorJointBase::getSFFMax(void) const
{
    return &_sfFMax;
}


SFReal32 *PhysicsAMotorJointBase::editSFFudgeFactor(void)
{
    editSField(FudgeFactorFieldMask);

    return &_sfFudgeFactor;
}

const SFReal32 *PhysicsAMotorJointBase::getSFFudgeFactor(void) const
{
    return &_sfFudgeFactor;
}


SFReal32 *PhysicsAMotorJointBase::editSFVel2(void)
{
    editSField(Vel2FieldMask);

    return &_sfVel2;
}

const SFReal32 *PhysicsAMotorJointBase::getSFVel2(void) const
{
    return &_sfVel2;
}


SFReal32 *PhysicsAMotorJointBase::editSFFMax2(void)
{
    editSField(FMax2FieldMask);

    return &_sfFMax2;
}

const SFReal32 *PhysicsAMotorJointBase::getSFFMax2(void) const
{
    return &_sfFMax2;
}


SFReal32 *PhysicsAMotorJointBase::editSFFudgeFactor2(void)
{
    editSField(FudgeFactor2FieldMask);

    return &_sfFudgeFactor2;
}

const SFReal32 *PhysicsAMotorJointBase::getSFFudgeFactor2(void) const
{
    return &_sfFudgeFactor2;
}


SFReal32 *PhysicsAMotorJointBase::editSFVel3(void)
{
    editSField(Vel3FieldMask);

    return &_sfVel3;
}

const SFReal32 *PhysicsAMotorJointBase::getSFVel3(void) const
{
    return &_sfVel3;
}


SFReal32 *PhysicsAMotorJointBase::editSFFMax3(void)
{
    editSField(FMax3FieldMask);

    return &_sfFMax3;
}

const SFReal32 *PhysicsAMotorJointBase::getSFFMax3(void) const
{
    return &_sfFMax3;
}


SFReal32 *PhysicsAMotorJointBase::editSFFudgeFactor3(void)
{
    editSField(FudgeFactor3FieldMask);

    return &_sfFudgeFactor3;
}

const SFReal32 *PhysicsAMotorJointBase::getSFFudgeFactor3(void) const
{
    return &_sfFudgeFactor3;
}


SFReal32 *PhysicsAMotorJointBase::editSFHiStop(void)
{
    editSField(HiStopFieldMask);

    return &_sfHiStop;
}

const SFReal32 *PhysicsAMotorJointBase::getSFHiStop(void) const
{
    return &_sfHiStop;
}


SFReal32 *PhysicsAMotorJointBase::editSFLoStop(void)
{
    editSField(LoStopFieldMask);

    return &_sfLoStop;
}

const SFReal32 *PhysicsAMotorJointBase::getSFLoStop(void) const
{
    return &_sfLoStop;
}


SFReal32 *PhysicsAMotorJointBase::editSFBounce(void)
{
    editSField(BounceFieldMask);

    return &_sfBounce;
}

const SFReal32 *PhysicsAMotorJointBase::getSFBounce(void) const
{
    return &_sfBounce;
}


SFReal32 *PhysicsAMotorJointBase::editSFCFM(void)
{
    editSField(CFMFieldMask);

    return &_sfCFM;
}

const SFReal32 *PhysicsAMotorJointBase::getSFCFM(void) const
{
    return &_sfCFM;
}


SFReal32 *PhysicsAMotorJointBase::editSFStopERP(void)
{
    editSField(StopERPFieldMask);

    return &_sfStopERP;
}

const SFReal32 *PhysicsAMotorJointBase::getSFStopERP(void) const
{
    return &_sfStopERP;
}


SFReal32 *PhysicsAMotorJointBase::editSFStopCFM(void)
{
    editSField(StopCFMFieldMask);

    return &_sfStopCFM;
}

const SFReal32 *PhysicsAMotorJointBase::getSFStopCFM(void) const
{
    return &_sfStopCFM;
}


SFReal32 *PhysicsAMotorJointBase::editSFHiStop2(void)
{
    editSField(HiStop2FieldMask);

    return &_sfHiStop2;
}

const SFReal32 *PhysicsAMotorJointBase::getSFHiStop2(void) const
{
    return &_sfHiStop2;
}


SFReal32 *PhysicsAMotorJointBase::editSFLoStop2(void)
{
    editSField(LoStop2FieldMask);

    return &_sfLoStop2;
}

const SFReal32 *PhysicsAMotorJointBase::getSFLoStop2(void) const
{
    return &_sfLoStop2;
}


SFReal32 *PhysicsAMotorJointBase::editSFBounce2(void)
{
    editSField(Bounce2FieldMask);

    return &_sfBounce2;
}

const SFReal32 *PhysicsAMotorJointBase::getSFBounce2(void) const
{
    return &_sfBounce2;
}


SFReal32 *PhysicsAMotorJointBase::editSFCFM2(void)
{
    editSField(CFM2FieldMask);

    return &_sfCFM2;
}

const SFReal32 *PhysicsAMotorJointBase::getSFCFM2(void) const
{
    return &_sfCFM2;
}


SFReal32 *PhysicsAMotorJointBase::editSFStopERP2(void)
{
    editSField(StopERP2FieldMask);

    return &_sfStopERP2;
}

const SFReal32 *PhysicsAMotorJointBase::getSFStopERP2(void) const
{
    return &_sfStopERP2;
}


SFReal32 *PhysicsAMotorJointBase::editSFStopCFM2(void)
{
    editSField(StopCFM2FieldMask);

    return &_sfStopCFM2;
}

const SFReal32 *PhysicsAMotorJointBase::getSFStopCFM2(void) const
{
    return &_sfStopCFM2;
}


SFReal32 *PhysicsAMotorJointBase::editSFHiStop3(void)
{
    editSField(HiStop3FieldMask);

    return &_sfHiStop3;
}

const SFReal32 *PhysicsAMotorJointBase::getSFHiStop3(void) const
{
    return &_sfHiStop3;
}


SFReal32 *PhysicsAMotorJointBase::editSFLoStop3(void)
{
    editSField(LoStop3FieldMask);

    return &_sfLoStop3;
}

const SFReal32 *PhysicsAMotorJointBase::getSFLoStop3(void) const
{
    return &_sfLoStop3;
}


SFReal32 *PhysicsAMotorJointBase::editSFBounce3(void)
{
    editSField(Bounce3FieldMask);

    return &_sfBounce3;
}

const SFReal32 *PhysicsAMotorJointBase::getSFBounce3(void) const
{
    return &_sfBounce3;
}


SFReal32 *PhysicsAMotorJointBase::editSFCFM3(void)
{
    editSField(CFM3FieldMask);

    return &_sfCFM3;
}

const SFReal32 *PhysicsAMotorJointBase::getSFCFM3(void) const
{
    return &_sfCFM3;
}


SFReal32 *PhysicsAMotorJointBase::editSFStopERP3(void)
{
    editSField(StopERP3FieldMask);

    return &_sfStopERP3;
}

const SFReal32 *PhysicsAMotorJointBase::getSFStopERP3(void) const
{
    return &_sfStopERP3;
}


SFReal32 *PhysicsAMotorJointBase::editSFStopCFM3(void)
{
    editSField(StopCFM3FieldMask);

    return &_sfStopCFM3;
}

const SFReal32 *PhysicsAMotorJointBase::getSFStopCFM3(void) const
{
    return &_sfStopCFM3;
}






/*------------------------------ access -----------------------------------*/

UInt32 PhysicsAMotorJointBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        returnValue += _sfMode.getBinSize();
    }
    if(FieldBits::NoField != (NumAxesFieldMask & whichField))
    {
        returnValue += _sfNumAxes.getBinSize();
    }
    if(FieldBits::NoField != (Axis1FieldMask & whichField))
    {
        returnValue += _sfAxis1.getBinSize();
    }
    if(FieldBits::NoField != (Axis2FieldMask & whichField))
    {
        returnValue += _sfAxis2.getBinSize();
    }
    if(FieldBits::NoField != (Axis3FieldMask & whichField))
    {
        returnValue += _sfAxis3.getBinSize();
    }
    if(FieldBits::NoField != (Axis1ReferenceFrameFieldMask & whichField))
    {
        returnValue += _sfAxis1ReferenceFrame.getBinSize();
    }
    if(FieldBits::NoField != (Axis2ReferenceFrameFieldMask & whichField))
    {
        returnValue += _sfAxis2ReferenceFrame.getBinSize();
    }
    if(FieldBits::NoField != (Axis3ReferenceFrameFieldMask & whichField))
    {
        returnValue += _sfAxis3ReferenceFrame.getBinSize();
    }
    if(FieldBits::NoField != (VelFieldMask & whichField))
    {
        returnValue += _sfVel.getBinSize();
    }
    if(FieldBits::NoField != (FMaxFieldMask & whichField))
    {
        returnValue += _sfFMax.getBinSize();
    }
    if(FieldBits::NoField != (FudgeFactorFieldMask & whichField))
    {
        returnValue += _sfFudgeFactor.getBinSize();
    }
    if(FieldBits::NoField != (Vel2FieldMask & whichField))
    {
        returnValue += _sfVel2.getBinSize();
    }
    if(FieldBits::NoField != (FMax2FieldMask & whichField))
    {
        returnValue += _sfFMax2.getBinSize();
    }
    if(FieldBits::NoField != (FudgeFactor2FieldMask & whichField))
    {
        returnValue += _sfFudgeFactor2.getBinSize();
    }
    if(FieldBits::NoField != (Vel3FieldMask & whichField))
    {
        returnValue += _sfVel3.getBinSize();
    }
    if(FieldBits::NoField != (FMax3FieldMask & whichField))
    {
        returnValue += _sfFMax3.getBinSize();
    }
    if(FieldBits::NoField != (FudgeFactor3FieldMask & whichField))
    {
        returnValue += _sfFudgeFactor3.getBinSize();
    }
    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        returnValue += _sfHiStop.getBinSize();
    }
    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        returnValue += _sfLoStop.getBinSize();
    }
    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        returnValue += _sfBounce.getBinSize();
    }
    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        returnValue += _sfCFM.getBinSize();
    }
    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        returnValue += _sfStopERP.getBinSize();
    }
    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        returnValue += _sfStopCFM.getBinSize();
    }
    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        returnValue += _sfHiStop2.getBinSize();
    }
    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        returnValue += _sfLoStop2.getBinSize();
    }
    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        returnValue += _sfBounce2.getBinSize();
    }
    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        returnValue += _sfCFM2.getBinSize();
    }
    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        returnValue += _sfStopERP2.getBinSize();
    }
    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        returnValue += _sfStopCFM2.getBinSize();
    }
    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
    {
        returnValue += _sfHiStop3.getBinSize();
    }
    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
    {
        returnValue += _sfLoStop3.getBinSize();
    }
    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
    {
        returnValue += _sfBounce3.getBinSize();
    }
    if(FieldBits::NoField != (CFM3FieldMask & whichField))
    {
        returnValue += _sfCFM3.getBinSize();
    }
    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
    {
        returnValue += _sfStopERP3.getBinSize();
    }
    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
    {
        returnValue += _sfStopCFM3.getBinSize();
    }

    return returnValue;
}

void PhysicsAMotorJointBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        _sfMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NumAxesFieldMask & whichField))
    {
        _sfNumAxes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Axis1FieldMask & whichField))
    {
        _sfAxis1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Axis2FieldMask & whichField))
    {
        _sfAxis2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Axis3FieldMask & whichField))
    {
        _sfAxis3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Axis1ReferenceFrameFieldMask & whichField))
    {
        _sfAxis1ReferenceFrame.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Axis2ReferenceFrameFieldMask & whichField))
    {
        _sfAxis2ReferenceFrame.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Axis3ReferenceFrameFieldMask & whichField))
    {
        _sfAxis3ReferenceFrame.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VelFieldMask & whichField))
    {
        _sfVel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FMaxFieldMask & whichField))
    {
        _sfFMax.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FudgeFactorFieldMask & whichField))
    {
        _sfFudgeFactor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Vel2FieldMask & whichField))
    {
        _sfVel2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FMax2FieldMask & whichField))
    {
        _sfFMax2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FudgeFactor2FieldMask & whichField))
    {
        _sfFudgeFactor2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Vel3FieldMask & whichField))
    {
        _sfVel3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FMax3FieldMask & whichField))
    {
        _sfFMax3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FudgeFactor3FieldMask & whichField))
    {
        _sfFudgeFactor3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        _sfHiStop2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        _sfLoStop2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        _sfBounce2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        _sfCFM2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        _sfStopERP2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        _sfStopCFM2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
    {
        _sfHiStop3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
    {
        _sfLoStop3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
    {
        _sfBounce3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CFM3FieldMask & whichField))
    {
        _sfCFM3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
    {
        _sfStopERP3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
    {
        _sfStopCFM3.copyToBin(pMem);
    }
}

void PhysicsAMotorJointBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        _sfMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NumAxesFieldMask & whichField))
    {
        _sfNumAxes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Axis1FieldMask & whichField))
    {
        _sfAxis1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Axis2FieldMask & whichField))
    {
        _sfAxis2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Axis3FieldMask & whichField))
    {
        _sfAxis3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Axis1ReferenceFrameFieldMask & whichField))
    {
        _sfAxis1ReferenceFrame.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Axis2ReferenceFrameFieldMask & whichField))
    {
        _sfAxis2ReferenceFrame.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Axis3ReferenceFrameFieldMask & whichField))
    {
        _sfAxis3ReferenceFrame.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VelFieldMask & whichField))
    {
        _sfVel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FMaxFieldMask & whichField))
    {
        _sfFMax.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FudgeFactorFieldMask & whichField))
    {
        _sfFudgeFactor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Vel2FieldMask & whichField))
    {
        _sfVel2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FMax2FieldMask & whichField))
    {
        _sfFMax2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FudgeFactor2FieldMask & whichField))
    {
        _sfFudgeFactor2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Vel3FieldMask & whichField))
    {
        _sfVel3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FMax3FieldMask & whichField))
    {
        _sfFMax3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FudgeFactor3FieldMask & whichField))
    {
        _sfFudgeFactor3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        _sfHiStop2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        _sfLoStop2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        _sfBounce2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        _sfCFM2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        _sfStopERP2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        _sfStopCFM2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
    {
        _sfHiStop3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
    {
        _sfLoStop3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
    {
        _sfBounce3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CFM3FieldMask & whichField))
    {
        _sfCFM3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
    {
        _sfStopERP3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
    {
        _sfStopCFM3.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsAMotorJointTransitPtr PhysicsAMotorJointBase::createLocal(BitVector bFlags)
{
    PhysicsAMotorJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsAMotorJoint>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsAMotorJointTransitPtr PhysicsAMotorJointBase::createDependent(BitVector bFlags)
{
    PhysicsAMotorJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsAMotorJoint>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsAMotorJointTransitPtr PhysicsAMotorJointBase::create(void)
{
    PhysicsAMotorJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsAMotorJoint>(tmpPtr);
    }

    return fc;
}

PhysicsAMotorJoint *PhysicsAMotorJointBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsAMotorJoint *returnValue;

    newPtr<PhysicsAMotorJoint>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsAMotorJoint *PhysicsAMotorJointBase::createEmpty(void)
{
    PhysicsAMotorJoint *returnValue;

    newPtr<PhysicsAMotorJoint>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr PhysicsAMotorJointBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsAMotorJoint *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsAMotorJoint *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsAMotorJointBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsAMotorJoint *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsAMotorJoint *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsAMotorJointBase::shallowCopy(void) const
{
    PhysicsAMotorJoint *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsAMotorJoint *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

PhysicsAMotorJointBase::PhysicsAMotorJointBase(void) :
    Inherited(),
    _sfMode                   (Int8( dAMotorUser)),
    _sfNumAxes                (UInt8(3)),
    _sfAxis1                  (Vec3f(1.0, 0.0, 0.0)),
    _sfAxis2                  (Vec3f(0.0, 1.0, 0.0)),
    _sfAxis3                  (Vec3f(0.0, 0.0, 1.0)),
    _sfAxis1ReferenceFrame    (UInt8(0)),
    _sfAxis2ReferenceFrame    (UInt8(0)),
    _sfAxis3ReferenceFrame    (UInt8(0)),
    _sfVel                    (),
    _sfFMax                   (),
    _sfFudgeFactor            (),
    _sfVel2                   (),
    _sfFMax2                  (),
    _sfFudgeFactor2           (),
    _sfVel3                   (),
    _sfFMax3                  (),
    _sfFudgeFactor3           (),
    _sfHiStop                 (),
    _sfLoStop                 (),
    _sfBounce                 (),
    _sfCFM                    (),
    _sfStopERP                (),
    _sfStopCFM                (),
    _sfHiStop2                (),
    _sfLoStop2                (),
    _sfBounce2                (),
    _sfCFM2                   (),
    _sfStopERP2               (),
    _sfStopCFM2               (),
    _sfHiStop3                (),
    _sfLoStop3                (),
    _sfBounce3                (),
    _sfCFM3                   (),
    _sfStopERP3               (),
    _sfStopCFM3               ()
{
}

PhysicsAMotorJointBase::PhysicsAMotorJointBase(const PhysicsAMotorJointBase &source) :
    Inherited(source),
    _sfMode                   (source._sfMode                   ),
    _sfNumAxes                (source._sfNumAxes                ),
    _sfAxis1                  (source._sfAxis1                  ),
    _sfAxis2                  (source._sfAxis2                  ),
    _sfAxis3                  (source._sfAxis3                  ),
    _sfAxis1ReferenceFrame    (source._sfAxis1ReferenceFrame    ),
    _sfAxis2ReferenceFrame    (source._sfAxis2ReferenceFrame    ),
    _sfAxis3ReferenceFrame    (source._sfAxis3ReferenceFrame    ),
    _sfVel                    (source._sfVel                    ),
    _sfFMax                   (source._sfFMax                   ),
    _sfFudgeFactor            (source._sfFudgeFactor            ),
    _sfVel2                   (source._sfVel2                   ),
    _sfFMax2                  (source._sfFMax2                  ),
    _sfFudgeFactor2           (source._sfFudgeFactor2           ),
    _sfVel3                   (source._sfVel3                   ),
    _sfFMax3                  (source._sfFMax3                  ),
    _sfFudgeFactor3           (source._sfFudgeFactor3           ),
    _sfHiStop                 (source._sfHiStop                 ),
    _sfLoStop                 (source._sfLoStop                 ),
    _sfBounce                 (source._sfBounce                 ),
    _sfCFM                    (source._sfCFM                    ),
    _sfStopERP                (source._sfStopERP                ),
    _sfStopCFM                (source._sfStopCFM                ),
    _sfHiStop2                (source._sfHiStop2                ),
    _sfLoStop2                (source._sfLoStop2                ),
    _sfBounce2                (source._sfBounce2                ),
    _sfCFM2                   (source._sfCFM2                   ),
    _sfStopERP2               (source._sfStopERP2               ),
    _sfStopCFM2               (source._sfStopCFM2               ),
    _sfHiStop3                (source._sfHiStop3                ),
    _sfLoStop3                (source._sfLoStop3                ),
    _sfBounce3                (source._sfBounce3                ),
    _sfCFM3                   (source._sfCFM3                   ),
    _sfStopERP3               (source._sfStopERP3               ),
    _sfStopCFM3               (source._sfStopCFM3               )
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsAMotorJointBase::~PhysicsAMotorJointBase(void)
{
}


GetFieldHandlePtr PhysicsAMotorJointBase::getHandleMode            (void) const
{
    SFInt8::GetHandlePtr returnValue(
        new  SFInt8::GetHandle(
             &_sfMode,
             this->getType().getFieldDesc(ModeFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleMode           (void)
{
    SFInt8::EditHandlePtr returnValue(
        new  SFInt8::EditHandle(
             &_sfMode,
             this->getType().getFieldDesc(ModeFieldId),
             this));


    editSField(ModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleNumAxes         (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfNumAxes,
             this->getType().getFieldDesc(NumAxesFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleNumAxes        (void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfNumAxes,
             this->getType().getFieldDesc(NumAxesFieldId),
             this));


    editSField(NumAxesFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleAxis1           (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfAxis1,
             this->getType().getFieldDesc(Axis1FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleAxis1          (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfAxis1,
             this->getType().getFieldDesc(Axis1FieldId),
             this));


    editSField(Axis1FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleAxis2           (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfAxis2,
             this->getType().getFieldDesc(Axis2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleAxis2          (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfAxis2,
             this->getType().getFieldDesc(Axis2FieldId),
             this));


    editSField(Axis2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleAxis3           (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfAxis3,
             this->getType().getFieldDesc(Axis3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleAxis3          (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfAxis3,
             this->getType().getFieldDesc(Axis3FieldId),
             this));


    editSField(Axis3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleAxis1ReferenceFrame (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfAxis1ReferenceFrame,
             this->getType().getFieldDesc(Axis1ReferenceFrameFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleAxis1ReferenceFrame(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfAxis1ReferenceFrame,
             this->getType().getFieldDesc(Axis1ReferenceFrameFieldId),
             this));


    editSField(Axis1ReferenceFrameFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleAxis2ReferenceFrame (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfAxis2ReferenceFrame,
             this->getType().getFieldDesc(Axis2ReferenceFrameFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleAxis2ReferenceFrame(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfAxis2ReferenceFrame,
             this->getType().getFieldDesc(Axis2ReferenceFrameFieldId),
             this));


    editSField(Axis2ReferenceFrameFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleAxis3ReferenceFrame (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfAxis3ReferenceFrame,
             this->getType().getFieldDesc(Axis3ReferenceFrameFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleAxis3ReferenceFrame(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfAxis3ReferenceFrame,
             this->getType().getFieldDesc(Axis3ReferenceFrameFieldId),
             this));


    editSField(Axis3ReferenceFrameFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleVel             (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVel,
             this->getType().getFieldDesc(VelFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleVel            (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVel,
             this->getType().getFieldDesc(VelFieldId),
             this));


    editSField(VelFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleFMax            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFMax,
             this->getType().getFieldDesc(FMaxFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleFMax           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFMax,
             this->getType().getFieldDesc(FMaxFieldId),
             this));


    editSField(FMaxFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleFudgeFactor     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFudgeFactor,
             this->getType().getFieldDesc(FudgeFactorFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleFudgeFactor    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFudgeFactor,
             this->getType().getFieldDesc(FudgeFactorFieldId),
             this));


    editSField(FudgeFactorFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleVel2            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVel2,
             this->getType().getFieldDesc(Vel2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleVel2           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVel2,
             this->getType().getFieldDesc(Vel2FieldId),
             this));


    editSField(Vel2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleFMax2           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFMax2,
             this->getType().getFieldDesc(FMax2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleFMax2          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFMax2,
             this->getType().getFieldDesc(FMax2FieldId),
             this));


    editSField(FMax2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleFudgeFactor2    (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFudgeFactor2,
             this->getType().getFieldDesc(FudgeFactor2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleFudgeFactor2   (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFudgeFactor2,
             this->getType().getFieldDesc(FudgeFactor2FieldId),
             this));


    editSField(FudgeFactor2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleVel3            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVel3,
             this->getType().getFieldDesc(Vel3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleVel3           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVel3,
             this->getType().getFieldDesc(Vel3FieldId),
             this));


    editSField(Vel3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleFMax3           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFMax3,
             this->getType().getFieldDesc(FMax3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleFMax3          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFMax3,
             this->getType().getFieldDesc(FMax3FieldId),
             this));


    editSField(FMax3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleFudgeFactor3    (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFudgeFactor3,
             this->getType().getFieldDesc(FudgeFactor3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleFudgeFactor3   (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFudgeFactor3,
             this->getType().getFieldDesc(FudgeFactor3FieldId),
             this));


    editSField(FudgeFactor3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleHiStop          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHiStop,
             this->getType().getFieldDesc(HiStopFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleHiStop         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHiStop,
             this->getType().getFieldDesc(HiStopFieldId),
             this));


    editSField(HiStopFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleLoStop          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLoStop,
             this->getType().getFieldDesc(LoStopFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleLoStop         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLoStop,
             this->getType().getFieldDesc(LoStopFieldId),
             this));


    editSField(LoStopFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleBounce          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBounce,
             this->getType().getFieldDesc(BounceFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleBounce         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBounce,
             this->getType().getFieldDesc(BounceFieldId),
             this));


    editSField(BounceFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleCFM             (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfCFM,
             this->getType().getFieldDesc(CFMFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleCFM            (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfCFM,
             this->getType().getFieldDesc(CFMFieldId),
             this));


    editSField(CFMFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleStopERP         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopERP,
             this->getType().getFieldDesc(StopERPFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleStopERP        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopERP,
             this->getType().getFieldDesc(StopERPFieldId),
             this));


    editSField(StopERPFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleStopCFM         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopCFM,
             this->getType().getFieldDesc(StopCFMFieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleStopCFM        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopCFM,
             this->getType().getFieldDesc(StopCFMFieldId),
             this));


    editSField(StopCFMFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleHiStop2         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHiStop2,
             this->getType().getFieldDesc(HiStop2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleHiStop2        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHiStop2,
             this->getType().getFieldDesc(HiStop2FieldId),
             this));


    editSField(HiStop2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleLoStop2         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLoStop2,
             this->getType().getFieldDesc(LoStop2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleLoStop2        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLoStop2,
             this->getType().getFieldDesc(LoStop2FieldId),
             this));


    editSField(LoStop2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleBounce2         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBounce2,
             this->getType().getFieldDesc(Bounce2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleBounce2        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBounce2,
             this->getType().getFieldDesc(Bounce2FieldId),
             this));


    editSField(Bounce2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleCFM2            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfCFM2,
             this->getType().getFieldDesc(CFM2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleCFM2           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfCFM2,
             this->getType().getFieldDesc(CFM2FieldId),
             this));


    editSField(CFM2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleStopERP2        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopERP2,
             this->getType().getFieldDesc(StopERP2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleStopERP2       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopERP2,
             this->getType().getFieldDesc(StopERP2FieldId),
             this));


    editSField(StopERP2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleStopCFM2        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopCFM2,
             this->getType().getFieldDesc(StopCFM2FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleStopCFM2       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopCFM2,
             this->getType().getFieldDesc(StopCFM2FieldId),
             this));


    editSField(StopCFM2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleHiStop3         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHiStop3,
             this->getType().getFieldDesc(HiStop3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleHiStop3        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHiStop3,
             this->getType().getFieldDesc(HiStop3FieldId),
             this));


    editSField(HiStop3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleLoStop3         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLoStop3,
             this->getType().getFieldDesc(LoStop3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleLoStop3        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLoStop3,
             this->getType().getFieldDesc(LoStop3FieldId),
             this));


    editSField(LoStop3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleBounce3         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBounce3,
             this->getType().getFieldDesc(Bounce3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleBounce3        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBounce3,
             this->getType().getFieldDesc(Bounce3FieldId),
             this));


    editSField(Bounce3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleCFM3            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfCFM3,
             this->getType().getFieldDesc(CFM3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleCFM3           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfCFM3,
             this->getType().getFieldDesc(CFM3FieldId),
             this));


    editSField(CFM3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleStopERP3        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopERP3,
             this->getType().getFieldDesc(StopERP3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleStopERP3       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopERP3,
             this->getType().getFieldDesc(StopERP3FieldId),
             this));


    editSField(StopERP3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsAMotorJointBase::getHandleStopCFM3        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopCFM3,
             this->getType().getFieldDesc(StopCFM3FieldId),
             const_cast<PhysicsAMotorJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsAMotorJointBase::editHandleStopCFM3       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopCFM3,
             this->getType().getFieldDesc(StopCFM3FieldId),
             this));


    editSField(StopCFM3FieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void PhysicsAMotorJointBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsAMotorJoint *pThis = static_cast<PhysicsAMotorJoint *>(this);

    pThis->execSync(static_cast<PhysicsAMotorJoint *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsAMotorJointBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsAMotorJoint *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsAMotorJoint *>(pRefAspect),
                  dynamic_cast<const PhysicsAMotorJoint *>(this));

    return returnValue;
}
#endif

void PhysicsAMotorJointBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
