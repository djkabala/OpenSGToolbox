/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsAMotorJoint!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PhysicsAMotorJointBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 PhysicsAMotorJointBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 PhysicsAMotorJointBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the PhysicsAMotorJoint::_sfMode field.

inline
Int8 &PhysicsAMotorJointBase::editMode(void)
{
    editSField(ModeFieldMask);

    return _sfMode.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfMode field.
inline
      Int8  PhysicsAMotorJointBase::getMode(void) const
{
    return _sfMode.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfMode field.
inline
void PhysicsAMotorJointBase::setMode(const Int8 value)
{
    editSField(ModeFieldMask);

    _sfMode.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfNumAxes field.

inline
UInt8 &PhysicsAMotorJointBase::editNumAxes(void)
{
    editSField(NumAxesFieldMask);

    return _sfNumAxes.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfNumAxes field.
inline
      UInt8  PhysicsAMotorJointBase::getNumAxes(void) const
{
    return _sfNumAxes.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfNumAxes field.
inline
void PhysicsAMotorJointBase::setNumAxes(const UInt8 value)
{
    editSField(NumAxesFieldMask);

    _sfNumAxes.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfAxis1 field.

inline
Vec3f &PhysicsAMotorJointBase::editAxis1(void)
{
    editSField(Axis1FieldMask);

    return _sfAxis1.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfAxis1 field.
inline
const Vec3f &PhysicsAMotorJointBase::getAxis1(void) const
{
    return _sfAxis1.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfAxis1 field.
inline
void PhysicsAMotorJointBase::setAxis1(const Vec3f &value)
{
    editSField(Axis1FieldMask);

    _sfAxis1.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfAxis2 field.

inline
Vec3f &PhysicsAMotorJointBase::editAxis2(void)
{
    editSField(Axis2FieldMask);

    return _sfAxis2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfAxis2 field.
inline
const Vec3f &PhysicsAMotorJointBase::getAxis2(void) const
{
    return _sfAxis2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfAxis2 field.
inline
void PhysicsAMotorJointBase::setAxis2(const Vec3f &value)
{
    editSField(Axis2FieldMask);

    _sfAxis2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfAxis3 field.

inline
Vec3f &PhysicsAMotorJointBase::editAxis3(void)
{
    editSField(Axis3FieldMask);

    return _sfAxis3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfAxis3 field.
inline
const Vec3f &PhysicsAMotorJointBase::getAxis3(void) const
{
    return _sfAxis3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfAxis3 field.
inline
void PhysicsAMotorJointBase::setAxis3(const Vec3f &value)
{
    editSField(Axis3FieldMask);

    _sfAxis3.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfAxis1ReferenceFrame field.

inline
UInt8 &PhysicsAMotorJointBase::editAxis1ReferenceFrame(void)
{
    editSField(Axis1ReferenceFrameFieldMask);

    return _sfAxis1ReferenceFrame.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfAxis1ReferenceFrame field.
inline
      UInt8  PhysicsAMotorJointBase::getAxis1ReferenceFrame(void) const
{
    return _sfAxis1ReferenceFrame.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfAxis1ReferenceFrame field.
inline
void PhysicsAMotorJointBase::setAxis1ReferenceFrame(const UInt8 value)
{
    editSField(Axis1ReferenceFrameFieldMask);

    _sfAxis1ReferenceFrame.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfAxis2ReferenceFrame field.

inline
UInt8 &PhysicsAMotorJointBase::editAxis2ReferenceFrame(void)
{
    editSField(Axis2ReferenceFrameFieldMask);

    return _sfAxis2ReferenceFrame.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfAxis2ReferenceFrame field.
inline
      UInt8  PhysicsAMotorJointBase::getAxis2ReferenceFrame(void) const
{
    return _sfAxis2ReferenceFrame.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfAxis2ReferenceFrame field.
inline
void PhysicsAMotorJointBase::setAxis2ReferenceFrame(const UInt8 value)
{
    editSField(Axis2ReferenceFrameFieldMask);

    _sfAxis2ReferenceFrame.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfAxis3ReferenceFrame field.

inline
UInt8 &PhysicsAMotorJointBase::editAxis3ReferenceFrame(void)
{
    editSField(Axis3ReferenceFrameFieldMask);

    return _sfAxis3ReferenceFrame.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfAxis3ReferenceFrame field.
inline
      UInt8  PhysicsAMotorJointBase::getAxis3ReferenceFrame(void) const
{
    return _sfAxis3ReferenceFrame.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfAxis3ReferenceFrame field.
inline
void PhysicsAMotorJointBase::setAxis3ReferenceFrame(const UInt8 value)
{
    editSField(Axis3ReferenceFrameFieldMask);

    _sfAxis3ReferenceFrame.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfVel field.

inline
Real32 &PhysicsAMotorJointBase::editVel(void)
{
    editSField(VelFieldMask);

    return _sfVel.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfVel field.
inline
      Real32  PhysicsAMotorJointBase::getVel(void) const
{
    return _sfVel.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfVel field.
inline
void PhysicsAMotorJointBase::setVel(const Real32 value)
{
    editSField(VelFieldMask);

    _sfVel.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfFMax field.

inline
Real32 &PhysicsAMotorJointBase::editFMax(void)
{
    editSField(FMaxFieldMask);

    return _sfFMax.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfFMax field.
inline
      Real32  PhysicsAMotorJointBase::getFMax(void) const
{
    return _sfFMax.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfFMax field.
inline
void PhysicsAMotorJointBase::setFMax(const Real32 value)
{
    editSField(FMaxFieldMask);

    _sfFMax.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfFudgeFactor field.

inline
Real32 &PhysicsAMotorJointBase::editFudgeFactor(void)
{
    editSField(FudgeFactorFieldMask);

    return _sfFudgeFactor.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfFudgeFactor field.
inline
      Real32  PhysicsAMotorJointBase::getFudgeFactor(void) const
{
    return _sfFudgeFactor.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfFudgeFactor field.
inline
void PhysicsAMotorJointBase::setFudgeFactor(const Real32 value)
{
    editSField(FudgeFactorFieldMask);

    _sfFudgeFactor.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfVel2 field.

inline
Real32 &PhysicsAMotorJointBase::editVel2(void)
{
    editSField(Vel2FieldMask);

    return _sfVel2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfVel2 field.
inline
      Real32  PhysicsAMotorJointBase::getVel2(void) const
{
    return _sfVel2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfVel2 field.
inline
void PhysicsAMotorJointBase::setVel2(const Real32 value)
{
    editSField(Vel2FieldMask);

    _sfVel2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfFMax2 field.

inline
Real32 &PhysicsAMotorJointBase::editFMax2(void)
{
    editSField(FMax2FieldMask);

    return _sfFMax2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfFMax2 field.
inline
      Real32  PhysicsAMotorJointBase::getFMax2(void) const
{
    return _sfFMax2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfFMax2 field.
inline
void PhysicsAMotorJointBase::setFMax2(const Real32 value)
{
    editSField(FMax2FieldMask);

    _sfFMax2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfFudgeFactor2 field.

inline
Real32 &PhysicsAMotorJointBase::editFudgeFactor2(void)
{
    editSField(FudgeFactor2FieldMask);

    return _sfFudgeFactor2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfFudgeFactor2 field.
inline
      Real32  PhysicsAMotorJointBase::getFudgeFactor2(void) const
{
    return _sfFudgeFactor2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfFudgeFactor2 field.
inline
void PhysicsAMotorJointBase::setFudgeFactor2(const Real32 value)
{
    editSField(FudgeFactor2FieldMask);

    _sfFudgeFactor2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfVel3 field.

inline
Real32 &PhysicsAMotorJointBase::editVel3(void)
{
    editSField(Vel3FieldMask);

    return _sfVel3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfVel3 field.
inline
      Real32  PhysicsAMotorJointBase::getVel3(void) const
{
    return _sfVel3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfVel3 field.
inline
void PhysicsAMotorJointBase::setVel3(const Real32 value)
{
    editSField(Vel3FieldMask);

    _sfVel3.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfFMax3 field.

inline
Real32 &PhysicsAMotorJointBase::editFMax3(void)
{
    editSField(FMax3FieldMask);

    return _sfFMax3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfFMax3 field.
inline
      Real32  PhysicsAMotorJointBase::getFMax3(void) const
{
    return _sfFMax3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfFMax3 field.
inline
void PhysicsAMotorJointBase::setFMax3(const Real32 value)
{
    editSField(FMax3FieldMask);

    _sfFMax3.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfFudgeFactor3 field.

inline
Real32 &PhysicsAMotorJointBase::editFudgeFactor3(void)
{
    editSField(FudgeFactor3FieldMask);

    return _sfFudgeFactor3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfFudgeFactor3 field.
inline
      Real32  PhysicsAMotorJointBase::getFudgeFactor3(void) const
{
    return _sfFudgeFactor3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfFudgeFactor3 field.
inline
void PhysicsAMotorJointBase::setFudgeFactor3(const Real32 value)
{
    editSField(FudgeFactor3FieldMask);

    _sfFudgeFactor3.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfHiStop field.

inline
Real32 &PhysicsAMotorJointBase::editHiStop(void)
{
    editSField(HiStopFieldMask);

    return _sfHiStop.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfHiStop field.
inline
      Real32  PhysicsAMotorJointBase::getHiStop(void) const
{
    return _sfHiStop.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfHiStop field.
inline
void PhysicsAMotorJointBase::setHiStop(const Real32 value)
{
    editSField(HiStopFieldMask);

    _sfHiStop.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfLoStop field.

inline
Real32 &PhysicsAMotorJointBase::editLoStop(void)
{
    editSField(LoStopFieldMask);

    return _sfLoStop.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfLoStop field.
inline
      Real32  PhysicsAMotorJointBase::getLoStop(void) const
{
    return _sfLoStop.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfLoStop field.
inline
void PhysicsAMotorJointBase::setLoStop(const Real32 value)
{
    editSField(LoStopFieldMask);

    _sfLoStop.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfBounce field.

inline
Real32 &PhysicsAMotorJointBase::editBounce(void)
{
    editSField(BounceFieldMask);

    return _sfBounce.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfBounce field.
inline
      Real32  PhysicsAMotorJointBase::getBounce(void) const
{
    return _sfBounce.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfBounce field.
inline
void PhysicsAMotorJointBase::setBounce(const Real32 value)
{
    editSField(BounceFieldMask);

    _sfBounce.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfCFM field.

inline
Real32 &PhysicsAMotorJointBase::editCFM(void)
{
    editSField(CFMFieldMask);

    return _sfCFM.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfCFM field.
inline
      Real32  PhysicsAMotorJointBase::getCFM(void) const
{
    return _sfCFM.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfCFM field.
inline
void PhysicsAMotorJointBase::setCFM(const Real32 value)
{
    editSField(CFMFieldMask);

    _sfCFM.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfStopERP field.

inline
Real32 &PhysicsAMotorJointBase::editStopERP(void)
{
    editSField(StopERPFieldMask);

    return _sfStopERP.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfStopERP field.
inline
      Real32  PhysicsAMotorJointBase::getStopERP(void) const
{
    return _sfStopERP.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfStopERP field.
inline
void PhysicsAMotorJointBase::setStopERP(const Real32 value)
{
    editSField(StopERPFieldMask);

    _sfStopERP.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfStopCFM field.

inline
Real32 &PhysicsAMotorJointBase::editStopCFM(void)
{
    editSField(StopCFMFieldMask);

    return _sfStopCFM.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfStopCFM field.
inline
      Real32  PhysicsAMotorJointBase::getStopCFM(void) const
{
    return _sfStopCFM.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfStopCFM field.
inline
void PhysicsAMotorJointBase::setStopCFM(const Real32 value)
{
    editSField(StopCFMFieldMask);

    _sfStopCFM.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfHiStop2 field.

inline
Real32 &PhysicsAMotorJointBase::editHiStop2(void)
{
    editSField(HiStop2FieldMask);

    return _sfHiStop2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfHiStop2 field.
inline
      Real32  PhysicsAMotorJointBase::getHiStop2(void) const
{
    return _sfHiStop2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfHiStop2 field.
inline
void PhysicsAMotorJointBase::setHiStop2(const Real32 value)
{
    editSField(HiStop2FieldMask);

    _sfHiStop2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfLoStop2 field.

inline
Real32 &PhysicsAMotorJointBase::editLoStop2(void)
{
    editSField(LoStop2FieldMask);

    return _sfLoStop2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfLoStop2 field.
inline
      Real32  PhysicsAMotorJointBase::getLoStop2(void) const
{
    return _sfLoStop2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfLoStop2 field.
inline
void PhysicsAMotorJointBase::setLoStop2(const Real32 value)
{
    editSField(LoStop2FieldMask);

    _sfLoStop2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfBounce2 field.

inline
Real32 &PhysicsAMotorJointBase::editBounce2(void)
{
    editSField(Bounce2FieldMask);

    return _sfBounce2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfBounce2 field.
inline
      Real32  PhysicsAMotorJointBase::getBounce2(void) const
{
    return _sfBounce2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfBounce2 field.
inline
void PhysicsAMotorJointBase::setBounce2(const Real32 value)
{
    editSField(Bounce2FieldMask);

    _sfBounce2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfCFM2 field.

inline
Real32 &PhysicsAMotorJointBase::editCFM2(void)
{
    editSField(CFM2FieldMask);

    return _sfCFM2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfCFM2 field.
inline
      Real32  PhysicsAMotorJointBase::getCFM2(void) const
{
    return _sfCFM2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfCFM2 field.
inline
void PhysicsAMotorJointBase::setCFM2(const Real32 value)
{
    editSField(CFM2FieldMask);

    _sfCFM2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfStopERP2 field.

inline
Real32 &PhysicsAMotorJointBase::editStopERP2(void)
{
    editSField(StopERP2FieldMask);

    return _sfStopERP2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfStopERP2 field.
inline
      Real32  PhysicsAMotorJointBase::getStopERP2(void) const
{
    return _sfStopERP2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfStopERP2 field.
inline
void PhysicsAMotorJointBase::setStopERP2(const Real32 value)
{
    editSField(StopERP2FieldMask);

    _sfStopERP2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfStopCFM2 field.

inline
Real32 &PhysicsAMotorJointBase::editStopCFM2(void)
{
    editSField(StopCFM2FieldMask);

    return _sfStopCFM2.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfStopCFM2 field.
inline
      Real32  PhysicsAMotorJointBase::getStopCFM2(void) const
{
    return _sfStopCFM2.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfStopCFM2 field.
inline
void PhysicsAMotorJointBase::setStopCFM2(const Real32 value)
{
    editSField(StopCFM2FieldMask);

    _sfStopCFM2.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfHiStop3 field.

inline
Real32 &PhysicsAMotorJointBase::editHiStop3(void)
{
    editSField(HiStop3FieldMask);

    return _sfHiStop3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfHiStop3 field.
inline
      Real32  PhysicsAMotorJointBase::getHiStop3(void) const
{
    return _sfHiStop3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfHiStop3 field.
inline
void PhysicsAMotorJointBase::setHiStop3(const Real32 value)
{
    editSField(HiStop3FieldMask);

    _sfHiStop3.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfLoStop3 field.

inline
Real32 &PhysicsAMotorJointBase::editLoStop3(void)
{
    editSField(LoStop3FieldMask);

    return _sfLoStop3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfLoStop3 field.
inline
      Real32  PhysicsAMotorJointBase::getLoStop3(void) const
{
    return _sfLoStop3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfLoStop3 field.
inline
void PhysicsAMotorJointBase::setLoStop3(const Real32 value)
{
    editSField(LoStop3FieldMask);

    _sfLoStop3.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfBounce3 field.

inline
Real32 &PhysicsAMotorJointBase::editBounce3(void)
{
    editSField(Bounce3FieldMask);

    return _sfBounce3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfBounce3 field.
inline
      Real32  PhysicsAMotorJointBase::getBounce3(void) const
{
    return _sfBounce3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfBounce3 field.
inline
void PhysicsAMotorJointBase::setBounce3(const Real32 value)
{
    editSField(Bounce3FieldMask);

    _sfBounce3.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfCFM3 field.

inline
Real32 &PhysicsAMotorJointBase::editCFM3(void)
{
    editSField(CFM3FieldMask);

    return _sfCFM3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfCFM3 field.
inline
      Real32  PhysicsAMotorJointBase::getCFM3(void) const
{
    return _sfCFM3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfCFM3 field.
inline
void PhysicsAMotorJointBase::setCFM3(const Real32 value)
{
    editSField(CFM3FieldMask);

    _sfCFM3.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfStopERP3 field.

inline
Real32 &PhysicsAMotorJointBase::editStopERP3(void)
{
    editSField(StopERP3FieldMask);

    return _sfStopERP3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfStopERP3 field.
inline
      Real32  PhysicsAMotorJointBase::getStopERP3(void) const
{
    return _sfStopERP3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfStopERP3 field.
inline
void PhysicsAMotorJointBase::setStopERP3(const Real32 value)
{
    editSField(StopERP3FieldMask);

    _sfStopERP3.setValue(value);
}
//! Get the value of the PhysicsAMotorJoint::_sfStopCFM3 field.

inline
Real32 &PhysicsAMotorJointBase::editStopCFM3(void)
{
    editSField(StopCFM3FieldMask);

    return _sfStopCFM3.getValue();
}

//! Get the value of the PhysicsAMotorJoint::_sfStopCFM3 field.
inline
      Real32  PhysicsAMotorJointBase::getStopCFM3(void) const
{
    return _sfStopCFM3.getValue();
}

//! Set the value of the PhysicsAMotorJoint::_sfStopCFM3 field.
inline
void PhysicsAMotorJointBase::setStopCFM3(const Real32 value)
{
    editSField(StopCFM3FieldMask);

    _sfStopCFM3.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void PhysicsAMotorJointBase::execSync (      PhysicsAMotorJointBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
        _sfMode.syncWith(pFrom->_sfMode);

    if(FieldBits::NoField != (NumAxesFieldMask & whichField))
        _sfNumAxes.syncWith(pFrom->_sfNumAxes);

    if(FieldBits::NoField != (Axis1FieldMask & whichField))
        _sfAxis1.syncWith(pFrom->_sfAxis1);

    if(FieldBits::NoField != (Axis2FieldMask & whichField))
        _sfAxis2.syncWith(pFrom->_sfAxis2);

    if(FieldBits::NoField != (Axis3FieldMask & whichField))
        _sfAxis3.syncWith(pFrom->_sfAxis3);

    if(FieldBits::NoField != (Axis1ReferenceFrameFieldMask & whichField))
        _sfAxis1ReferenceFrame.syncWith(pFrom->_sfAxis1ReferenceFrame);

    if(FieldBits::NoField != (Axis2ReferenceFrameFieldMask & whichField))
        _sfAxis2ReferenceFrame.syncWith(pFrom->_sfAxis2ReferenceFrame);

    if(FieldBits::NoField != (Axis3ReferenceFrameFieldMask & whichField))
        _sfAxis3ReferenceFrame.syncWith(pFrom->_sfAxis3ReferenceFrame);

    if(FieldBits::NoField != (VelFieldMask & whichField))
        _sfVel.syncWith(pFrom->_sfVel);

    if(FieldBits::NoField != (FMaxFieldMask & whichField))
        _sfFMax.syncWith(pFrom->_sfFMax);

    if(FieldBits::NoField != (FudgeFactorFieldMask & whichField))
        _sfFudgeFactor.syncWith(pFrom->_sfFudgeFactor);

    if(FieldBits::NoField != (Vel2FieldMask & whichField))
        _sfVel2.syncWith(pFrom->_sfVel2);

    if(FieldBits::NoField != (FMax2FieldMask & whichField))
        _sfFMax2.syncWith(pFrom->_sfFMax2);

    if(FieldBits::NoField != (FudgeFactor2FieldMask & whichField))
        _sfFudgeFactor2.syncWith(pFrom->_sfFudgeFactor2);

    if(FieldBits::NoField != (Vel3FieldMask & whichField))
        _sfVel3.syncWith(pFrom->_sfVel3);

    if(FieldBits::NoField != (FMax3FieldMask & whichField))
        _sfFMax3.syncWith(pFrom->_sfFMax3);

    if(FieldBits::NoField != (FudgeFactor3FieldMask & whichField))
        _sfFudgeFactor3.syncWith(pFrom->_sfFudgeFactor3);

    if(FieldBits::NoField != (HiStopFieldMask & whichField))
        _sfHiStop.syncWith(pFrom->_sfHiStop);

    if(FieldBits::NoField != (LoStopFieldMask & whichField))
        _sfLoStop.syncWith(pFrom->_sfLoStop);

    if(FieldBits::NoField != (BounceFieldMask & whichField))
        _sfBounce.syncWith(pFrom->_sfBounce);

    if(FieldBits::NoField != (CFMFieldMask & whichField))
        _sfCFM.syncWith(pFrom->_sfCFM);

    if(FieldBits::NoField != (StopERPFieldMask & whichField))
        _sfStopERP.syncWith(pFrom->_sfStopERP);

    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
        _sfStopCFM.syncWith(pFrom->_sfStopCFM);

    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
        _sfHiStop2.syncWith(pFrom->_sfHiStop2);

    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
        _sfLoStop2.syncWith(pFrom->_sfLoStop2);

    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
        _sfBounce2.syncWith(pFrom->_sfBounce2);

    if(FieldBits::NoField != (CFM2FieldMask & whichField))
        _sfCFM2.syncWith(pFrom->_sfCFM2);

    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
        _sfStopERP2.syncWith(pFrom->_sfStopERP2);

    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
        _sfStopCFM2.syncWith(pFrom->_sfStopCFM2);

    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
        _sfHiStop3.syncWith(pFrom->_sfHiStop3);

    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
        _sfLoStop3.syncWith(pFrom->_sfLoStop3);

    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
        _sfBounce3.syncWith(pFrom->_sfBounce3);

    if(FieldBits::NoField != (CFM3FieldMask & whichField))
        _sfCFM3.syncWith(pFrom->_sfCFM3);

    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
        _sfStopERP3.syncWith(pFrom->_sfStopERP3);

    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
        _sfStopCFM3.syncWith(pFrom->_sfStopCFM3);
}
#endif


inline
const Char8 *PhysicsAMotorJointBase::getClassname(void)
{
    return "PhysicsAMotorJoint";
}
OSG_GEN_CONTAINERPTR(PhysicsAMotorJoint);

OSG_END_NAMESPACE

