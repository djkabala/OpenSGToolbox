/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsJoint!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGPhysicsWorld.h"            // World Class
#include "OSGPhysicsBody.h"             // FirstBody Class

#include "OSGPhysicsJointBase.h"
#include "OSGPhysicsJoint.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsJoint
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var PhysicsWorld *  PhysicsJointBase::_sfWorld
    
*/

/*! \var PhysicsBody *   PhysicsJointBase::_sfFirstBody
    
*/

/*! \var PhysicsBody *   PhysicsJointBase::_sfSecondBody
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsJoint *>::_type("PhysicsJointPtr", "AttachmentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsJoint *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsJoint *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsJoint *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsJointBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecPhysicsWorldPtr::Description(
        SFUnrecPhysicsWorldPtr::getClassType(),
        "world",
        "",
        WorldFieldId, WorldFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsJoint::editHandleWorld),
        static_cast<FieldGetMethodSig >(&PhysicsJoint::getHandleWorld));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPhysicsBodyPtr::Description(
        SFUnrecPhysicsBodyPtr::getClassType(),
        "firstBody",
        "",
        FirstBodyFieldId, FirstBodyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsJoint::editHandleFirstBody),
        static_cast<FieldGetMethodSig >(&PhysicsJoint::getHandleFirstBody));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecPhysicsBodyPtr::Description(
        SFUnrecPhysicsBodyPtr::getClassType(),
        "secondBody",
        "",
        SecondBodyFieldId, SecondBodyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsJoint::editHandleSecondBody),
        static_cast<FieldGetMethodSig >(&PhysicsJoint::getHandleSecondBody));

    oType.addInitialDesc(pDesc);
}


PhysicsJointBase::TypeObject PhysicsJointBase::_type(
    PhysicsJointBase::getClassname(),
    Inherited::getClassname(),
    "PhysicsJoint",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsJointBase::createEmptyLocal),
    PhysicsJoint::initMethod,
    PhysicsJoint::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsJoint::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsJoint\"\n"
    "\tparent=\"Attachment\"\n"
    "    library=\"ContribPhysics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com),  Behboud Kalantary         \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"world\"\n"
    "\t\ttype=\"PhysicsWorld\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"firstBody\"\n"
    "\t\ttype=\"PhysicsBody\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"secondBody\"\n"
    "\t\ttype=\"PhysicsBody\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsJointBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsJointBase::getType(void) const
{
    return _type;
}

UInt32 PhysicsJointBase::getContainerSize(void) const
{
    return sizeof(PhysicsJoint);
}

/*------------------------- decorator get ------------------------------*/


//! Get the PhysicsJoint::_sfWorld field.
const SFUnrecPhysicsWorldPtr *PhysicsJointBase::getSFWorld(void) const
{
    return &_sfWorld;
}

SFUnrecPhysicsWorldPtr *PhysicsJointBase::editSFWorld          (void)
{
    editSField(WorldFieldMask);

    return &_sfWorld;
}

//! Get the PhysicsJoint::_sfFirstBody field.
const SFUnrecPhysicsBodyPtr *PhysicsJointBase::getSFFirstBody(void) const
{
    return &_sfFirstBody;
}

SFUnrecPhysicsBodyPtr *PhysicsJointBase::editSFFirstBody      (void)
{
    editSField(FirstBodyFieldMask);

    return &_sfFirstBody;
}

//! Get the PhysicsJoint::_sfSecondBody field.
const SFUnrecPhysicsBodyPtr *PhysicsJointBase::getSFSecondBody(void) const
{
    return &_sfSecondBody;
}

SFUnrecPhysicsBodyPtr *PhysicsJointBase::editSFSecondBody     (void)
{
    editSField(SecondBodyFieldMask);

    return &_sfSecondBody;
}





/*------------------------------ access -----------------------------------*/

UInt32 PhysicsJointBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        returnValue += _sfWorld.getBinSize();
    }
    if(FieldBits::NoField != (FirstBodyFieldMask & whichField))
    {
        returnValue += _sfFirstBody.getBinSize();
    }
    if(FieldBits::NoField != (SecondBodyFieldMask & whichField))
    {
        returnValue += _sfSecondBody.getBinSize();
    }

    return returnValue;
}

void PhysicsJointBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        _sfWorld.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FirstBodyFieldMask & whichField))
    {
        _sfFirstBody.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SecondBodyFieldMask & whichField))
    {
        _sfSecondBody.copyToBin(pMem);
    }
}

void PhysicsJointBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WorldFieldMask & whichField))
    {
        _sfWorld.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FirstBodyFieldMask & whichField))
    {
        _sfFirstBody.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SecondBodyFieldMask & whichField))
    {
        _sfSecondBody.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsJointTransitPtr PhysicsJointBase::createLocal(BitVector bFlags)
{
    PhysicsJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsJoint>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsJointTransitPtr PhysicsJointBase::createDependent(BitVector bFlags)
{
    PhysicsJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsJoint>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsJointTransitPtr PhysicsJointBase::create(void)
{
    PhysicsJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsJoint>(tmpPtr);
    }

    return fc;
}

PhysicsJoint *PhysicsJointBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsJoint *returnValue;

    newPtr<PhysicsJoint>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsJoint *PhysicsJointBase::createEmpty(void)
{
    PhysicsJoint *returnValue;

    newPtr<PhysicsJoint>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr PhysicsJointBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsJoint *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsJoint *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsJointBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsJoint *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsJoint *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsJointBase::shallowCopy(void) const
{
    PhysicsJoint *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsJoint *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

PhysicsJointBase::PhysicsJointBase(void) :
    Inherited(),
    _sfWorld                  (NULL),
    _sfFirstBody              (NULL),
    _sfSecondBody             (NULL)
{
}

PhysicsJointBase::PhysicsJointBase(const PhysicsJointBase &source) :
    Inherited(source),
    _sfWorld                  (NULL),
    _sfFirstBody              (NULL),
    _sfSecondBody             (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsJointBase::~PhysicsJointBase(void)
{
}

void PhysicsJointBase::onCreate(const PhysicsJoint *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        PhysicsJoint *pThis = static_cast<PhysicsJoint *>(this);

        pThis->setWorld(source->getWorld());

        pThis->setFirstBody(source->getFirstBody());

        pThis->setSecondBody(source->getSecondBody());
    }
}

GetFieldHandlePtr PhysicsJointBase::getHandleWorld           (void) const
{
    SFUnrecPhysicsWorldPtr::GetHandlePtr returnValue(
        new  SFUnrecPhysicsWorldPtr::GetHandle(
             &_sfWorld,
             this->getType().getFieldDesc(WorldFieldId),
             const_cast<PhysicsJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsJointBase::editHandleWorld          (void)
{
    SFUnrecPhysicsWorldPtr::EditHandlePtr returnValue(
        new  SFUnrecPhysicsWorldPtr::EditHandle(
             &_sfWorld,
             this->getType().getFieldDesc(WorldFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsJoint::setWorld,
                    static_cast<PhysicsJoint *>(this), _1));

    editSField(WorldFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsJointBase::getHandleFirstBody       (void) const
{
    SFUnrecPhysicsBodyPtr::GetHandlePtr returnValue(
        new  SFUnrecPhysicsBodyPtr::GetHandle(
             &_sfFirstBody,
             this->getType().getFieldDesc(FirstBodyFieldId),
             const_cast<PhysicsJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsJointBase::editHandleFirstBody      (void)
{
    SFUnrecPhysicsBodyPtr::EditHandlePtr returnValue(
        new  SFUnrecPhysicsBodyPtr::EditHandle(
             &_sfFirstBody,
             this->getType().getFieldDesc(FirstBodyFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsJoint::setFirstBody,
                    static_cast<PhysicsJoint *>(this), _1));

    editSField(FirstBodyFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsJointBase::getHandleSecondBody      (void) const
{
    SFUnrecPhysicsBodyPtr::GetHandlePtr returnValue(
        new  SFUnrecPhysicsBodyPtr::GetHandle(
             &_sfSecondBody,
             this->getType().getFieldDesc(SecondBodyFieldId),
             const_cast<PhysicsJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsJointBase::editHandleSecondBody     (void)
{
    SFUnrecPhysicsBodyPtr::EditHandlePtr returnValue(
        new  SFUnrecPhysicsBodyPtr::EditHandle(
             &_sfSecondBody,
             this->getType().getFieldDesc(SecondBodyFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PhysicsJoint::setSecondBody,
                    static_cast<PhysicsJoint *>(this), _1));

    editSField(SecondBodyFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void PhysicsJointBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsJoint *pThis = static_cast<PhysicsJoint *>(this);

    pThis->execSync(static_cast<PhysicsJoint *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsJointBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsJoint *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsJoint *>(pRefAspect),
                  dynamic_cast<const PhysicsJoint *>(this));

    return returnValue;
}
#endif

void PhysicsJointBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PhysicsJoint *>(this)->setWorld(NULL);

    static_cast<PhysicsJoint *>(this)->setFirstBody(NULL);

    static_cast<PhysicsJoint *>(this)->setSecondBody(NULL);


}


OSG_END_NAMESPACE
