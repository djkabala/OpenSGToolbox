/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsPUJoint!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGPhysicsPUJointBase.h"
#include "OSGPhysicsPUJoint.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsPUJoint
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Vec3f           PhysicsPUJointBase::_sfAnchor
    
*/

/*! \var Vec3f           PhysicsPUJointBase::_sfAxis1
    
*/

/*! \var Vec3f           PhysicsPUJointBase::_sfAxis2
    
*/

/*! \var Vec3f           PhysicsPUJointBase::_sfAxis3
    
*/

/*! \var Real32          PhysicsPUJointBase::_sfHiStop
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/

/*! \var Real32          PhysicsPUJointBase::_sfLoStop
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. 
*/

/*! \var Real32          PhysicsPUJointBase::_sfBounce
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/

/*! \var Real32          PhysicsPUJointBase::_sfCFM
    The constraint force mixing (CFM) value used when not at a stop.
*/

/*! \var Real32          PhysicsPUJointBase::_sfStopERP
    The error reduction parameter (ERP) used by the stops.
*/

/*! \var Real32          PhysicsPUJointBase::_sfStopCFM
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. 
*/

/*! \var Real32          PhysicsPUJointBase::_sfHiStop2
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/

/*! \var Real32          PhysicsPUJointBase::_sfLoStop2
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. 
*/

/*! \var Real32          PhysicsPUJointBase::_sfBounce2
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/

/*! \var Real32          PhysicsPUJointBase::_sfCFM2
    The constraint force mixing (CFM) value used when not at a stop.
*/

/*! \var Real32          PhysicsPUJointBase::_sfStopERP2
    The error reduction parameter (ERP) used by the stops.
*/

/*! \var Real32          PhysicsPUJointBase::_sfStopCFM2
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. 
*/

/*! \var Real32          PhysicsPUJointBase::_sfHiStop3
    High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.
*/

/*! \var Real32          PhysicsPUJointBase::_sfLoStop3
    Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. 
*/

/*! \var Real32          PhysicsPUJointBase::_sfBounce3
    The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.
*/

/*! \var Real32          PhysicsPUJointBase::_sfCFM3
    The constraint force mixing (CFM) value used when not at a stop.
*/

/*! \var Real32          PhysicsPUJointBase::_sfStopERP3
    The error reduction parameter (ERP) used by the stops.
*/

/*! \var Real32          PhysicsPUJointBase::_sfStopCFM3
    The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. 
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsPUJoint *>::_type("PhysicsPUJointPtr", "PhysicsJointPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsPUJoint *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsPUJoint *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsPUJoint *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsPUJointBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "anchor",
        "",
        AnchorFieldId, AnchorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleAnchor),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleAnchor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "axis1",
        "",
        Axis1FieldId, Axis1FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleAxis1),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleAxis1));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "axis2",
        "",
        Axis2FieldId, Axis2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleAxis2),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleAxis2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "axis3",
        "",
        Axis3FieldId, Axis3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleAxis3),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleAxis3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "hiStop",
        "High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n",
        HiStopFieldId, HiStopFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleHiStop),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleHiStop));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "loStop",
        "Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n",
        LoStopFieldId, LoStopFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleLoStop),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleLoStop));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "bounce",
        "The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n",
        BounceFieldId, BounceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleBounce),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleBounce));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "CFM",
        "The constraint force mixing (CFM) value used when not at a stop.\n",
        CFMFieldId, CFMFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleCFM),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleCFM));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopERP",
        "The error reduction parameter (ERP) used by the stops.\n",
        StopERPFieldId, StopERPFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleStopERP),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleStopERP));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopCFM",
        "The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n",
        StopCFMFieldId, StopCFMFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleStopCFM),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleStopCFM));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "hiStop2",
        "High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n",
        HiStop2FieldId, HiStop2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleHiStop2),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleHiStop2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "loStop2",
        "Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n",
        LoStop2FieldId, LoStop2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleLoStop2),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleLoStop2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "bounce2",
        "The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n",
        Bounce2FieldId, Bounce2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleBounce2),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleBounce2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "CFM2",
        "The constraint force mixing (CFM) value used when not at a stop.\n",
        CFM2FieldId, CFM2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleCFM2),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleCFM2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopERP2",
        "The error reduction parameter (ERP) used by the stops.\n",
        StopERP2FieldId, StopERP2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleStopERP2),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleStopERP2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopCFM2",
        "The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n",
        StopCFM2FieldId, StopCFM2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleStopCFM2),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleStopCFM2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "hiStop3",
        "High stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n",
        HiStop3FieldId, HiStop3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleHiStop3),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleHiStop3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "loStop3",
        "Low stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n",
        LoStop3FieldId, LoStop3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleLoStop3),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleLoStop3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "bounce3",
        "The bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n",
        Bounce3FieldId, Bounce3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleBounce3),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleBounce3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "CFM3",
        "The constraint force mixing (CFM) value used when not at a stop.\n",
        CFM3FieldId, CFM3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleCFM3),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleCFM3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopERP3",
        "The error reduction parameter (ERP) used by the stops.\n",
        StopERP3FieldId, StopERP3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleStopERP3),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleStopERP3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "stopCFM3",
        "The constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n",
        StopCFM3FieldId, StopCFM3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsPUJoint::editHandleStopCFM3),
        static_cast<FieldGetMethodSig >(&PhysicsPUJoint::getHandleStopCFM3));

    oType.addInitialDesc(pDesc);
}


PhysicsPUJointBase::TypeObject PhysicsPUJointBase::_type(
    PhysicsPUJointBase::getClassname(),
    Inherited::getClassname(),
    "PhysicsPUJoint",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsPUJointBase::createEmptyLocal),
    PhysicsPUJoint::initMethod,
    PhysicsPUJoint::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsPUJoint::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsPUJoint\"\n"
    "\tparent=\"PhysicsJoint\"\n"
    "    library=\"ContribPhysics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    group=\"PhysicsPUJoint\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com),  Behboud Kalantary         \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"anchor\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axis1\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axis2\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axis3\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"hiStop\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tHigh stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"loStop\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tLow stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bounce\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CFM\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used when not at a stop.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopERP\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe error reduction parameter (ERP) used by the stops.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopCFM\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"hiStop2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tHigh stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"loStop2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tLow stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bounce2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CFM2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used when not at a stop.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopERP2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe error reduction parameter (ERP) used by the stops.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopCFM2\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"hiStop3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tHigh stop angle or position. Setting this to dInfinity (the default value) turns off the high stop. For rotational joints, this stop must be less than pi to be effective. If the high stop is less than the low stop then both stops will be ineffective.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"loStop3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tLow stop angle or position. Setting this to -dInfinity (the default value) turns off the low stop.  For rotational joints, this stop must be greater than - pi to be effective. \n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bounce3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe bouncyness of the stops. This is a restitution parameter in the range 0..1. 0 means the stops are not bouncy at all, 1 means maximum bouncyness.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"CFM3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used when not at a stop.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopERP3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe error reduction parameter (ERP) used by the stops.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stopCFM3\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe constraint force mixing (CFM) value used by the stops. Together with the ERP value this can be used to get spongy or soft stops. Note that this is intended for unpowered joints, it does not really work as expected when a powered joint reaches its limit. \n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsPUJointBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsPUJointBase::getType(void) const
{
    return _type;
}

UInt32 PhysicsPUJointBase::getContainerSize(void) const
{
    return sizeof(PhysicsPUJoint);
}

/*------------------------- decorator get ------------------------------*/


SFVec3f *PhysicsPUJointBase::editSFAnchor(void)
{
    editSField(AnchorFieldMask);

    return &_sfAnchor;
}

const SFVec3f *PhysicsPUJointBase::getSFAnchor(void) const
{
    return &_sfAnchor;
}


SFVec3f *PhysicsPUJointBase::editSFAxis1(void)
{
    editSField(Axis1FieldMask);

    return &_sfAxis1;
}

const SFVec3f *PhysicsPUJointBase::getSFAxis1(void) const
{
    return &_sfAxis1;
}


SFVec3f *PhysicsPUJointBase::editSFAxis2(void)
{
    editSField(Axis2FieldMask);

    return &_sfAxis2;
}

const SFVec3f *PhysicsPUJointBase::getSFAxis2(void) const
{
    return &_sfAxis2;
}


SFVec3f *PhysicsPUJointBase::editSFAxis3(void)
{
    editSField(Axis3FieldMask);

    return &_sfAxis3;
}

const SFVec3f *PhysicsPUJointBase::getSFAxis3(void) const
{
    return &_sfAxis3;
}


SFReal32 *PhysicsPUJointBase::editSFHiStop(void)
{
    editSField(HiStopFieldMask);

    return &_sfHiStop;
}

const SFReal32 *PhysicsPUJointBase::getSFHiStop(void) const
{
    return &_sfHiStop;
}


SFReal32 *PhysicsPUJointBase::editSFLoStop(void)
{
    editSField(LoStopFieldMask);

    return &_sfLoStop;
}

const SFReal32 *PhysicsPUJointBase::getSFLoStop(void) const
{
    return &_sfLoStop;
}


SFReal32 *PhysicsPUJointBase::editSFBounce(void)
{
    editSField(BounceFieldMask);

    return &_sfBounce;
}

const SFReal32 *PhysicsPUJointBase::getSFBounce(void) const
{
    return &_sfBounce;
}


SFReal32 *PhysicsPUJointBase::editSFCFM(void)
{
    editSField(CFMFieldMask);

    return &_sfCFM;
}

const SFReal32 *PhysicsPUJointBase::getSFCFM(void) const
{
    return &_sfCFM;
}


SFReal32 *PhysicsPUJointBase::editSFStopERP(void)
{
    editSField(StopERPFieldMask);

    return &_sfStopERP;
}

const SFReal32 *PhysicsPUJointBase::getSFStopERP(void) const
{
    return &_sfStopERP;
}


SFReal32 *PhysicsPUJointBase::editSFStopCFM(void)
{
    editSField(StopCFMFieldMask);

    return &_sfStopCFM;
}

const SFReal32 *PhysicsPUJointBase::getSFStopCFM(void) const
{
    return &_sfStopCFM;
}


SFReal32 *PhysicsPUJointBase::editSFHiStop2(void)
{
    editSField(HiStop2FieldMask);

    return &_sfHiStop2;
}

const SFReal32 *PhysicsPUJointBase::getSFHiStop2(void) const
{
    return &_sfHiStop2;
}


SFReal32 *PhysicsPUJointBase::editSFLoStop2(void)
{
    editSField(LoStop2FieldMask);

    return &_sfLoStop2;
}

const SFReal32 *PhysicsPUJointBase::getSFLoStop2(void) const
{
    return &_sfLoStop2;
}


SFReal32 *PhysicsPUJointBase::editSFBounce2(void)
{
    editSField(Bounce2FieldMask);

    return &_sfBounce2;
}

const SFReal32 *PhysicsPUJointBase::getSFBounce2(void) const
{
    return &_sfBounce2;
}


SFReal32 *PhysicsPUJointBase::editSFCFM2(void)
{
    editSField(CFM2FieldMask);

    return &_sfCFM2;
}

const SFReal32 *PhysicsPUJointBase::getSFCFM2(void) const
{
    return &_sfCFM2;
}


SFReal32 *PhysicsPUJointBase::editSFStopERP2(void)
{
    editSField(StopERP2FieldMask);

    return &_sfStopERP2;
}

const SFReal32 *PhysicsPUJointBase::getSFStopERP2(void) const
{
    return &_sfStopERP2;
}


SFReal32 *PhysicsPUJointBase::editSFStopCFM2(void)
{
    editSField(StopCFM2FieldMask);

    return &_sfStopCFM2;
}

const SFReal32 *PhysicsPUJointBase::getSFStopCFM2(void) const
{
    return &_sfStopCFM2;
}


SFReal32 *PhysicsPUJointBase::editSFHiStop3(void)
{
    editSField(HiStop3FieldMask);

    return &_sfHiStop3;
}

const SFReal32 *PhysicsPUJointBase::getSFHiStop3(void) const
{
    return &_sfHiStop3;
}


SFReal32 *PhysicsPUJointBase::editSFLoStop3(void)
{
    editSField(LoStop3FieldMask);

    return &_sfLoStop3;
}

const SFReal32 *PhysicsPUJointBase::getSFLoStop3(void) const
{
    return &_sfLoStop3;
}


SFReal32 *PhysicsPUJointBase::editSFBounce3(void)
{
    editSField(Bounce3FieldMask);

    return &_sfBounce3;
}

const SFReal32 *PhysicsPUJointBase::getSFBounce3(void) const
{
    return &_sfBounce3;
}


SFReal32 *PhysicsPUJointBase::editSFCFM3(void)
{
    editSField(CFM3FieldMask);

    return &_sfCFM3;
}

const SFReal32 *PhysicsPUJointBase::getSFCFM3(void) const
{
    return &_sfCFM3;
}


SFReal32 *PhysicsPUJointBase::editSFStopERP3(void)
{
    editSField(StopERP3FieldMask);

    return &_sfStopERP3;
}

const SFReal32 *PhysicsPUJointBase::getSFStopERP3(void) const
{
    return &_sfStopERP3;
}


SFReal32 *PhysicsPUJointBase::editSFStopCFM3(void)
{
    editSField(StopCFM3FieldMask);

    return &_sfStopCFM3;
}

const SFReal32 *PhysicsPUJointBase::getSFStopCFM3(void) const
{
    return &_sfStopCFM3;
}






/*------------------------------ access -----------------------------------*/

UInt32 PhysicsPUJointBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        returnValue += _sfAnchor.getBinSize();
    }
    if(FieldBits::NoField != (Axis1FieldMask & whichField))
    {
        returnValue += _sfAxis1.getBinSize();
    }
    if(FieldBits::NoField != (Axis2FieldMask & whichField))
    {
        returnValue += _sfAxis2.getBinSize();
    }
    if(FieldBits::NoField != (Axis3FieldMask & whichField))
    {
        returnValue += _sfAxis3.getBinSize();
    }
    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        returnValue += _sfHiStop.getBinSize();
    }
    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        returnValue += _sfLoStop.getBinSize();
    }
    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        returnValue += _sfBounce.getBinSize();
    }
    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        returnValue += _sfCFM.getBinSize();
    }
    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        returnValue += _sfStopERP.getBinSize();
    }
    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        returnValue += _sfStopCFM.getBinSize();
    }
    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        returnValue += _sfHiStop2.getBinSize();
    }
    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        returnValue += _sfLoStop2.getBinSize();
    }
    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        returnValue += _sfBounce2.getBinSize();
    }
    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        returnValue += _sfCFM2.getBinSize();
    }
    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        returnValue += _sfStopERP2.getBinSize();
    }
    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        returnValue += _sfStopCFM2.getBinSize();
    }
    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
    {
        returnValue += _sfHiStop3.getBinSize();
    }
    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
    {
        returnValue += _sfLoStop3.getBinSize();
    }
    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
    {
        returnValue += _sfBounce3.getBinSize();
    }
    if(FieldBits::NoField != (CFM3FieldMask & whichField))
    {
        returnValue += _sfCFM3.getBinSize();
    }
    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
    {
        returnValue += _sfStopERP3.getBinSize();
    }
    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
    {
        returnValue += _sfStopCFM3.getBinSize();
    }

    return returnValue;
}

void PhysicsPUJointBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        _sfAnchor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Axis1FieldMask & whichField))
    {
        _sfAxis1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Axis2FieldMask & whichField))
    {
        _sfAxis2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Axis3FieldMask & whichField))
    {
        _sfAxis3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        _sfHiStop2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        _sfLoStop2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        _sfBounce2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        _sfCFM2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        _sfStopERP2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        _sfStopCFM2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
    {
        _sfHiStop3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
    {
        _sfLoStop3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
    {
        _sfBounce3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CFM3FieldMask & whichField))
    {
        _sfCFM3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
    {
        _sfStopERP3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
    {
        _sfStopCFM3.copyToBin(pMem);
    }
}

void PhysicsPUJointBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AnchorFieldMask & whichField))
    {
        _sfAnchor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Axis1FieldMask & whichField))
    {
        _sfAxis1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Axis2FieldMask & whichField))
    {
        _sfAxis2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Axis3FieldMask & whichField))
    {
        _sfAxis3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HiStopFieldMask & whichField))
    {
        _sfHiStop.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LoStopFieldMask & whichField))
    {
        _sfLoStop.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BounceFieldMask & whichField))
    {
        _sfBounce.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CFMFieldMask & whichField))
    {
        _sfCFM.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopERPFieldMask & whichField))
    {
        _sfStopERP.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopCFMFieldMask & whichField))
    {
        _sfStopCFM.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HiStop2FieldMask & whichField))
    {
        _sfHiStop2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LoStop2FieldMask & whichField))
    {
        _sfLoStop2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Bounce2FieldMask & whichField))
    {
        _sfBounce2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CFM2FieldMask & whichField))
    {
        _sfCFM2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopERP2FieldMask & whichField))
    {
        _sfStopERP2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopCFM2FieldMask & whichField))
    {
        _sfStopCFM2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HiStop3FieldMask & whichField))
    {
        _sfHiStop3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LoStop3FieldMask & whichField))
    {
        _sfLoStop3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Bounce3FieldMask & whichField))
    {
        _sfBounce3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CFM3FieldMask & whichField))
    {
        _sfCFM3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopERP3FieldMask & whichField))
    {
        _sfStopERP3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StopCFM3FieldMask & whichField))
    {
        _sfStopCFM3.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsPUJointTransitPtr PhysicsPUJointBase::createLocal(BitVector bFlags)
{
    PhysicsPUJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsPUJoint>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsPUJointTransitPtr PhysicsPUJointBase::createDependent(BitVector bFlags)
{
    PhysicsPUJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsPUJoint>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsPUJointTransitPtr PhysicsPUJointBase::create(void)
{
    PhysicsPUJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsPUJoint>(tmpPtr);
    }

    return fc;
}

PhysicsPUJoint *PhysicsPUJointBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsPUJoint *returnValue;

    newPtr<PhysicsPUJoint>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsPUJoint *PhysicsPUJointBase::createEmpty(void)
{
    PhysicsPUJoint *returnValue;

    newPtr<PhysicsPUJoint>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr PhysicsPUJointBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsPUJoint *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsPUJoint *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsPUJointBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsPUJoint *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsPUJoint *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsPUJointBase::shallowCopy(void) const
{
    PhysicsPUJoint *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsPUJoint *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

PhysicsPUJointBase::PhysicsPUJointBase(void) :
    Inherited(),
    _sfAnchor                 (),
    _sfAxis1                  (),
    _sfAxis2                  (),
    _sfAxis3                  (),
    _sfHiStop                 (),
    _sfLoStop                 (),
    _sfBounce                 (),
    _sfCFM                    (),
    _sfStopERP                (),
    _sfStopCFM                (),
    _sfHiStop2                (),
    _sfLoStop2                (),
    _sfBounce2                (),
    _sfCFM2                   (),
    _sfStopERP2               (),
    _sfStopCFM2               (),
    _sfHiStop3                (),
    _sfLoStop3                (),
    _sfBounce3                (),
    _sfCFM3                   (),
    _sfStopERP3               (),
    _sfStopCFM3               ()
{
}

PhysicsPUJointBase::PhysicsPUJointBase(const PhysicsPUJointBase &source) :
    Inherited(source),
    _sfAnchor                 (source._sfAnchor                 ),
    _sfAxis1                  (source._sfAxis1                  ),
    _sfAxis2                  (source._sfAxis2                  ),
    _sfAxis3                  (source._sfAxis3                  ),
    _sfHiStop                 (source._sfHiStop                 ),
    _sfLoStop                 (source._sfLoStop                 ),
    _sfBounce                 (source._sfBounce                 ),
    _sfCFM                    (source._sfCFM                    ),
    _sfStopERP                (source._sfStopERP                ),
    _sfStopCFM                (source._sfStopCFM                ),
    _sfHiStop2                (source._sfHiStop2                ),
    _sfLoStop2                (source._sfLoStop2                ),
    _sfBounce2                (source._sfBounce2                ),
    _sfCFM2                   (source._sfCFM2                   ),
    _sfStopERP2               (source._sfStopERP2               ),
    _sfStopCFM2               (source._sfStopCFM2               ),
    _sfHiStop3                (source._sfHiStop3                ),
    _sfLoStop3                (source._sfLoStop3                ),
    _sfBounce3                (source._sfBounce3                ),
    _sfCFM3                   (source._sfCFM3                   ),
    _sfStopERP3               (source._sfStopERP3               ),
    _sfStopCFM3               (source._sfStopCFM3               )
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsPUJointBase::~PhysicsPUJointBase(void)
{
}


GetFieldHandlePtr PhysicsPUJointBase::getHandleAnchor          (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfAnchor,
             this->getType().getFieldDesc(AnchorFieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleAnchor         (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfAnchor,
             this->getType().getFieldDesc(AnchorFieldId),
             this));


    editSField(AnchorFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleAxis1           (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfAxis1,
             this->getType().getFieldDesc(Axis1FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleAxis1          (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfAxis1,
             this->getType().getFieldDesc(Axis1FieldId),
             this));


    editSField(Axis1FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleAxis2           (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfAxis2,
             this->getType().getFieldDesc(Axis2FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleAxis2          (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfAxis2,
             this->getType().getFieldDesc(Axis2FieldId),
             this));


    editSField(Axis2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleAxis3           (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfAxis3,
             this->getType().getFieldDesc(Axis3FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleAxis3          (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfAxis3,
             this->getType().getFieldDesc(Axis3FieldId),
             this));


    editSField(Axis3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleHiStop          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHiStop,
             this->getType().getFieldDesc(HiStopFieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleHiStop         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHiStop,
             this->getType().getFieldDesc(HiStopFieldId),
             this));


    editSField(HiStopFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleLoStop          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLoStop,
             this->getType().getFieldDesc(LoStopFieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleLoStop         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLoStop,
             this->getType().getFieldDesc(LoStopFieldId),
             this));


    editSField(LoStopFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleBounce          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBounce,
             this->getType().getFieldDesc(BounceFieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleBounce         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBounce,
             this->getType().getFieldDesc(BounceFieldId),
             this));


    editSField(BounceFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleCFM             (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfCFM,
             this->getType().getFieldDesc(CFMFieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleCFM            (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfCFM,
             this->getType().getFieldDesc(CFMFieldId),
             this));


    editSField(CFMFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleStopERP         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopERP,
             this->getType().getFieldDesc(StopERPFieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleStopERP        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopERP,
             this->getType().getFieldDesc(StopERPFieldId),
             this));


    editSField(StopERPFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleStopCFM         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopCFM,
             this->getType().getFieldDesc(StopCFMFieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleStopCFM        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopCFM,
             this->getType().getFieldDesc(StopCFMFieldId),
             this));


    editSField(StopCFMFieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleHiStop2         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHiStop2,
             this->getType().getFieldDesc(HiStop2FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleHiStop2        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHiStop2,
             this->getType().getFieldDesc(HiStop2FieldId),
             this));


    editSField(HiStop2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleLoStop2         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLoStop2,
             this->getType().getFieldDesc(LoStop2FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleLoStop2        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLoStop2,
             this->getType().getFieldDesc(LoStop2FieldId),
             this));


    editSField(LoStop2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleBounce2         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBounce2,
             this->getType().getFieldDesc(Bounce2FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleBounce2        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBounce2,
             this->getType().getFieldDesc(Bounce2FieldId),
             this));


    editSField(Bounce2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleCFM2            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfCFM2,
             this->getType().getFieldDesc(CFM2FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleCFM2           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfCFM2,
             this->getType().getFieldDesc(CFM2FieldId),
             this));


    editSField(CFM2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleStopERP2        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopERP2,
             this->getType().getFieldDesc(StopERP2FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleStopERP2       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopERP2,
             this->getType().getFieldDesc(StopERP2FieldId),
             this));


    editSField(StopERP2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleStopCFM2        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopCFM2,
             this->getType().getFieldDesc(StopCFM2FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleStopCFM2       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopCFM2,
             this->getType().getFieldDesc(StopCFM2FieldId),
             this));


    editSField(StopCFM2FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleHiStop3         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHiStop3,
             this->getType().getFieldDesc(HiStop3FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleHiStop3        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHiStop3,
             this->getType().getFieldDesc(HiStop3FieldId),
             this));


    editSField(HiStop3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleLoStop3         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLoStop3,
             this->getType().getFieldDesc(LoStop3FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleLoStop3        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLoStop3,
             this->getType().getFieldDesc(LoStop3FieldId),
             this));


    editSField(LoStop3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleBounce3         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBounce3,
             this->getType().getFieldDesc(Bounce3FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleBounce3        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBounce3,
             this->getType().getFieldDesc(Bounce3FieldId),
             this));


    editSField(Bounce3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleCFM3            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfCFM3,
             this->getType().getFieldDesc(CFM3FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleCFM3           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfCFM3,
             this->getType().getFieldDesc(CFM3FieldId),
             this));


    editSField(CFM3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleStopERP3        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopERP3,
             this->getType().getFieldDesc(StopERP3FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleStopERP3       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopERP3,
             this->getType().getFieldDesc(StopERP3FieldId),
             this));


    editSField(StopERP3FieldMask);

    return returnValue;
}

GetFieldHandlePtr PhysicsPUJointBase::getHandleStopCFM3        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfStopCFM3,
             this->getType().getFieldDesc(StopCFM3FieldId),
             const_cast<PhysicsPUJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsPUJointBase::editHandleStopCFM3       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfStopCFM3,
             this->getType().getFieldDesc(StopCFM3FieldId),
             this));


    editSField(StopCFM3FieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void PhysicsPUJointBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsPUJoint *pThis = static_cast<PhysicsPUJoint *>(this);

    pThis->execSync(static_cast<PhysicsPUJoint *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsPUJointBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsPUJoint *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsPUJoint *>(pRefAspect),
                  dynamic_cast<const PhysicsPUJoint *>(this));

    return returnValue;
}
#endif

void PhysicsPUJointBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
