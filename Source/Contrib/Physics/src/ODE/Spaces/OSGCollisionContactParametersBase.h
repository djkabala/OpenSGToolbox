/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CollisionContactParameters
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOLLISIONCONTACTPARAMETERSBASE_H_
#define _OSGCOLLISIONCONTACTPARAMETERSBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribPhysicsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachmentContainer.h" // Parent

#include "OSGSysFields.h"               // Mode type

#include "OSGCollisionContactParametersFields.h"

OSG_BEGIN_NAMESPACE

class CollisionContactParameters;

//! \brief CollisionContactParameters Base Class.

class OSG_CONTRIBPHYSICS_DLLMAPPING CollisionContactParametersBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(CollisionContactParameters);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ModeFieldId = Inherited::NextFieldId,
        MuFieldId = ModeFieldId + 1,
        Mu2FieldId = MuFieldId + 1,
        BounceFieldId = Mu2FieldId + 1,
        BounceSpeedThresholdFieldId = BounceFieldId + 1,
        SoftCFMFieldId = BounceSpeedThresholdFieldId + 1,
        SoftERPFieldId = SoftCFMFieldId + 1,
        Motion1FieldId = SoftERPFieldId + 1,
        Motion2FieldId = Motion1FieldId + 1,
        MotionNFieldId = Motion2FieldId + 1,
        Slip1FieldId = MotionNFieldId + 1,
        Slip2FieldId = Slip1FieldId + 1,
        NextFieldId = Slip2FieldId + 1
    };

    static const OSG::BitVector ModeFieldMask =
        (TypeTraits<BitVector>::One << ModeFieldId);
    static const OSG::BitVector MuFieldMask =
        (TypeTraits<BitVector>::One << MuFieldId);
    static const OSG::BitVector Mu2FieldMask =
        (TypeTraits<BitVector>::One << Mu2FieldId);
    static const OSG::BitVector BounceFieldMask =
        (TypeTraits<BitVector>::One << BounceFieldId);
    static const OSG::BitVector BounceSpeedThresholdFieldMask =
        (TypeTraits<BitVector>::One << BounceSpeedThresholdFieldId);
    static const OSG::BitVector SoftCFMFieldMask =
        (TypeTraits<BitVector>::One << SoftCFMFieldId);
    static const OSG::BitVector SoftERPFieldMask =
        (TypeTraits<BitVector>::One << SoftERPFieldId);
    static const OSG::BitVector Motion1FieldMask =
        (TypeTraits<BitVector>::One << Motion1FieldId);
    static const OSG::BitVector Motion2FieldMask =
        (TypeTraits<BitVector>::One << Motion2FieldId);
    static const OSG::BitVector MotionNFieldMask =
        (TypeTraits<BitVector>::One << MotionNFieldId);
    static const OSG::BitVector Slip1FieldMask =
        (TypeTraits<BitVector>::One << Slip1FieldId);
    static const OSG::BitVector Slip2FieldMask =
        (TypeTraits<BitVector>::One << Slip2FieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFInt32           SFModeType;
    typedef SFReal32          SFMuType;
    typedef SFReal32          SFMu2Type;
    typedef SFReal32          SFBounceType;
    typedef SFReal32          SFBounceSpeedThresholdType;
    typedef SFReal32          SFSoftCFMType;
    typedef SFReal32          SFSoftERPType;
    typedef SFReal32          SFMotion1Type;
    typedef SFReal32          SFMotion2Type;
    typedef SFReal32          SFMotionNType;
    typedef SFReal32          SFSlip1Type;
    typedef SFReal32          SFSlip2Type;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFInt32             *editSFMode           (void);
            const SFInt32             *getSFMode            (void) const;

                  SFReal32            *editSFMu             (void);
            const SFReal32            *getSFMu              (void) const;

                  SFReal32            *editSFMu2            (void);
            const SFReal32            *getSFMu2             (void) const;

                  SFReal32            *editSFBounce         (void);
            const SFReal32            *getSFBounce          (void) const;

                  SFReal32            *editSFBounceSpeedThreshold(void);
            const SFReal32            *getSFBounceSpeedThreshold (void) const;

                  SFReal32            *editSFSoftCFM        (void);
            const SFReal32            *getSFSoftCFM         (void) const;

                  SFReal32            *editSFSoftERP        (void);
            const SFReal32            *getSFSoftERP         (void) const;

                  SFReal32            *editSFMotion1        (void);
            const SFReal32            *getSFMotion1         (void) const;

                  SFReal32            *editSFMotion2        (void);
            const SFReal32            *getSFMotion2         (void) const;

                  SFReal32            *editSFMotionN        (void);
            const SFReal32            *getSFMotionN         (void) const;

                  SFReal32            *editSFSlip1          (void);
            const SFReal32            *getSFSlip1           (void) const;

                  SFReal32            *editSFSlip2          (void);
            const SFReal32            *getSFSlip2           (void) const;


                  Int32               &editMode           (void);
                  Int32                getMode            (void) const;

                  Real32              &editMu             (void);
                  Real32               getMu              (void) const;

                  Real32              &editMu2            (void);
                  Real32               getMu2             (void) const;

                  Real32              &editBounce         (void);
                  Real32               getBounce          (void) const;

                  Real32              &editBounceSpeedThreshold(void);
                  Real32               getBounceSpeedThreshold (void) const;

                  Real32              &editSoftCFM        (void);
                  Real32               getSoftCFM         (void) const;

                  Real32              &editSoftERP        (void);
                  Real32               getSoftERP         (void) const;

                  Real32              &editMotion1        (void);
                  Real32               getMotion1         (void) const;

                  Real32              &editMotion2        (void);
                  Real32               getMotion2         (void) const;

                  Real32              &editMotionN        (void);
                  Real32               getMotionN         (void) const;

                  Real32              &editSlip1          (void);
                  Real32               getSlip1           (void) const;

                  Real32              &editSlip2          (void);
                  Real32               getSlip2           (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setMode           (const Int32 value);
            void setMu             (const Real32 value);
            void setMu2            (const Real32 value);
            void setBounce         (const Real32 value);
            void setBounceSpeedThreshold(const Real32 value);
            void setSoftCFM        (const Real32 value);
            void setSoftERP        (const Real32 value);
            void setMotion1        (const Real32 value);
            void setMotion2        (const Real32 value);
            void setMotionN        (const Real32 value);
            void setSlip1          (const Real32 value);
            void setSlip2          (const Real32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  CollisionContactParametersTransitPtr  create          (void);
    static  CollisionContactParameters           *createEmpty     (void);

    static  CollisionContactParametersTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  CollisionContactParameters            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  CollisionContactParametersTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFInt32           _sfMode;
    SFReal32          _sfMu;
    SFReal32          _sfMu2;
    SFReal32          _sfBounce;
    SFReal32          _sfBounceSpeedThreshold;
    SFReal32          _sfSoftCFM;
    SFReal32          _sfSoftERP;
    SFReal32          _sfMotion1;
    SFReal32          _sfMotion2;
    SFReal32          _sfMotionN;
    SFReal32          _sfSlip1;
    SFReal32          _sfSlip2;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    CollisionContactParametersBase(void);
    CollisionContactParametersBase(const CollisionContactParametersBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~CollisionContactParametersBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleMode            (void) const;
    EditFieldHandlePtr editHandleMode           (void);
    GetFieldHandlePtr  getHandleMu              (void) const;
    EditFieldHandlePtr editHandleMu             (void);
    GetFieldHandlePtr  getHandleMu2             (void) const;
    EditFieldHandlePtr editHandleMu2            (void);
    GetFieldHandlePtr  getHandleBounce          (void) const;
    EditFieldHandlePtr editHandleBounce         (void);
    GetFieldHandlePtr  getHandleBounceSpeedThreshold (void) const;
    EditFieldHandlePtr editHandleBounceSpeedThreshold(void);
    GetFieldHandlePtr  getHandleSoftCFM         (void) const;
    EditFieldHandlePtr editHandleSoftCFM        (void);
    GetFieldHandlePtr  getHandleSoftERP         (void) const;
    EditFieldHandlePtr editHandleSoftERP        (void);
    GetFieldHandlePtr  getHandleMotion1         (void) const;
    EditFieldHandlePtr editHandleMotion1        (void);
    GetFieldHandlePtr  getHandleMotion2         (void) const;
    EditFieldHandlePtr editHandleMotion2        (void);
    GetFieldHandlePtr  getHandleMotionN         (void) const;
    EditFieldHandlePtr editHandleMotionN        (void);
    GetFieldHandlePtr  getHandleSlip1           (void) const;
    EditFieldHandlePtr editHandleSlip1          (void);
    GetFieldHandlePtr  getHandleSlip2           (void) const;
    EditFieldHandlePtr editHandleSlip2          (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      CollisionContactParametersBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const CollisionContactParametersBase &source);
};

typedef CollisionContactParametersBase *CollisionContactParametersBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCOLLISIONCONTACTPARAMETERSBASE_H_ */
