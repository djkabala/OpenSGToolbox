/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com),  Behboud Kalantary         *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PhysicsSweepAndPruneSpace!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"


#include "ode/collision_space.h"          // AxisOrder default header


#include "OSGPhysicsSweepAndPruneSpaceBase.h"
#include "OSGPhysicsSweepAndPruneSpace.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PhysicsSweepAndPruneSpace
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Int32           PhysicsSweepAndPruneSpaceBase::_sfAxisOrder
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PhysicsSweepAndPruneSpace *>::_type("PhysicsSweepAndPruneSpacePtr", "PhysicsSpacePtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PhysicsSweepAndPruneSpace *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PhysicsSweepAndPruneSpace *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           PhysicsSweepAndPruneSpace *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PhysicsSweepAndPruneSpaceBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "axisOrder",
        "",
        AxisOrderFieldId, AxisOrderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PhysicsSweepAndPruneSpace::editHandleAxisOrder),
        static_cast<FieldGetMethodSig >(&PhysicsSweepAndPruneSpace::getHandleAxisOrder));

    oType.addInitialDesc(pDesc);
}


PhysicsSweepAndPruneSpaceBase::TypeObject PhysicsSweepAndPruneSpaceBase::_type(
    PhysicsSweepAndPruneSpaceBase::getClassname(),
    Inherited::getClassname(),
    "PhysicsGeom",
    0,
    reinterpret_cast<PrototypeCreateF>(&PhysicsSweepAndPruneSpaceBase::createEmptyLocal),
    PhysicsSweepAndPruneSpace::initMethod,
    PhysicsSweepAndPruneSpace::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&PhysicsSweepAndPruneSpace::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PhysicsSweepAndPruneSpace\"\n"
    "\tparent=\"PhysicsSpace\"\n"
    "    library=\"ContribPhysics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    group=\"PhysicsGeom\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com),  Behboud Kalantary         \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"axisOrder\"\n"
    "\t\ttype=\"Int32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"dSAP_AXES_XYZ\"\n"
    "\t\tdefaultHeader=\"ode/collision_space.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PhysicsSweepAndPruneSpaceBase::getType(void)
{
    return _type;
}

const FieldContainerType &PhysicsSweepAndPruneSpaceBase::getType(void) const
{
    return _type;
}

UInt32 PhysicsSweepAndPruneSpaceBase::getContainerSize(void) const
{
    return sizeof(PhysicsSweepAndPruneSpace);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *PhysicsSweepAndPruneSpaceBase::editSFAxisOrder(void)
{
    editSField(AxisOrderFieldMask);

    return &_sfAxisOrder;
}

const SFInt32 *PhysicsSweepAndPruneSpaceBase::getSFAxisOrder(void) const
{
    return &_sfAxisOrder;
}






/*------------------------------ access -----------------------------------*/

UInt32 PhysicsSweepAndPruneSpaceBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AxisOrderFieldMask & whichField))
    {
        returnValue += _sfAxisOrder.getBinSize();
    }

    return returnValue;
}

void PhysicsSweepAndPruneSpaceBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AxisOrderFieldMask & whichField))
    {
        _sfAxisOrder.copyToBin(pMem);
    }
}

void PhysicsSweepAndPruneSpaceBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AxisOrderFieldMask & whichField))
    {
        _sfAxisOrder.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PhysicsSweepAndPruneSpaceTransitPtr PhysicsSweepAndPruneSpaceBase::createLocal(BitVector bFlags)
{
    PhysicsSweepAndPruneSpaceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PhysicsSweepAndPruneSpace>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PhysicsSweepAndPruneSpaceTransitPtr PhysicsSweepAndPruneSpaceBase::createDependent(BitVector bFlags)
{
    PhysicsSweepAndPruneSpaceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PhysicsSweepAndPruneSpace>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PhysicsSweepAndPruneSpaceTransitPtr PhysicsSweepAndPruneSpaceBase::create(void)
{
    PhysicsSweepAndPruneSpaceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PhysicsSweepAndPruneSpace>(tmpPtr);
    }

    return fc;
}

PhysicsSweepAndPruneSpace *PhysicsSweepAndPruneSpaceBase::createEmptyLocal(BitVector bFlags)
{
    PhysicsSweepAndPruneSpace *returnValue;

    newPtr<PhysicsSweepAndPruneSpace>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PhysicsSweepAndPruneSpace *PhysicsSweepAndPruneSpaceBase::createEmpty(void)
{
    PhysicsSweepAndPruneSpace *returnValue;

    newPtr<PhysicsSweepAndPruneSpace>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr PhysicsSweepAndPruneSpaceBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PhysicsSweepAndPruneSpace *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsSweepAndPruneSpace *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsSweepAndPruneSpaceBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PhysicsSweepAndPruneSpace *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PhysicsSweepAndPruneSpace *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PhysicsSweepAndPruneSpaceBase::shallowCopy(void) const
{
    PhysicsSweepAndPruneSpace *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PhysicsSweepAndPruneSpace *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

PhysicsSweepAndPruneSpaceBase::PhysicsSweepAndPruneSpaceBase(void) :
    Inherited(),
    _sfAxisOrder              (Int32(dSAP_AXES_XYZ))
{
}

PhysicsSweepAndPruneSpaceBase::PhysicsSweepAndPruneSpaceBase(const PhysicsSweepAndPruneSpaceBase &source) :
    Inherited(source),
    _sfAxisOrder              (source._sfAxisOrder              )
{
}


/*-------------------------- destructors ----------------------------------*/

PhysicsSweepAndPruneSpaceBase::~PhysicsSweepAndPruneSpaceBase(void)
{
}


GetFieldHandlePtr PhysicsSweepAndPruneSpaceBase::getHandleAxisOrder       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfAxisOrder,
             this->getType().getFieldDesc(AxisOrderFieldId),
             const_cast<PhysicsSweepAndPruneSpaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PhysicsSweepAndPruneSpaceBase::editHandleAxisOrder      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfAxisOrder,
             this->getType().getFieldDesc(AxisOrderFieldId),
             this));


    editSField(AxisOrderFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void PhysicsSweepAndPruneSpaceBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PhysicsSweepAndPruneSpace *pThis = static_cast<PhysicsSweepAndPruneSpace *>(this);

    pThis->execSync(static_cast<PhysicsSweepAndPruneSpace *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PhysicsSweepAndPruneSpaceBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PhysicsSweepAndPruneSpace *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PhysicsSweepAndPruneSpace *>(pRefAspect),
                  dynamic_cast<const PhysicsSweepAndPruneSpace *>(this));

    return returnValue;
}
#endif

void PhysicsSweepAndPruneSpaceBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
