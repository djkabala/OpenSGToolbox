/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AbstractTableDOM!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGCell.h"                    // RootCell Class

#include "OSGAbstractTableDOMBase.h"
#include "OSGAbstractTableDOM.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AbstractTableDOM
    UI AbstractTableDOM.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Cell *          AbstractTableDOMBase::_sfRootCell
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AbstractTableDOM *>::_type("AbstractTableDOMPtr", "TableDOMPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(AbstractTableDOM *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AbstractTableDOM *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AbstractTableDOM *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AbstractTableDOMBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecCellPtr::Description(
        SFUnrecCellPtr::getClassType(),
        "RootCell",
        "",
        RootCellFieldId, RootCellFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AbstractTableDOM::editHandleRootCell),
        static_cast<FieldGetMethodSig >(&AbstractTableDOM::getHandleRootCell));

    oType.addInitialDesc(pDesc);
}


AbstractTableDOMBase::TypeObject AbstractTableDOMBase::_type(
    AbstractTableDOMBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    AbstractTableDOM::initMethod,
    AbstractTableDOM::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&AbstractTableDOM::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"AbstractTableDOM\"\n"
    "\tparent=\"TableDOM\"\n"
    "    library=\"ContribTableDom\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"false\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI AbstractTableDOM.\n"
    "\t<Field\n"
    "\t\tname=\"RootCell\"\n"
    "\t\ttype=\"Cell\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI AbstractTableDOM.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AbstractTableDOMBase::getType(void)
{
    return _type;
}

const FieldContainerType &AbstractTableDOMBase::getType(void) const
{
    return _type;
}

UInt32 AbstractTableDOMBase::getContainerSize(void) const
{
    return sizeof(AbstractTableDOM);
}

/*------------------------- decorator get ------------------------------*/


//! Get the AbstractTableDOM::_sfRootCell field.
const SFUnrecCellPtr *AbstractTableDOMBase::getSFRootCell(void) const
{
    return &_sfRootCell;
}

SFUnrecCellPtr      *AbstractTableDOMBase::editSFRootCell       (void)
{
    editSField(RootCellFieldMask);

    return &_sfRootCell;
}





/*------------------------------ access -----------------------------------*/

UInt32 AbstractTableDOMBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RootCellFieldMask & whichField))
    {
        returnValue += _sfRootCell.getBinSize();
    }

    return returnValue;
}

void AbstractTableDOMBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RootCellFieldMask & whichField))
    {
        _sfRootCell.copyToBin(pMem);
    }
}

void AbstractTableDOMBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RootCellFieldMask & whichField))
    {
        _sfRootCell.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

AbstractTableDOMBase::AbstractTableDOMBase(void) :
    Inherited(),
    _sfRootCell               (NULL)
{
}

AbstractTableDOMBase::AbstractTableDOMBase(const AbstractTableDOMBase &source) :
    Inherited(source),
    _sfRootCell               (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

AbstractTableDOMBase::~AbstractTableDOMBase(void)
{
}

void AbstractTableDOMBase::onCreate(const AbstractTableDOM *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AbstractTableDOM *pThis = static_cast<AbstractTableDOM *>(this);

        pThis->setRootCell(source->getRootCell());
    }
}

GetFieldHandlePtr AbstractTableDOMBase::getHandleRootCell        (void) const
{
    SFUnrecCellPtr::GetHandlePtr returnValue(
        new  SFUnrecCellPtr::GetHandle(
             &_sfRootCell,
             this->getType().getFieldDesc(RootCellFieldId),
             const_cast<AbstractTableDOMBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AbstractTableDOMBase::editHandleRootCell       (void)
{
    SFUnrecCellPtr::EditHandlePtr returnValue(
        new  SFUnrecCellPtr::EditHandle(
             &_sfRootCell,
             this->getType().getFieldDesc(RootCellFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&AbstractTableDOM::setRootCell,
                    static_cast<AbstractTableDOM *>(this), _1));

    editSField(RootCellFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void AbstractTableDOMBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AbstractTableDOM *pThis = static_cast<AbstractTableDOM *>(this);

    pThis->execSync(static_cast<AbstractTableDOM *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void AbstractTableDOMBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AbstractTableDOM *>(this)->setRootCell(NULL);


}


OSG_END_NAMESPACE
