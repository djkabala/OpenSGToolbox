/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SearchWindowEvent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGSearchWindowEventBase.h"
#include "OSGSearchWindowEvent.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SearchWindowEvent
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt8           SearchWindowEventBase::_sfOption
    
*/

/*! \var std::string     SearchWindowEventBase::_sfSearchText
    
*/

/*! \var std::string     SearchWindowEventBase::_sfReplaceText
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SearchWindowEvent *>::_type("SearchWindowEventPtr", "EventPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SearchWindowEvent *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SearchWindowEvent *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SearchWindowEvent *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SearchWindowEventBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "Option",
        "",
        OptionFieldId, OptionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SearchWindowEvent::editHandleOption),
        static_cast<FieldGetMethodSig >(&SearchWindowEvent::getHandleOption));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "SearchText",
        "",
        SearchTextFieldId, SearchTextFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SearchWindowEvent::editHandleSearchText),
        static_cast<FieldGetMethodSig >(&SearchWindowEvent::getHandleSearchText));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "ReplaceText",
        "",
        ReplaceTextFieldId, ReplaceTextFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SearchWindowEvent::editHandleReplaceText),
        static_cast<FieldGetMethodSig >(&SearchWindowEvent::getHandleReplaceText));

    oType.addInitialDesc(pDesc);
}


SearchWindowEventBase::TypeObject SearchWindowEventBase::_type(
    SearchWindowEventBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SearchWindowEventBase::createEmptyLocal),
    SearchWindowEvent::initMethod,
    SearchWindowEvent::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SearchWindowEvent::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SearchWindowEvent\"\n"
    "\tparent=\"Event\"\n"
    "\tlibrary=\"ContribTextDom\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    \tsystemcomponent=\"true\"\n"
    "    \tparentsystemcomponent=\"true\"\n"
    "    \tdecoratable=\"false\"\n"
    "    \tuseLocalIncludes=\"false\"\n"
    "    \tisNodeCore=\"false\"\n"
    "    \tauthors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Option\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"SearchWindowEvent::DIALOG_OPTION_SEARCH\"\n"
    "        \tpublicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"SearchText\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ReplaceText\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t        publicRead=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SearchWindowEventBase::getType(void)
{
    return _type;
}

const FieldContainerType &SearchWindowEventBase::getType(void) const
{
    return _type;
}

UInt32 SearchWindowEventBase::getContainerSize(void) const
{
    return sizeof(SearchWindowEvent);
}

/*------------------------- decorator get ------------------------------*/


SFUInt8 *SearchWindowEventBase::editSFOption(void)
{
    editSField(OptionFieldMask);

    return &_sfOption;
}

const SFUInt8 *SearchWindowEventBase::getSFOption(void) const
{
    return &_sfOption;
}


SFString *SearchWindowEventBase::editSFSearchText(void)
{
    editSField(SearchTextFieldMask);

    return &_sfSearchText;
}

const SFString *SearchWindowEventBase::getSFSearchText(void) const
{
    return &_sfSearchText;
}


SFString *SearchWindowEventBase::editSFReplaceText(void)
{
    editSField(ReplaceTextFieldMask);

    return &_sfReplaceText;
}

const SFString *SearchWindowEventBase::getSFReplaceText(void) const
{
    return &_sfReplaceText;
}






/*------------------------------ access -----------------------------------*/

UInt32 SearchWindowEventBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OptionFieldMask & whichField))
    {
        returnValue += _sfOption.getBinSize();
    }
    if(FieldBits::NoField != (SearchTextFieldMask & whichField))
    {
        returnValue += _sfSearchText.getBinSize();
    }
    if(FieldBits::NoField != (ReplaceTextFieldMask & whichField))
    {
        returnValue += _sfReplaceText.getBinSize();
    }

    return returnValue;
}

void SearchWindowEventBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OptionFieldMask & whichField))
    {
        _sfOption.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SearchTextFieldMask & whichField))
    {
        _sfSearchText.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ReplaceTextFieldMask & whichField))
    {
        _sfReplaceText.copyToBin(pMem);
    }
}

void SearchWindowEventBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OptionFieldMask & whichField))
    {
        _sfOption.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SearchTextFieldMask & whichField))
    {
        _sfSearchText.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ReplaceTextFieldMask & whichField))
    {
        _sfReplaceText.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SearchWindowEventTransitPtr SearchWindowEventBase::createLocal(BitVector bFlags)
{
    SearchWindowEventTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SearchWindowEvent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SearchWindowEventTransitPtr SearchWindowEventBase::createDependent(BitVector bFlags)
{
    SearchWindowEventTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SearchWindowEvent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SearchWindowEventTransitPtr SearchWindowEventBase::create(void)
{
    SearchWindowEventTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SearchWindowEvent>(tmpPtr);
    }

    return fc;
}

SearchWindowEvent *SearchWindowEventBase::createEmptyLocal(BitVector bFlags)
{
    SearchWindowEvent *returnValue;

    newPtr<SearchWindowEvent>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SearchWindowEvent *SearchWindowEventBase::createEmpty(void)
{
    SearchWindowEvent *returnValue;

    newPtr<SearchWindowEvent>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SearchWindowEventBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SearchWindowEvent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SearchWindowEvent *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SearchWindowEventBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SearchWindowEvent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SearchWindowEvent *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SearchWindowEventBase::shallowCopy(void) const
{
    SearchWindowEvent *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SearchWindowEvent *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SearchWindowEventBase::SearchWindowEventBase(void) :
    Inherited(),
    _sfOption                 (UInt8(SearchWindowEvent::DIALOG_OPTION_SEARCH)),
    _sfSearchText             (),
    _sfReplaceText            ()
{
}

SearchWindowEventBase::SearchWindowEventBase(const SearchWindowEventBase &source) :
    Inherited(source),
    _sfOption                 (source._sfOption                 ),
    _sfSearchText             (source._sfSearchText             ),
    _sfReplaceText            (source._sfReplaceText            )
{
}


/*-------------------------- destructors ----------------------------------*/

SearchWindowEventBase::~SearchWindowEventBase(void)
{
}


GetFieldHandlePtr SearchWindowEventBase::getHandleOption          (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfOption,
             this->getType().getFieldDesc(OptionFieldId),
             const_cast<SearchWindowEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SearchWindowEventBase::editHandleOption         (void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfOption,
             this->getType().getFieldDesc(OptionFieldId),
             this));


    editSField(OptionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SearchWindowEventBase::getHandleSearchText      (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfSearchText,
             this->getType().getFieldDesc(SearchTextFieldId),
             const_cast<SearchWindowEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SearchWindowEventBase::editHandleSearchText     (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfSearchText,
             this->getType().getFieldDesc(SearchTextFieldId),
             this));


    editSField(SearchTextFieldMask);

    return returnValue;
}

GetFieldHandlePtr SearchWindowEventBase::getHandleReplaceText     (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfReplaceText,
             this->getType().getFieldDesc(ReplaceTextFieldId),
             const_cast<SearchWindowEventBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SearchWindowEventBase::editHandleReplaceText    (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfReplaceText,
             this->getType().getFieldDesc(ReplaceTextFieldId),
             this));


    editSField(ReplaceTextFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SearchWindowEventBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SearchWindowEvent *pThis = static_cast<SearchWindowEvent *>(this);

    pThis->execSync(static_cast<SearchWindowEvent *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SearchWindowEventBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SearchWindowEvent *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SearchWindowEvent *>(pRefAspect),
                  dynamic_cast<const SearchWindowEvent *>(this));

    return returnValue;
}
#endif

void SearchWindowEventBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
