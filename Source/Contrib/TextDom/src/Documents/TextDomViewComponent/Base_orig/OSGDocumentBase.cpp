/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Document!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"




#include "OSGDocumentBase.h"
#include "OSGDocument.h"

#include <boost/bind.hpp>

#include "OSGEvent.h"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Document
    UI Document.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Document *>::_type("DocumentPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Document *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Document *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Document *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DocumentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;

    pDesc = new SFEventProducerPtr::Description(
        SFEventProducerPtr::getClassType(),
        "EventProducer",
        "Event Producer",
        EventProducerFieldId,EventProducerFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&Document::invalidEditField),
        static_cast     <FieldGetMethodSig >(&Document::invalidGetField));

    oType.addInitialDesc(pDesc);
}


DocumentBase::TypeObject DocumentBase::_type(
    DocumentBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    Document::initMethod,
    Document::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Document::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Document\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"ContribTextDom\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI Document.\n"
    " <ProducedMethod\n"
    "name=\"ChangedUpdate\"\n"
    "type=\"DocumentEventPtr\"\n"
    ">\n"
    "</ProducedMethod>\n"
    "<ProducedMethod\n"
    "name=\"InsertUpdate\"\n"
    "type=\"DocumentEventPtr\"\n"
    ">\n"
    "</ProducedMethod>\n"
    "<ProducedMethod\n"
    "name=\"RemoveUpdate\"\n"
    "type=\"DocumentEventPtr\"\n"
    ">\n"
    "</ProducedMethod>\n"
    "<ProducedMethod\n"
    "name=\"UndoableEditHappened\"\n"
    "type=\"UndoableEditEventPtr\"\n"
    ">\n"
    "</ProducedMethod> \n"
    "\n"
    "</FieldContainer>\n",
    "UI Document.\n"
    );

//! Document Produced Methods

MethodDescription *DocumentBase::_methodDesc[] =
{
    new MethodDescription("ChangedUpdate", 
                    "",
                     ChangedUpdateMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("InsertUpdate", 
                    "",
                     InsertUpdateMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("RemoveUpdate", 
                    "",
                     RemoveUpdateMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod()),
    new MethodDescription("UndoableEditHappened", 
                    "",
                     UndoableEditHappenedMethodId, 
                     SFUnrecEventPtr::getClassType(),
                     FunctorAccessMethod())
};

EventProducerType DocumentBase::_producerType(
    "DocumentProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _methodDesc,
    sizeof(_methodDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &DocumentBase::getType(void)
{
    return _type;
}

const FieldContainerType &DocumentBase::getType(void) const
{
    return _type;
}

const EventProducerType &DocumentBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 DocumentBase::getContainerSize(void) const
{
    return sizeof(Document);
}

/*------------------------- decorator get ------------------------------*/






/*------------------------------ access -----------------------------------*/

UInt32 DocumentBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        returnValue += _sfEventProducer.getBinSize();
    }

    return returnValue;
}

void DocumentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyToBin(pMem);
    }
}

void DocumentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

DocumentBase::DocumentBase(void) :
    _Producer(&getProducerType()),
    Inherited(),
    _sfEventProducer(&_Producer)
{
}

DocumentBase::DocumentBase(const DocumentBase &source) :
    _Producer(&source.getProducerType()),
    Inherited(source),
    _sfEventProducer(&_Producer)
{
}


/*-------------------------- destructors ----------------------------------*/

DocumentBase::~DocumentBase(void)
{
}



#ifdef OSG_MT_CPTR_ASPECT
void DocumentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Document *pThis = static_cast<Document *>(this);

    pThis->execSync(static_cast<Document *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void DocumentBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
