/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ImageComponent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGTextureBaseChunk.h"        // Texture Class
#include "OSGTextureTransformChunk.h"   // Transformation Class

#include "OSGImageComponentBase.h"
#include "OSGImageComponent.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ImageComponent
    A UI Button.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TextureBaseChunk * ImageComponentBase::_sfTexture
    
*/

/*! \var TextureBaseChunk * ImageComponentBase::_sfRolloverTexture
    
*/

/*! \var TextureBaseChunk * ImageComponentBase::_sfDisabledTexture
    
*/

/*! \var TextureBaseChunk * ImageComponentBase::_sfFocusedTexture
    
*/

/*! \var TextureTransformChunk * ImageComponentBase::_sfTransformation
    
*/

/*! \var Color4f         ImageComponentBase::_sfColor
    
*/

/*! \var UInt32          ImageComponentBase::_sfScale
    
*/

/*! \var Vec2f           ImageComponentBase::_sfScaleAbsoluteSize
    
*/

/*! \var Vec2f           ImageComponentBase::_sfAlignment
    
*/

/*! \var Vec4f           ImageComponentBase::_sfImageClippingOffsets
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ImageComponent *>::_type("ImageComponentPtr", "ComponentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ImageComponent *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ImageComponent *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ImageComponent *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ImageComponentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "Texture",
        "",
        TextureFieldId, TextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleTexture),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "RolloverTexture",
        "",
        RolloverTextureFieldId, RolloverTextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleRolloverTexture),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleRolloverTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "DisabledTexture",
        "",
        DisabledTextureFieldId, DisabledTextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleDisabledTexture),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleDisabledTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "FocusedTexture",
        "",
        FocusedTextureFieldId, FocusedTextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleFocusedTexture),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleFocusedTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureTransformChunkPtr::Description(
        SFUnrecTextureTransformChunkPtr::getClassType(),
        "Transformation",
        "",
        TransformationFieldId, TransformationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleTransformation),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleTransformation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color",
        "",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleColor),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Scale",
        "",
        ScaleFieldId, ScaleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleScale),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "ScaleAbsoluteSize",
        "",
        ScaleAbsoluteSizeFieldId, ScaleAbsoluteSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleScaleAbsoluteSize),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleScaleAbsoluteSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "Alignment",
        "",
        AlignmentFieldId, AlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleAlignment),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleAlignment));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec4f::Description(
        SFVec4f::getClassType(),
        "ImageClippingOffsets",
        "",
        ImageClippingOffsetsFieldId, ImageClippingOffsetsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageComponent::editHandleImageClippingOffsets),
        static_cast<FieldGetMethodSig >(&ImageComponent::getHandleImageClippingOffsets));

    oType.addInitialDesc(pDesc);
}


ImageComponentBase::TypeObject ImageComponentBase::_type(
    ImageComponentBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ImageComponentBase::createEmptyLocal),
    ImageComponent::initMethod,
    ImageComponent::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ImageComponent::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ImageComponent\"\n"
    "\tparent=\"Component\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI Button.\n"
    "\t<Field\n"
    "\t\tname=\"Texture\"\n"
    "\t\ttype=\"TextureBaseChunk\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"RolloverTexture\"\n"
    "\t\ttype=\"TextureBaseChunk\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"DisabledTexture\"\n"
    "\t\ttype=\"TextureBaseChunk\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedTexture\"\n"
    "\t\ttype=\"TextureBaseChunk\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Transformation\"\n"
    "\t\ttype=\"TextureTransformChunk\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f,1.0f,1.0f,1.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Scale\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"ImageComponent::SCALE_NONE\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ScaleAbsoluteSize\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0f,1.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Alignment\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5f,0.5f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ImageClippingOffsets\"\n"
    "\t\ttype=\"Vec4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f,0.0f,0.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI Button.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ImageComponentBase::getType(void)
{
    return _type;
}

const FieldContainerType &ImageComponentBase::getType(void) const
{
    return _type;
}

UInt32 ImageComponentBase::getContainerSize(void) const
{
    return sizeof(ImageComponent);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ImageComponent::_sfTexture field.
const SFUnrecTextureBaseChunkPtr *ImageComponentBase::getSFTexture(void) const
{
    return &_sfTexture;
}

SFUnrecTextureBaseChunkPtr *ImageComponentBase::editSFTexture        (void)
{
    editSField(TextureFieldMask);

    return &_sfTexture;
}

//! Get the ImageComponent::_sfRolloverTexture field.
const SFUnrecTextureBaseChunkPtr *ImageComponentBase::getSFRolloverTexture(void) const
{
    return &_sfRolloverTexture;
}

SFUnrecTextureBaseChunkPtr *ImageComponentBase::editSFRolloverTexture(void)
{
    editSField(RolloverTextureFieldMask);

    return &_sfRolloverTexture;
}

//! Get the ImageComponent::_sfDisabledTexture field.
const SFUnrecTextureBaseChunkPtr *ImageComponentBase::getSFDisabledTexture(void) const
{
    return &_sfDisabledTexture;
}

SFUnrecTextureBaseChunkPtr *ImageComponentBase::editSFDisabledTexture(void)
{
    editSField(DisabledTextureFieldMask);

    return &_sfDisabledTexture;
}

//! Get the ImageComponent::_sfFocusedTexture field.
const SFUnrecTextureBaseChunkPtr *ImageComponentBase::getSFFocusedTexture(void) const
{
    return &_sfFocusedTexture;
}

SFUnrecTextureBaseChunkPtr *ImageComponentBase::editSFFocusedTexture (void)
{
    editSField(FocusedTextureFieldMask);

    return &_sfFocusedTexture;
}

//! Get the ImageComponent::_sfTransformation field.
const SFUnrecTextureTransformChunkPtr *ImageComponentBase::getSFTransformation(void) const
{
    return &_sfTransformation;
}

SFUnrecTextureTransformChunkPtr *ImageComponentBase::editSFTransformation (void)
{
    editSField(TransformationFieldMask);

    return &_sfTransformation;
}

SFColor4f *ImageComponentBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *ImageComponentBase::getSFColor(void) const
{
    return &_sfColor;
}


SFUInt32 *ImageComponentBase::editSFScale(void)
{
    editSField(ScaleFieldMask);

    return &_sfScale;
}

const SFUInt32 *ImageComponentBase::getSFScale(void) const
{
    return &_sfScale;
}


SFVec2f *ImageComponentBase::editSFScaleAbsoluteSize(void)
{
    editSField(ScaleAbsoluteSizeFieldMask);

    return &_sfScaleAbsoluteSize;
}

const SFVec2f *ImageComponentBase::getSFScaleAbsoluteSize(void) const
{
    return &_sfScaleAbsoluteSize;
}


SFVec2f *ImageComponentBase::editSFAlignment(void)
{
    editSField(AlignmentFieldMask);

    return &_sfAlignment;
}

const SFVec2f *ImageComponentBase::getSFAlignment(void) const
{
    return &_sfAlignment;
}


SFVec4f *ImageComponentBase::editSFImageClippingOffsets(void)
{
    editSField(ImageClippingOffsetsFieldMask);

    return &_sfImageClippingOffsets;
}

const SFVec4f *ImageComponentBase::getSFImageClippingOffsets(void) const
{
    return &_sfImageClippingOffsets;
}






/*------------------------------ access -----------------------------------*/

UInt32 ImageComponentBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        returnValue += _sfTexture.getBinSize();
    }
    if(FieldBits::NoField != (RolloverTextureFieldMask & whichField))
    {
        returnValue += _sfRolloverTexture.getBinSize();
    }
    if(FieldBits::NoField != (DisabledTextureFieldMask & whichField))
    {
        returnValue += _sfDisabledTexture.getBinSize();
    }
    if(FieldBits::NoField != (FocusedTextureFieldMask & whichField))
    {
        returnValue += _sfFocusedTexture.getBinSize();
    }
    if(FieldBits::NoField != (TransformationFieldMask & whichField))
    {
        returnValue += _sfTransformation.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        returnValue += _sfScale.getBinSize();
    }
    if(FieldBits::NoField != (ScaleAbsoluteSizeFieldMask & whichField))
    {
        returnValue += _sfScaleAbsoluteSize.getBinSize();
    }
    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
    {
        returnValue += _sfAlignment.getBinSize();
    }
    if(FieldBits::NoField != (ImageClippingOffsetsFieldMask & whichField))
    {
        returnValue += _sfImageClippingOffsets.getBinSize();
    }

    return returnValue;
}

void ImageComponentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        _sfTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RolloverTextureFieldMask & whichField))
    {
        _sfRolloverTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisabledTextureFieldMask & whichField))
    {
        _sfDisabledTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedTextureFieldMask & whichField))
    {
        _sfFocusedTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransformationFieldMask & whichField))
    {
        _sfTransformation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleAbsoluteSizeFieldMask & whichField))
    {
        _sfScaleAbsoluteSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
    {
        _sfAlignment.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ImageClippingOffsetsFieldMask & whichField))
    {
        _sfImageClippingOffsets.copyToBin(pMem);
    }
}

void ImageComponentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        _sfTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RolloverTextureFieldMask & whichField))
    {
        _sfRolloverTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisabledTextureFieldMask & whichField))
    {
        _sfDisabledTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedTextureFieldMask & whichField))
    {
        _sfFocusedTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransformationFieldMask & whichField))
    {
        _sfTransformation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleAbsoluteSizeFieldMask & whichField))
    {
        _sfScaleAbsoluteSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
    {
        _sfAlignment.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ImageClippingOffsetsFieldMask & whichField))
    {
        _sfImageClippingOffsets.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ImageComponentTransitPtr ImageComponentBase::createLocal(BitVector bFlags)
{
    ImageComponentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ImageComponent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ImageComponentTransitPtr ImageComponentBase::createDependent(BitVector bFlags)
{
    ImageComponentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ImageComponent>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ImageComponentTransitPtr ImageComponentBase::create(void)
{
    ImageComponentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ImageComponent>(tmpPtr);
    }

    return fc;
}

ImageComponent *ImageComponentBase::createEmptyLocal(BitVector bFlags)
{
    ImageComponent *returnValue;

    newPtr<ImageComponent>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ImageComponent *ImageComponentBase::createEmpty(void)
{
    ImageComponent *returnValue;

    newPtr<ImageComponent>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ImageComponentBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ImageComponent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ImageComponent *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ImageComponentBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ImageComponent *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ImageComponent *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ImageComponentBase::shallowCopy(void) const
{
    ImageComponent *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ImageComponent *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ImageComponentBase::ImageComponentBase(void) :
    Inherited(),
    _sfTexture                (NULL),
    _sfRolloverTexture        (NULL),
    _sfDisabledTexture        (NULL),
    _sfFocusedTexture         (NULL),
    _sfTransformation         (NULL),
    _sfColor                  (Color4f(1.0f,1.0f,1.0f,1.0f)),
    _sfScale                  (UInt32(ImageComponent::SCALE_NONE)),
    _sfScaleAbsoluteSize      (Vec2f(1.0f,1.0f)),
    _sfAlignment              (Vec2f(0.5f,0.5f)),
    _sfImageClippingOffsets   (Vec4f(0.0f,0.0f,0.0f,0.0f))
{
}

ImageComponentBase::ImageComponentBase(const ImageComponentBase &source) :
    Inherited(source),
    _sfTexture                (NULL),
    _sfRolloverTexture        (NULL),
    _sfDisabledTexture        (NULL),
    _sfFocusedTexture         (NULL),
    _sfTransformation         (NULL),
    _sfColor                  (source._sfColor                  ),
    _sfScale                  (source._sfScale                  ),
    _sfScaleAbsoluteSize      (source._sfScaleAbsoluteSize      ),
    _sfAlignment              (source._sfAlignment              ),
    _sfImageClippingOffsets   (source._sfImageClippingOffsets   )
{
}


/*-------------------------- destructors ----------------------------------*/

ImageComponentBase::~ImageComponentBase(void)
{
}

void ImageComponentBase::onCreate(const ImageComponent *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ImageComponent *pThis = static_cast<ImageComponent *>(this);

        pThis->setTexture(source->getTexture());

        pThis->setRolloverTexture(source->getRolloverTexture());

        pThis->setDisabledTexture(source->getDisabledTexture());

        pThis->setFocusedTexture(source->getFocusedTexture());

        pThis->setTransformation(source->getTransformation());
    }
}

GetFieldHandlePtr ImageComponentBase::getHandleTexture         (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfTexture,
             this->getType().getFieldDesc(TextureFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleTexture        (void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfTexture,
             this->getType().getFieldDesc(TextureFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ImageComponent::setTexture,
                    static_cast<ImageComponent *>(this), _1));

    editSField(TextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr ImageComponentBase::getHandleRolloverTexture (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfRolloverTexture,
             this->getType().getFieldDesc(RolloverTextureFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleRolloverTexture(void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfRolloverTexture,
             this->getType().getFieldDesc(RolloverTextureFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ImageComponent::setRolloverTexture,
                    static_cast<ImageComponent *>(this), _1));

    editSField(RolloverTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr ImageComponentBase::getHandleDisabledTexture (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfDisabledTexture,
             this->getType().getFieldDesc(DisabledTextureFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleDisabledTexture(void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfDisabledTexture,
             this->getType().getFieldDesc(DisabledTextureFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ImageComponent::setDisabledTexture,
                    static_cast<ImageComponent *>(this), _1));

    editSField(DisabledTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr ImageComponentBase::getHandleFocusedTexture  (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfFocusedTexture,
             this->getType().getFieldDesc(FocusedTextureFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleFocusedTexture (void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfFocusedTexture,
             this->getType().getFieldDesc(FocusedTextureFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ImageComponent::setFocusedTexture,
                    static_cast<ImageComponent *>(this), _1));

    editSField(FocusedTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr ImageComponentBase::getHandleTransformation  (void) const
{
    SFUnrecTextureTransformChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureTransformChunkPtr::GetHandle(
             &_sfTransformation,
             this->getType().getFieldDesc(TransformationFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleTransformation (void)
{
    SFUnrecTextureTransformChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureTransformChunkPtr::EditHandle(
             &_sfTransformation,
             this->getType().getFieldDesc(TransformationFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ImageComponent::setTransformation,
                    static_cast<ImageComponent *>(this), _1));

    editSField(TransformationFieldMask);

    return returnValue;
}

GetFieldHandlePtr ImageComponentBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editSField(ColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr ImageComponentBase::getHandleScale           (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfScale,
             this->getType().getFieldDesc(ScaleFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleScale          (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfScale,
             this->getType().getFieldDesc(ScaleFieldId),
             this));


    editSField(ScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr ImageComponentBase::getHandleScaleAbsoluteSize (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfScaleAbsoluteSize,
             this->getType().getFieldDesc(ScaleAbsoluteSizeFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleScaleAbsoluteSize(void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfScaleAbsoluteSize,
             this->getType().getFieldDesc(ScaleAbsoluteSizeFieldId),
             this));


    editSField(ScaleAbsoluteSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ImageComponentBase::getHandleAlignment       (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfAlignment,
             this->getType().getFieldDesc(AlignmentFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleAlignment      (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfAlignment,
             this->getType().getFieldDesc(AlignmentFieldId),
             this));


    editSField(AlignmentFieldMask);

    return returnValue;
}

GetFieldHandlePtr ImageComponentBase::getHandleImageClippingOffsets (void) const
{
    SFVec4f::GetHandlePtr returnValue(
        new  SFVec4f::GetHandle(
             &_sfImageClippingOffsets,
             this->getType().getFieldDesc(ImageClippingOffsetsFieldId),
             const_cast<ImageComponentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageComponentBase::editHandleImageClippingOffsets(void)
{
    SFVec4f::EditHandlePtr returnValue(
        new  SFVec4f::EditHandle(
             &_sfImageClippingOffsets,
             this->getType().getFieldDesc(ImageClippingOffsetsFieldId),
             this));


    editSField(ImageClippingOffsetsFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ImageComponentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ImageComponent *pThis = static_cast<ImageComponent *>(this);

    pThis->execSync(static_cast<ImageComponent *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ImageComponentBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ImageComponent *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ImageComponent *>(pRefAspect),
                  dynamic_cast<const ImageComponent *>(this));

    return returnValue;
}
#endif

void ImageComponentBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ImageComponent *>(this)->setTexture(NULL);

    static_cast<ImageComponent *>(this)->setRolloverTexture(NULL);

    static_cast<ImageComponent *>(this)->setDisabledTexture(NULL);

    static_cast<ImageComponent *>(this)->setFocusedTexture(NULL);

    static_cast<ImageComponent *>(this)->setTransformation(NULL);


}


OSG_END_NAMESPACE
