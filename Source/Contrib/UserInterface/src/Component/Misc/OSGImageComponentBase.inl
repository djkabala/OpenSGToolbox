/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ImageComponent!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ImageComponentBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ImageComponentBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ImageComponentBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the ImageComponent::_sfTexture field.
inline
TextureBaseChunk * ImageComponentBase::getTexture(void) const
{
    return _sfTexture.getValue();
}

//! Set the value of the ImageComponent::_sfTexture field.
inline
void ImageComponentBase::setTexture(TextureBaseChunk * const value)
{
    editSField(TextureFieldMask);

    _sfTexture.setValue(value);
}

//! Get the value of the ImageComponent::_sfRolloverTexture field.
inline
TextureBaseChunk * ImageComponentBase::getRolloverTexture(void) const
{
    return _sfRolloverTexture.getValue();
}

//! Set the value of the ImageComponent::_sfRolloverTexture field.
inline
void ImageComponentBase::setRolloverTexture(TextureBaseChunk * const value)
{
    editSField(RolloverTextureFieldMask);

    _sfRolloverTexture.setValue(value);
}

//! Get the value of the ImageComponent::_sfDisabledTexture field.
inline
TextureBaseChunk * ImageComponentBase::getDisabledTexture(void) const
{
    return _sfDisabledTexture.getValue();
}

//! Set the value of the ImageComponent::_sfDisabledTexture field.
inline
void ImageComponentBase::setDisabledTexture(TextureBaseChunk * const value)
{
    editSField(DisabledTextureFieldMask);

    _sfDisabledTexture.setValue(value);
}

//! Get the value of the ImageComponent::_sfFocusedTexture field.
inline
TextureBaseChunk * ImageComponentBase::getFocusedTexture(void) const
{
    return _sfFocusedTexture.getValue();
}

//! Set the value of the ImageComponent::_sfFocusedTexture field.
inline
void ImageComponentBase::setFocusedTexture(TextureBaseChunk * const value)
{
    editSField(FocusedTextureFieldMask);

    _sfFocusedTexture.setValue(value);
}

//! Get the value of the ImageComponent::_sfTransformation field.
inline
TextureTransformChunk * ImageComponentBase::getTransformation(void) const
{
    return _sfTransformation.getValue();
}

//! Set the value of the ImageComponent::_sfTransformation field.
inline
void ImageComponentBase::setTransformation(TextureTransformChunk * const value)
{
    editSField(TransformationFieldMask);

    _sfTransformation.setValue(value);
}
//! Get the value of the ImageComponent::_sfColor field.

inline
Color4f &ImageComponentBase::editColor(void)
{
    editSField(ColorFieldMask);

    return _sfColor.getValue();
}

//! Get the value of the ImageComponent::_sfColor field.
inline
const Color4f &ImageComponentBase::getColor(void) const
{
    return _sfColor.getValue();
}

//! Set the value of the ImageComponent::_sfColor field.
inline
void ImageComponentBase::setColor(const Color4f &value)
{
    editSField(ColorFieldMask);

    _sfColor.setValue(value);
}
//! Get the value of the ImageComponent::_sfScale field.

inline
UInt32 &ImageComponentBase::editScale(void)
{
    editSField(ScaleFieldMask);

    return _sfScale.getValue();
}

//! Get the value of the ImageComponent::_sfScale field.
inline
      UInt32  ImageComponentBase::getScale(void) const
{
    return _sfScale.getValue();
}

//! Set the value of the ImageComponent::_sfScale field.
inline
void ImageComponentBase::setScale(const UInt32 value)
{
    editSField(ScaleFieldMask);

    _sfScale.setValue(value);
}
//! Get the value of the ImageComponent::_sfScaleAbsoluteSize field.

inline
Vec2f &ImageComponentBase::editScaleAbsoluteSize(void)
{
    editSField(ScaleAbsoluteSizeFieldMask);

    return _sfScaleAbsoluteSize.getValue();
}

//! Get the value of the ImageComponent::_sfScaleAbsoluteSize field.
inline
const Vec2f &ImageComponentBase::getScaleAbsoluteSize(void) const
{
    return _sfScaleAbsoluteSize.getValue();
}

//! Set the value of the ImageComponent::_sfScaleAbsoluteSize field.
inline
void ImageComponentBase::setScaleAbsoluteSize(const Vec2f &value)
{
    editSField(ScaleAbsoluteSizeFieldMask);

    _sfScaleAbsoluteSize.setValue(value);
}
//! Get the value of the ImageComponent::_sfAlignment field.

inline
Vec2f &ImageComponentBase::editAlignment(void)
{
    editSField(AlignmentFieldMask);

    return _sfAlignment.getValue();
}

//! Get the value of the ImageComponent::_sfAlignment field.
inline
const Vec2f &ImageComponentBase::getAlignment(void) const
{
    return _sfAlignment.getValue();
}

//! Set the value of the ImageComponent::_sfAlignment field.
inline
void ImageComponentBase::setAlignment(const Vec2f &value)
{
    editSField(AlignmentFieldMask);

    _sfAlignment.setValue(value);
}
//! Get the value of the ImageComponent::_sfImageClippingOffsets field.

inline
Vec4f &ImageComponentBase::editImageClippingOffsets(void)
{
    editSField(ImageClippingOffsetsFieldMask);

    return _sfImageClippingOffsets.getValue();
}

//! Get the value of the ImageComponent::_sfImageClippingOffsets field.
inline
const Vec4f &ImageComponentBase::getImageClippingOffsets(void) const
{
    return _sfImageClippingOffsets.getValue();
}

//! Set the value of the ImageComponent::_sfImageClippingOffsets field.
inline
void ImageComponentBase::setImageClippingOffsets(const Vec4f &value)
{
    editSField(ImageClippingOffsetsFieldMask);

    _sfImageClippingOffsets.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ImageComponentBase::execSync (      ImageComponentBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
        _sfTexture.syncWith(pFrom->_sfTexture);

    if(FieldBits::NoField != (RolloverTextureFieldMask & whichField))
        _sfRolloverTexture.syncWith(pFrom->_sfRolloverTexture);

    if(FieldBits::NoField != (DisabledTextureFieldMask & whichField))
        _sfDisabledTexture.syncWith(pFrom->_sfDisabledTexture);

    if(FieldBits::NoField != (FocusedTextureFieldMask & whichField))
        _sfFocusedTexture.syncWith(pFrom->_sfFocusedTexture);

    if(FieldBits::NoField != (TransformationFieldMask & whichField))
        _sfTransformation.syncWith(pFrom->_sfTransformation);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pFrom->_sfColor);

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
        _sfScale.syncWith(pFrom->_sfScale);

    if(FieldBits::NoField != (ScaleAbsoluteSizeFieldMask & whichField))
        _sfScaleAbsoluteSize.syncWith(pFrom->_sfScaleAbsoluteSize);

    if(FieldBits::NoField != (AlignmentFieldMask & whichField))
        _sfAlignment.syncWith(pFrom->_sfAlignment);

    if(FieldBits::NoField != (ImageClippingOffsetsFieldMask & whichField))
        _sfImageClippingOffsets.syncWith(pFrom->_sfImageClippingOffsets);
}
#endif


inline
const Char8 *ImageComponentBase::getClassname(void)
{
    return "ImageComponent";
}
OSG_GEN_CONTAINERPTR(ImageComponent);

OSG_END_NAMESPACE

