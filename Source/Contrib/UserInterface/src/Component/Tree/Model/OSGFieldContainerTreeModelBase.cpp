/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FieldContainerTreeModel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // InternalRootFieldContainer Class

#include "OSGFieldContainerTreeModelBase.h"
#include "OSGFieldContainerTreeModel.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::FieldContainerTreeModel
    A UI ComponentTreeModel.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * FieldContainerTreeModelBase::_sfInternalRootFieldContainer
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowInternalFields
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowMultiFields
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowSingleFields
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowPtrFields
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowDataFields
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowParentPtrFields
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowChildPtrFields
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowAttachments
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowEventProducers
    
*/

/*! \var bool            FieldContainerTreeModelBase::_sfShowCallbackFunctors
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<FieldContainerTreeModel *>::_type("FieldContainerTreeModelPtr", "AbstractTreeModelPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(FieldContainerTreeModel *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           FieldContainerTreeModel *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           FieldContainerTreeModel *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void FieldContainerTreeModelBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecFieldContainerPtr::Description(
        SFUnrecFieldContainerPtr::getClassType(),
        "InternalRootFieldContainer",
        "",
        InternalRootFieldContainerFieldId, InternalRootFieldContainerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleInternalRootFieldContainer),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleInternalRootFieldContainer));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowInternalFields",
        "",
        ShowInternalFieldsFieldId, ShowInternalFieldsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowInternalFields),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowInternalFields));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowMultiFields",
        "",
        ShowMultiFieldsFieldId, ShowMultiFieldsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowMultiFields),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowMultiFields));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowSingleFields",
        "",
        ShowSingleFieldsFieldId, ShowSingleFieldsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowSingleFields),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowSingleFields));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowPtrFields",
        "",
        ShowPtrFieldsFieldId, ShowPtrFieldsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowPtrFields),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowPtrFields));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowDataFields",
        "",
        ShowDataFieldsFieldId, ShowDataFieldsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowDataFields),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowDataFields));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowParentPtrFields",
        "",
        ShowParentPtrFieldsFieldId, ShowParentPtrFieldsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowParentPtrFields),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowParentPtrFields));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowChildPtrFields",
        "",
        ShowChildPtrFieldsFieldId, ShowChildPtrFieldsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowChildPtrFields),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowChildPtrFields));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowAttachments",
        "",
        ShowAttachmentsFieldId, ShowAttachmentsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowAttachments),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowAttachments));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowEventProducers",
        "",
        ShowEventProducersFieldId, ShowEventProducersFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowEventProducers),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowEventProducers));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ShowCallbackFunctors",
        "",
        ShowCallbackFunctorsFieldId, ShowCallbackFunctorsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FieldContainerTreeModel::editHandleShowCallbackFunctors),
        static_cast<FieldGetMethodSig >(&FieldContainerTreeModel::getHandleShowCallbackFunctors));

    oType.addInitialDesc(pDesc);
}


FieldContainerTreeModelBase::TypeObject FieldContainerTreeModelBase::_type(
    FieldContainerTreeModelBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&FieldContainerTreeModelBase::createEmptyLocal),
    FieldContainerTreeModel::initMethod,
    FieldContainerTreeModel::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&FieldContainerTreeModel::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"FieldContainerTreeModel\"\n"
    "\tparent=\"AbstractTreeModel\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI ComponentTreeModel.\n"
    "\t<Field\n"
    "\t\tname=\"InternalRootFieldContainer\"\n"
    "\t\ttype=\"FieldContainer\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowInternalFields\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowMultiFields\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowSingleFields\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowPtrFields\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowDataFields\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowParentPtrFields\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowChildPtrFields\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowAttachments\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowEventProducers\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "\t<Field\n"
    "\t\tname=\"ShowCallbackFunctors\"\n"
    "\t\ttype=\"bool\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "   </Field>\n"
    "</FieldContainer>\n",
    "A UI ComponentTreeModel.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &FieldContainerTreeModelBase::getType(void)
{
    return _type;
}

const FieldContainerType &FieldContainerTreeModelBase::getType(void) const
{
    return _type;
}

UInt32 FieldContainerTreeModelBase::getContainerSize(void) const
{
    return sizeof(FieldContainerTreeModel);
}

/*------------------------- decorator get ------------------------------*/


//! Get the FieldContainerTreeModel::_sfInternalRootFieldContainer field.
const SFUnrecFieldContainerPtr *FieldContainerTreeModelBase::getSFInternalRootFieldContainer(void) const
{
    return &_sfInternalRootFieldContainer;
}

SFUnrecFieldContainerPtr *FieldContainerTreeModelBase::editSFInternalRootFieldContainer(void)
{
    editSField(InternalRootFieldContainerFieldMask);

    return &_sfInternalRootFieldContainer;
}

SFBool *FieldContainerTreeModelBase::editSFShowInternalFields(void)
{
    editSField(ShowInternalFieldsFieldMask);

    return &_sfShowInternalFields;
}

const SFBool *FieldContainerTreeModelBase::getSFShowInternalFields(void) const
{
    return &_sfShowInternalFields;
}


SFBool *FieldContainerTreeModelBase::editSFShowMultiFields(void)
{
    editSField(ShowMultiFieldsFieldMask);

    return &_sfShowMultiFields;
}

const SFBool *FieldContainerTreeModelBase::getSFShowMultiFields(void) const
{
    return &_sfShowMultiFields;
}


SFBool *FieldContainerTreeModelBase::editSFShowSingleFields(void)
{
    editSField(ShowSingleFieldsFieldMask);

    return &_sfShowSingleFields;
}

const SFBool *FieldContainerTreeModelBase::getSFShowSingleFields(void) const
{
    return &_sfShowSingleFields;
}


SFBool *FieldContainerTreeModelBase::editSFShowPtrFields(void)
{
    editSField(ShowPtrFieldsFieldMask);

    return &_sfShowPtrFields;
}

const SFBool *FieldContainerTreeModelBase::getSFShowPtrFields(void) const
{
    return &_sfShowPtrFields;
}


SFBool *FieldContainerTreeModelBase::editSFShowDataFields(void)
{
    editSField(ShowDataFieldsFieldMask);

    return &_sfShowDataFields;
}

const SFBool *FieldContainerTreeModelBase::getSFShowDataFields(void) const
{
    return &_sfShowDataFields;
}


SFBool *FieldContainerTreeModelBase::editSFShowParentPtrFields(void)
{
    editSField(ShowParentPtrFieldsFieldMask);

    return &_sfShowParentPtrFields;
}

const SFBool *FieldContainerTreeModelBase::getSFShowParentPtrFields(void) const
{
    return &_sfShowParentPtrFields;
}


SFBool *FieldContainerTreeModelBase::editSFShowChildPtrFields(void)
{
    editSField(ShowChildPtrFieldsFieldMask);

    return &_sfShowChildPtrFields;
}

const SFBool *FieldContainerTreeModelBase::getSFShowChildPtrFields(void) const
{
    return &_sfShowChildPtrFields;
}


SFBool *FieldContainerTreeModelBase::editSFShowAttachments(void)
{
    editSField(ShowAttachmentsFieldMask);

    return &_sfShowAttachments;
}

const SFBool *FieldContainerTreeModelBase::getSFShowAttachments(void) const
{
    return &_sfShowAttachments;
}


SFBool *FieldContainerTreeModelBase::editSFShowEventProducers(void)
{
    editSField(ShowEventProducersFieldMask);

    return &_sfShowEventProducers;
}

const SFBool *FieldContainerTreeModelBase::getSFShowEventProducers(void) const
{
    return &_sfShowEventProducers;
}


SFBool *FieldContainerTreeModelBase::editSFShowCallbackFunctors(void)
{
    editSField(ShowCallbackFunctorsFieldMask);

    return &_sfShowCallbackFunctors;
}

const SFBool *FieldContainerTreeModelBase::getSFShowCallbackFunctors(void) const
{
    return &_sfShowCallbackFunctors;
}






/*------------------------------ access -----------------------------------*/

UInt32 FieldContainerTreeModelBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalRootFieldContainerFieldMask & whichField))
    {
        returnValue += _sfInternalRootFieldContainer.getBinSize();
    }
    if(FieldBits::NoField != (ShowInternalFieldsFieldMask & whichField))
    {
        returnValue += _sfShowInternalFields.getBinSize();
    }
    if(FieldBits::NoField != (ShowMultiFieldsFieldMask & whichField))
    {
        returnValue += _sfShowMultiFields.getBinSize();
    }
    if(FieldBits::NoField != (ShowSingleFieldsFieldMask & whichField))
    {
        returnValue += _sfShowSingleFields.getBinSize();
    }
    if(FieldBits::NoField != (ShowPtrFieldsFieldMask & whichField))
    {
        returnValue += _sfShowPtrFields.getBinSize();
    }
    if(FieldBits::NoField != (ShowDataFieldsFieldMask & whichField))
    {
        returnValue += _sfShowDataFields.getBinSize();
    }
    if(FieldBits::NoField != (ShowParentPtrFieldsFieldMask & whichField))
    {
        returnValue += _sfShowParentPtrFields.getBinSize();
    }
    if(FieldBits::NoField != (ShowChildPtrFieldsFieldMask & whichField))
    {
        returnValue += _sfShowChildPtrFields.getBinSize();
    }
    if(FieldBits::NoField != (ShowAttachmentsFieldMask & whichField))
    {
        returnValue += _sfShowAttachments.getBinSize();
    }
    if(FieldBits::NoField != (ShowEventProducersFieldMask & whichField))
    {
        returnValue += _sfShowEventProducers.getBinSize();
    }
    if(FieldBits::NoField != (ShowCallbackFunctorsFieldMask & whichField))
    {
        returnValue += _sfShowCallbackFunctors.getBinSize();
    }

    return returnValue;
}

void FieldContainerTreeModelBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalRootFieldContainerFieldMask & whichField))
    {
        _sfInternalRootFieldContainer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowInternalFieldsFieldMask & whichField))
    {
        _sfShowInternalFields.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowMultiFieldsFieldMask & whichField))
    {
        _sfShowMultiFields.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowSingleFieldsFieldMask & whichField))
    {
        _sfShowSingleFields.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowPtrFieldsFieldMask & whichField))
    {
        _sfShowPtrFields.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowDataFieldsFieldMask & whichField))
    {
        _sfShowDataFields.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowParentPtrFieldsFieldMask & whichField))
    {
        _sfShowParentPtrFields.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowChildPtrFieldsFieldMask & whichField))
    {
        _sfShowChildPtrFields.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowAttachmentsFieldMask & whichField))
    {
        _sfShowAttachments.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowEventProducersFieldMask & whichField))
    {
        _sfShowEventProducers.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowCallbackFunctorsFieldMask & whichField))
    {
        _sfShowCallbackFunctors.copyToBin(pMem);
    }
}

void FieldContainerTreeModelBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalRootFieldContainerFieldMask & whichField))
    {
        _sfInternalRootFieldContainer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowInternalFieldsFieldMask & whichField))
    {
        _sfShowInternalFields.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowMultiFieldsFieldMask & whichField))
    {
        _sfShowMultiFields.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowSingleFieldsFieldMask & whichField))
    {
        _sfShowSingleFields.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowPtrFieldsFieldMask & whichField))
    {
        _sfShowPtrFields.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowDataFieldsFieldMask & whichField))
    {
        _sfShowDataFields.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowParentPtrFieldsFieldMask & whichField))
    {
        _sfShowParentPtrFields.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowChildPtrFieldsFieldMask & whichField))
    {
        _sfShowChildPtrFields.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowAttachmentsFieldMask & whichField))
    {
        _sfShowAttachments.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowEventProducersFieldMask & whichField))
    {
        _sfShowEventProducers.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowCallbackFunctorsFieldMask & whichField))
    {
        _sfShowCallbackFunctors.copyFromBin(pMem);
    }
}

//! create a new instance of the class
FieldContainerTreeModelTransitPtr FieldContainerTreeModelBase::createLocal(BitVector bFlags)
{
    FieldContainerTreeModelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<FieldContainerTreeModel>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
FieldContainerTreeModelTransitPtr FieldContainerTreeModelBase::createDependent(BitVector bFlags)
{
    FieldContainerTreeModelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<FieldContainerTreeModel>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
FieldContainerTreeModelTransitPtr FieldContainerTreeModelBase::create(void)
{
    FieldContainerTreeModelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<FieldContainerTreeModel>(tmpPtr);
    }

    return fc;
}

FieldContainerTreeModel *FieldContainerTreeModelBase::createEmptyLocal(BitVector bFlags)
{
    FieldContainerTreeModel *returnValue;

    newPtr<FieldContainerTreeModel>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
FieldContainerTreeModel *FieldContainerTreeModelBase::createEmpty(void)
{
    FieldContainerTreeModel *returnValue;

    newPtr<FieldContainerTreeModel>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr FieldContainerTreeModelBase::shallowCopyLocal(
    BitVector bFlags) const
{
    FieldContainerTreeModel *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const FieldContainerTreeModel *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr FieldContainerTreeModelBase::shallowCopyDependent(
    BitVector bFlags) const
{
    FieldContainerTreeModel *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const FieldContainerTreeModel *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr FieldContainerTreeModelBase::shallowCopy(void) const
{
    FieldContainerTreeModel *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const FieldContainerTreeModel *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

FieldContainerTreeModelBase::FieldContainerTreeModelBase(void) :
    Inherited(),
    _sfInternalRootFieldContainer(NULL),
    _sfShowInternalFields     (bool(true)),
    _sfShowMultiFields        (bool(true)),
    _sfShowSingleFields       (bool(true)),
    _sfShowPtrFields          (bool(true)),
    _sfShowDataFields         (bool(true)),
    _sfShowParentPtrFields    (bool(true)),
    _sfShowChildPtrFields     (bool(true)),
    _sfShowAttachments        (bool(true)),
    _sfShowEventProducers     (bool(true)),
    _sfShowCallbackFunctors   (bool(false))
{
}

FieldContainerTreeModelBase::FieldContainerTreeModelBase(const FieldContainerTreeModelBase &source) :
    Inherited(source),
    _sfInternalRootFieldContainer(NULL),
    _sfShowInternalFields     (source._sfShowInternalFields     ),
    _sfShowMultiFields        (source._sfShowMultiFields        ),
    _sfShowSingleFields       (source._sfShowSingleFields       ),
    _sfShowPtrFields          (source._sfShowPtrFields          ),
    _sfShowDataFields         (source._sfShowDataFields         ),
    _sfShowParentPtrFields    (source._sfShowParentPtrFields    ),
    _sfShowChildPtrFields     (source._sfShowChildPtrFields     ),
    _sfShowAttachments        (source._sfShowAttachments        ),
    _sfShowEventProducers     (source._sfShowEventProducers     ),
    _sfShowCallbackFunctors   (source._sfShowCallbackFunctors   )
{
}


/*-------------------------- destructors ----------------------------------*/

FieldContainerTreeModelBase::~FieldContainerTreeModelBase(void)
{
}

void FieldContainerTreeModelBase::onCreate(const FieldContainerTreeModel *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        FieldContainerTreeModel *pThis = static_cast<FieldContainerTreeModel *>(this);

        pThis->setInternalRootFieldContainer(source->getInternalRootFieldContainer());
    }
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleInternalRootFieldContainer (void) const
{
    SFUnrecFieldContainerPtr::GetHandlePtr returnValue(
        new  SFUnrecFieldContainerPtr::GetHandle(
             &_sfInternalRootFieldContainer,
             this->getType().getFieldDesc(InternalRootFieldContainerFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleInternalRootFieldContainer(void)
{
    SFUnrecFieldContainerPtr::EditHandlePtr returnValue(
        new  SFUnrecFieldContainerPtr::EditHandle(
             &_sfInternalRootFieldContainer,
             this->getType().getFieldDesc(InternalRootFieldContainerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&FieldContainerTreeModel::setInternalRootFieldContainer,
                    static_cast<FieldContainerTreeModel *>(this), _1));

    editSField(InternalRootFieldContainerFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowInternalFields (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowInternalFields,
             this->getType().getFieldDesc(ShowInternalFieldsFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowInternalFields(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowInternalFields,
             this->getType().getFieldDesc(ShowInternalFieldsFieldId),
             this));


    editSField(ShowInternalFieldsFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowMultiFields (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowMultiFields,
             this->getType().getFieldDesc(ShowMultiFieldsFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowMultiFields(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowMultiFields,
             this->getType().getFieldDesc(ShowMultiFieldsFieldId),
             this));


    editSField(ShowMultiFieldsFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowSingleFields (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowSingleFields,
             this->getType().getFieldDesc(ShowSingleFieldsFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowSingleFields(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowSingleFields,
             this->getType().getFieldDesc(ShowSingleFieldsFieldId),
             this));


    editSField(ShowSingleFieldsFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowPtrFields   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowPtrFields,
             this->getType().getFieldDesc(ShowPtrFieldsFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowPtrFields  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowPtrFields,
             this->getType().getFieldDesc(ShowPtrFieldsFieldId),
             this));


    editSField(ShowPtrFieldsFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowDataFields  (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowDataFields,
             this->getType().getFieldDesc(ShowDataFieldsFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowDataFields (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowDataFields,
             this->getType().getFieldDesc(ShowDataFieldsFieldId),
             this));


    editSField(ShowDataFieldsFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowParentPtrFields (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowParentPtrFields,
             this->getType().getFieldDesc(ShowParentPtrFieldsFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowParentPtrFields(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowParentPtrFields,
             this->getType().getFieldDesc(ShowParentPtrFieldsFieldId),
             this));


    editSField(ShowParentPtrFieldsFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowChildPtrFields (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowChildPtrFields,
             this->getType().getFieldDesc(ShowChildPtrFieldsFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowChildPtrFields(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowChildPtrFields,
             this->getType().getFieldDesc(ShowChildPtrFieldsFieldId),
             this));


    editSField(ShowChildPtrFieldsFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowAttachments (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowAttachments,
             this->getType().getFieldDesc(ShowAttachmentsFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowAttachments(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowAttachments,
             this->getType().getFieldDesc(ShowAttachmentsFieldId),
             this));


    editSField(ShowAttachmentsFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowEventProducers (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowEventProducers,
             this->getType().getFieldDesc(ShowEventProducersFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowEventProducers(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowEventProducers,
             this->getType().getFieldDesc(ShowEventProducersFieldId),
             this));


    editSField(ShowEventProducersFieldMask);

    return returnValue;
}

GetFieldHandlePtr FieldContainerTreeModelBase::getHandleShowCallbackFunctors (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowCallbackFunctors,
             this->getType().getFieldDesc(ShowCallbackFunctorsFieldId),
             const_cast<FieldContainerTreeModelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FieldContainerTreeModelBase::editHandleShowCallbackFunctors(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowCallbackFunctors,
             this->getType().getFieldDesc(ShowCallbackFunctorsFieldId),
             this));


    editSField(ShowCallbackFunctorsFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void FieldContainerTreeModelBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    FieldContainerTreeModel *pThis = static_cast<FieldContainerTreeModel *>(this);

    pThis->execSync(static_cast<FieldContainerTreeModel *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *FieldContainerTreeModelBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    FieldContainerTreeModel *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const FieldContainerTreeModel *>(pRefAspect),
                  dynamic_cast<const FieldContainerTreeModel *>(this));

    return returnValue;
}
#endif

void FieldContainerTreeModelBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<FieldContainerTreeModel *>(this)->setInternalRootFieldContainer(NULL);


}


OSG_END_NAMESPACE
