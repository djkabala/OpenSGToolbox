/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MaterialLayer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGMaterial.h"                // Material Class

#include "OSGMaterialLayerBase.h"
#include "OSGMaterialLayer.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MaterialLayer
    UI Material Background.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Material *      MaterialLayerBase::_sfMaterial
    
*/

/*! \var Color4f         MaterialLayerBase::_sfColor
    
*/

/*! \var UInt32          MaterialLayerBase::_sfScale
    
*/

/*! \var Vec2s           MaterialLayerBase::_sfScaleAbsoluteSize
    
*/

/*! \var Real32          MaterialLayerBase::_sfVerticalAlignment
    
*/

/*! \var Real32          MaterialLayerBase::_sfHorizontalAlignment
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<MaterialLayer *>::_type("MaterialLayerPtr", "LayerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(MaterialLayer *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MaterialLayer *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MaterialLayer *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MaterialLayerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecMaterialPtr::Description(
        SFUnrecMaterialPtr::getClassType(),
        "Material",
        "",
        MaterialFieldId, MaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialLayer::editHandleMaterial),
        static_cast<FieldGetMethodSig >(&MaterialLayer::getHandleMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color",
        "",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialLayer::editHandleColor),
        static_cast<FieldGetMethodSig >(&MaterialLayer::getHandleColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "Scale",
        "",
        ScaleFieldId, ScaleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialLayer::editHandleScale),
        static_cast<FieldGetMethodSig >(&MaterialLayer::getHandleScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2s::Description(
        SFVec2s::getClassType(),
        "ScaleAbsoluteSize",
        "",
        ScaleAbsoluteSizeFieldId, ScaleAbsoluteSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialLayer::editHandleScaleAbsoluteSize),
        static_cast<FieldGetMethodSig >(&MaterialLayer::getHandleScaleAbsoluteSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "VerticalAlignment",
        "",
        VerticalAlignmentFieldId, VerticalAlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialLayer::editHandleVerticalAlignment),
        static_cast<FieldGetMethodSig >(&MaterialLayer::getHandleVerticalAlignment));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "HorizontalAlignment",
        "",
        HorizontalAlignmentFieldId, HorizontalAlignmentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialLayer::editHandleHorizontalAlignment),
        static_cast<FieldGetMethodSig >(&MaterialLayer::getHandleHorizontalAlignment));

    oType.addInitialDesc(pDesc);
}


MaterialLayerBase::TypeObject MaterialLayerBase::_type(
    MaterialLayerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&MaterialLayerBase::createEmptyLocal),
    MaterialLayer::initMethod,
    MaterialLayer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&MaterialLayer::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"MaterialLayer\"\n"
    "\tparent=\"Layer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "UI Material Background.\n"
    "\t<Field\n"
    "\t\tname=\"Material\"\n"
    "\t\ttype=\"Material\"\n"
    "        category=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Color\"\n"
    "\t\ttype=\"Color4f\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.0f,1.0f,1.0f,1.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Scale\"\n"
    "\t\ttype=\"UInt32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"TextureLayer::SCALE_STRETCH\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ScaleAbsoluteSize\"\n"
    "\t\ttype=\"Vec2s\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1,1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"VerticalAlignment\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"HorizontalAlignment\"\n"
    "\t\ttype=\"Real32\"\n"
    "        category=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "UI Material Background.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MaterialLayerBase::getType(void)
{
    return _type;
}

const FieldContainerType &MaterialLayerBase::getType(void) const
{
    return _type;
}

UInt32 MaterialLayerBase::getContainerSize(void) const
{
    return sizeof(MaterialLayer);
}

/*------------------------- decorator get ------------------------------*/


//! Get the MaterialLayer::_sfMaterial field.
const SFUnrecMaterialPtr *MaterialLayerBase::getSFMaterial(void) const
{
    return &_sfMaterial;
}

SFUnrecMaterialPtr  *MaterialLayerBase::editSFMaterial       (void)
{
    editSField(MaterialFieldMask);

    return &_sfMaterial;
}

SFColor4f *MaterialLayerBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *MaterialLayerBase::getSFColor(void) const
{
    return &_sfColor;
}


SFUInt32 *MaterialLayerBase::editSFScale(void)
{
    editSField(ScaleFieldMask);

    return &_sfScale;
}

const SFUInt32 *MaterialLayerBase::getSFScale(void) const
{
    return &_sfScale;
}


SFVec2s *MaterialLayerBase::editSFScaleAbsoluteSize(void)
{
    editSField(ScaleAbsoluteSizeFieldMask);

    return &_sfScaleAbsoluteSize;
}

const SFVec2s *MaterialLayerBase::getSFScaleAbsoluteSize(void) const
{
    return &_sfScaleAbsoluteSize;
}


SFReal32 *MaterialLayerBase::editSFVerticalAlignment(void)
{
    editSField(VerticalAlignmentFieldMask);

    return &_sfVerticalAlignment;
}

const SFReal32 *MaterialLayerBase::getSFVerticalAlignment(void) const
{
    return &_sfVerticalAlignment;
}


SFReal32 *MaterialLayerBase::editSFHorizontalAlignment(void)
{
    editSField(HorizontalAlignmentFieldMask);

    return &_sfHorizontalAlignment;
}

const SFReal32 *MaterialLayerBase::getSFHorizontalAlignment(void) const
{
    return &_sfHorizontalAlignment;
}






/*------------------------------ access -----------------------------------*/

UInt32 MaterialLayerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        returnValue += _sfMaterial.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        returnValue += _sfScale.getBinSize();
    }
    if(FieldBits::NoField != (ScaleAbsoluteSizeFieldMask & whichField))
    {
        returnValue += _sfScaleAbsoluteSize.getBinSize();
    }
    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
    {
        returnValue += _sfVerticalAlignment.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
    {
        returnValue += _sfHorizontalAlignment.getBinSize();
    }

    return returnValue;
}

void MaterialLayerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleAbsoluteSizeFieldMask & whichField))
    {
        _sfScaleAbsoluteSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
    {
        _sfVerticalAlignment.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
    {
        _sfHorizontalAlignment.copyToBin(pMem);
    }
}

void MaterialLayerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleAbsoluteSizeFieldMask & whichField))
    {
        _sfScaleAbsoluteSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
    {
        _sfVerticalAlignment.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
    {
        _sfHorizontalAlignment.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MaterialLayerTransitPtr MaterialLayerBase::createLocal(BitVector bFlags)
{
    MaterialLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MaterialLayer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MaterialLayerTransitPtr MaterialLayerBase::createDependent(BitVector bFlags)
{
    MaterialLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MaterialLayer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MaterialLayerTransitPtr MaterialLayerBase::create(void)
{
    MaterialLayerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MaterialLayer>(tmpPtr);
    }

    return fc;
}

MaterialLayer *MaterialLayerBase::createEmptyLocal(BitVector bFlags)
{
    MaterialLayer *returnValue;

    newPtr<MaterialLayer>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MaterialLayer *MaterialLayerBase::createEmpty(void)
{
    MaterialLayer *returnValue;

    newPtr<MaterialLayer>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MaterialLayerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MaterialLayer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MaterialLayer *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MaterialLayerBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MaterialLayer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MaterialLayer *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MaterialLayerBase::shallowCopy(void) const
{
    MaterialLayer *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MaterialLayer *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

MaterialLayerBase::MaterialLayerBase(void) :
    Inherited(),
    _sfMaterial               (NULL),
    _sfColor                  (Color4f(1.0f,1.0f,1.0f,1.0f)),
    _sfScale                  (UInt32(MaterialLayer::SCALE_STRETCH)),
    _sfScaleAbsoluteSize      (Vec2s(1,1)),
    _sfVerticalAlignment      (Real32(0.5)),
    _sfHorizontalAlignment    (Real32(0.5))
{
}

MaterialLayerBase::MaterialLayerBase(const MaterialLayerBase &source) :
    Inherited(source),
    _sfMaterial               (NULL),
    _sfColor                  (source._sfColor                  ),
    _sfScale                  (source._sfScale                  ),
    _sfScaleAbsoluteSize      (source._sfScaleAbsoluteSize      ),
    _sfVerticalAlignment      (source._sfVerticalAlignment      ),
    _sfHorizontalAlignment    (source._sfHorizontalAlignment    )
{
}


/*-------------------------- destructors ----------------------------------*/

MaterialLayerBase::~MaterialLayerBase(void)
{
}

void MaterialLayerBase::onCreate(const MaterialLayer *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        MaterialLayer *pThis = static_cast<MaterialLayer *>(this);

        pThis->setMaterial(source->getMaterial());
    }
}

GetFieldHandlePtr MaterialLayerBase::getHandleMaterial        (void) const
{
    SFUnrecMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecMaterialPtr::GetHandle(
             &_sfMaterial,
             this->getType().getFieldDesc(MaterialFieldId),
             const_cast<MaterialLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialLayerBase::editHandleMaterial       (void)
{
    SFUnrecMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecMaterialPtr::EditHandle(
             &_sfMaterial,
             this->getType().getFieldDesc(MaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MaterialLayer::setMaterial,
                    static_cast<MaterialLayer *>(this), _1));

    editSField(MaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialLayerBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<MaterialLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialLayerBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editSField(ColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialLayerBase::getHandleScale           (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfScale,
             this->getType().getFieldDesc(ScaleFieldId),
             const_cast<MaterialLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialLayerBase::editHandleScale          (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfScale,
             this->getType().getFieldDesc(ScaleFieldId),
             this));


    editSField(ScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialLayerBase::getHandleScaleAbsoluteSize (void) const
{
    SFVec2s::GetHandlePtr returnValue(
        new  SFVec2s::GetHandle(
             &_sfScaleAbsoluteSize,
             this->getType().getFieldDesc(ScaleAbsoluteSizeFieldId),
             const_cast<MaterialLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialLayerBase::editHandleScaleAbsoluteSize(void)
{
    SFVec2s::EditHandlePtr returnValue(
        new  SFVec2s::EditHandle(
             &_sfScaleAbsoluteSize,
             this->getType().getFieldDesc(ScaleAbsoluteSizeFieldId),
             this));


    editSField(ScaleAbsoluteSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialLayerBase::getHandleVerticalAlignment (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVerticalAlignment,
             this->getType().getFieldDesc(VerticalAlignmentFieldId),
             const_cast<MaterialLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialLayerBase::editHandleVerticalAlignment(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVerticalAlignment,
             this->getType().getFieldDesc(VerticalAlignmentFieldId),
             this));


    editSField(VerticalAlignmentFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialLayerBase::getHandleHorizontalAlignment (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHorizontalAlignment,
             this->getType().getFieldDesc(HorizontalAlignmentFieldId),
             const_cast<MaterialLayerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialLayerBase::editHandleHorizontalAlignment(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHorizontalAlignment,
             this->getType().getFieldDesc(HorizontalAlignmentFieldId),
             this));


    editSField(HorizontalAlignmentFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void MaterialLayerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MaterialLayer *pThis = static_cast<MaterialLayer *>(this);

    pThis->execSync(static_cast<MaterialLayer *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MaterialLayerBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MaterialLayer *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MaterialLayer *>(pRefAspect),
                  dynamic_cast<const MaterialLayer *>(this));

    return returnValue;
}
#endif

void MaterialLayerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<MaterialLayer *>(this)->setMaterial(NULL);


}


OSG_END_NAMESPACE
