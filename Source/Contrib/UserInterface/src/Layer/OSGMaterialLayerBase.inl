/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MaterialLayer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &MaterialLayerBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 MaterialLayerBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 MaterialLayerBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the MaterialLayer::_sfMaterial field.
inline
Material * MaterialLayerBase::getMaterial(void) const
{
    return _sfMaterial.getValue();
}

//! Set the value of the MaterialLayer::_sfMaterial field.
inline
void MaterialLayerBase::setMaterial(Material * const value)
{
    editSField(MaterialFieldMask);

    _sfMaterial.setValue(value);
}
//! Get the value of the MaterialLayer::_sfColor field.

inline
Color4f &MaterialLayerBase::editColor(void)
{
    editSField(ColorFieldMask);

    return _sfColor.getValue();
}

//! Get the value of the MaterialLayer::_sfColor field.
inline
const Color4f &MaterialLayerBase::getColor(void) const
{
    return _sfColor.getValue();
}

//! Set the value of the MaterialLayer::_sfColor field.
inline
void MaterialLayerBase::setColor(const Color4f &value)
{
    editSField(ColorFieldMask);

    _sfColor.setValue(value);
}
//! Get the value of the MaterialLayer::_sfScale field.

inline
UInt32 &MaterialLayerBase::editScale(void)
{
    editSField(ScaleFieldMask);

    return _sfScale.getValue();
}

//! Get the value of the MaterialLayer::_sfScale field.
inline
      UInt32  MaterialLayerBase::getScale(void) const
{
    return _sfScale.getValue();
}

//! Set the value of the MaterialLayer::_sfScale field.
inline
void MaterialLayerBase::setScale(const UInt32 value)
{
    editSField(ScaleFieldMask);

    _sfScale.setValue(value);
}
//! Get the value of the MaterialLayer::_sfScaleAbsoluteSize field.

inline
Vec2s &MaterialLayerBase::editScaleAbsoluteSize(void)
{
    editSField(ScaleAbsoluteSizeFieldMask);

    return _sfScaleAbsoluteSize.getValue();
}

//! Get the value of the MaterialLayer::_sfScaleAbsoluteSize field.
inline
const Vec2s &MaterialLayerBase::getScaleAbsoluteSize(void) const
{
    return _sfScaleAbsoluteSize.getValue();
}

//! Set the value of the MaterialLayer::_sfScaleAbsoluteSize field.
inline
void MaterialLayerBase::setScaleAbsoluteSize(const Vec2s &value)
{
    editSField(ScaleAbsoluteSizeFieldMask);

    _sfScaleAbsoluteSize.setValue(value);
}
//! Get the value of the MaterialLayer::_sfVerticalAlignment field.

inline
Real32 &MaterialLayerBase::editVerticalAlignment(void)
{
    editSField(VerticalAlignmentFieldMask);

    return _sfVerticalAlignment.getValue();
}

//! Get the value of the MaterialLayer::_sfVerticalAlignment field.
inline
      Real32  MaterialLayerBase::getVerticalAlignment(void) const
{
    return _sfVerticalAlignment.getValue();
}

//! Set the value of the MaterialLayer::_sfVerticalAlignment field.
inline
void MaterialLayerBase::setVerticalAlignment(const Real32 value)
{
    editSField(VerticalAlignmentFieldMask);

    _sfVerticalAlignment.setValue(value);
}
//! Get the value of the MaterialLayer::_sfHorizontalAlignment field.

inline
Real32 &MaterialLayerBase::editHorizontalAlignment(void)
{
    editSField(HorizontalAlignmentFieldMask);

    return _sfHorizontalAlignment.getValue();
}

//! Get the value of the MaterialLayer::_sfHorizontalAlignment field.
inline
      Real32  MaterialLayerBase::getHorizontalAlignment(void) const
{
    return _sfHorizontalAlignment.getValue();
}

//! Set the value of the MaterialLayer::_sfHorizontalAlignment field.
inline
void MaterialLayerBase::setHorizontalAlignment(const Real32 value)
{
    editSField(HorizontalAlignmentFieldMask);

    _sfHorizontalAlignment.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void MaterialLayerBase::execSync (      MaterialLayerBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        _sfMaterial.syncWith(pFrom->_sfMaterial);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pFrom->_sfColor);

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
        _sfScale.syncWith(pFrom->_sfScale);

    if(FieldBits::NoField != (ScaleAbsoluteSizeFieldMask & whichField))
        _sfScaleAbsoluteSize.syncWith(pFrom->_sfScaleAbsoluteSize);

    if(FieldBits::NoField != (VerticalAlignmentFieldMask & whichField))
        _sfVerticalAlignment.syncWith(pFrom->_sfVerticalAlignment);

    if(FieldBits::NoField != (HorizontalAlignmentFieldMask & whichField))
        _sfHorizontalAlignment.syncWith(pFrom->_sfHorizontalAlignment);
}
#endif


inline
const Char8 *MaterialLayerBase::getClassname(void)
{
    return "MaterialLayer";
}
OSG_GEN_CONTAINERPTR(MaterialLayer);

OSG_END_NAMESPACE

