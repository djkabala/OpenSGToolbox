/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Layout!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // ParentContainers Class

#include "OSGLayoutBase.h"
#include "OSGLayout.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Layout
    A UI Layout Interface.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * LayoutBase::_mfParentContainers
    Parents of this layout. Layouts can have more than one parent, i.e. in general
    they may be used in more than one place in the UI Component-graph.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Layout *>::_type("LayoutPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Layout *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Layout *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Layout *,
                           0);

DataType &FieldTraits< Layout *, 1 >::getType(void)
{
    return FieldTraits<Layout *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      Layout *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void LayoutBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFParentFieldContainerPtr::Description(
        MFParentFieldContainerPtr::getClassType(),
        "ParentContainers",
        "Parents of this layout. Layouts can have more than one parent, i.e. in general\n"
        "they may be used in more than one place in the UI Component-graph.\n",
        ParentContainersFieldId, ParentContainersFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&Layout::invalidEditField),
        static_cast     <FieldGetMethodSig >(&Layout::invalidGetField));

    oType.addInitialDesc(pDesc);
}


LayoutBase::TypeObject LayoutBase::_type(
    LayoutBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    Layout::initMethod,
    Layout::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Layout::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Layout\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    "    childFields=\"single\"\n"
    ">\n"
    "A UI Layout Interface.\n"
    "  <Field\n"
    "     name=\"ParentContainers\"\n"
    "     category=\"parentpointer\"\n"
    "     type=\"FieldContainer\"\n"
    "     cardinality=\"multi\"\n"
    "     access=\"none\"\n"
    "     visibility=\"internal\"\n"
    "     >\n"
    "    Parents of this layout. Layouts can have more than one parent, i.e. in general\n"
    "    they may be used in more than one place in the UI Component-graph.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "A UI Layout Interface.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &LayoutBase::getType(void)
{
    return _type;
}

const FieldContainerType &LayoutBase::getType(void) const
{
    return _type;
}

UInt32 LayoutBase::getContainerSize(void) const
{
    return sizeof(Layout);
}

/*------------------------- decorator get ------------------------------*/







/*------------------------------ access -----------------------------------*/

UInt32 LayoutBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentContainersFieldMask & whichField))
    {
        returnValue += _mfParentContainers.getBinSize();
    }

    return returnValue;
}

void LayoutBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentContainersFieldMask & whichField))
    {
        _mfParentContainers.copyToBin(pMem);
    }
}

void LayoutBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentContainersFieldMask & whichField))
    {
        _mfParentContainers.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

LayoutBase::LayoutBase(void) :
    Inherited(),
    _mfParentContainers       ()
{
}

LayoutBase::LayoutBase(const LayoutBase &source) :
    Inherited(source),
    _mfParentContainers       ()
{
}


/*-------------------------- destructors ----------------------------------*/

LayoutBase::~LayoutBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool LayoutBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentContainersFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            editMField(ParentContainersFieldMask, _mfParentContainers);

            _mfParentContainers.push_back(pParent, childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool LayoutBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentContainersFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            Int32 iParentIdx = _mfParentContainers.findIndex(pParent);

            if(iParentIdx != -1)
            {
                editMField(ParentContainersFieldMask, _mfParentContainers);

                _mfParentContainers.erase(iParentIdx);

                return true;
            }

            FWARNING(("LayoutBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}



GetFieldHandlePtr LayoutBase::getHandleParentContainers (void) const
{
    MFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr LayoutBase::editHandleParentContainers(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void LayoutBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Layout *pThis = static_cast<Layout *>(this);

    pThis->execSync(static_cast<Layout *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void LayoutBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
