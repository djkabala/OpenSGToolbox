/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIRectangle!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &UIRectangleBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 UIRectangleBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 UIRectangleBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the UIRectangle::_sfPoint field.

inline
Pnt3f &UIRectangleBase::editPoint(void)
{
    editSField(PointFieldMask);

    return _sfPoint.getValue();
}

//! Get the value of the UIRectangle::_sfPoint field.
inline
const Pnt3f &UIRectangleBase::getPoint(void) const
{
    return _sfPoint.getValue();
}

//! Set the value of the UIRectangle::_sfPoint field.
inline
void UIRectangleBase::setPoint(const Pnt3f &value)
{
    editSField(PointFieldMask);

    _sfPoint.setValue(value);
}
//! Get the value of the UIRectangle::_sfWidth field.

inline
Real32 &UIRectangleBase::editWidth(void)
{
    editSField(WidthFieldMask);

    return _sfWidth.getValue();
}

//! Get the value of the UIRectangle::_sfWidth field.
inline
      Real32  UIRectangleBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

//! Set the value of the UIRectangle::_sfWidth field.
inline
void UIRectangleBase::setWidth(const Real32 value)
{
    editSField(WidthFieldMask);

    _sfWidth.setValue(value);
}
//! Get the value of the UIRectangle::_sfHeight field.

inline
Real32 &UIRectangleBase::editHeight(void)
{
    editSField(HeightFieldMask);

    return _sfHeight.getValue();
}

//! Get the value of the UIRectangle::_sfHeight field.
inline
      Real32  UIRectangleBase::getHeight(void) const
{
    return _sfHeight.getValue();
}

//! Set the value of the UIRectangle::_sfHeight field.
inline
void UIRectangleBase::setHeight(const Real32 value)
{
    editSField(HeightFieldMask);

    _sfHeight.setValue(value);
}

//! Get the value of the UIRectangle::_sfDrawingSurface field.
inline
UIDrawingSurface * UIRectangleBase::getDrawingSurface(void) const
{
    return _sfDrawingSurface.getValue();
}

//! Set the value of the UIRectangle::_sfDrawingSurface field.
inline
void UIRectangleBase::setDrawingSurface(UIDrawingSurface * const value)
{
    editSField(DrawingSurfaceFieldMask);

    _sfDrawingSurface.setValue(value);
}

//! Get the value of the UIRectangle::_sfRectColorMask field.
inline
ColorMaskChunk * UIRectangleBase::getRectColorMask(void) const
{
    return _sfRectColorMask.getValue();
}

//! Set the value of the UIRectangle::_sfRectColorMask field.
inline
void UIRectangleBase::setRectColorMask(ColorMaskChunk * const value)
{
    editSField(RectColorMaskFieldMask);

    _sfRectColorMask.setValue(value);
}

//! Get the value of the UIRectangle::_sfRectPolygon field.
inline
PolygonChunk * UIRectangleBase::getRectPolygon(void) const
{
    return _sfRectPolygon.getValue();
}

//! Set the value of the UIRectangle::_sfRectPolygon field.
inline
void UIRectangleBase::setRectPolygon(PolygonChunk * const value)
{
    editSField(RectPolygonFieldMask);

    _sfRectPolygon.setValue(value);
}

//! Get the value of the UIRectangle::_sfMouseTransformFunctor field.
inline
UIRectangleMouseTransformFunctor * UIRectangleBase::getMouseTransformFunctor(void) const
{
    return _sfMouseTransformFunctor.getValue();
}

//! Set the value of the UIRectangle::_sfMouseTransformFunctor field.
inline
void UIRectangleBase::setMouseTransformFunctor(UIRectangleMouseTransformFunctor * const value)
{
    editSField(MouseTransformFunctorFieldMask);

    _sfMouseTransformFunctor.setValue(value);
}
//! Get the value of the UIRectangle::_sfSortKey field.

inline
Int32 &UIRectangleBase::editSortKey(void)
{
    editSField(SortKeyFieldMask);

    return _sfSortKey.getValue();
}

//! Get the value of the UIRectangle::_sfSortKey field.
inline
      Int32  UIRectangleBase::getSortKey(void) const
{
    return _sfSortKey.getValue();
}

//! Set the value of the UIRectangle::_sfSortKey field.
inline
void UIRectangleBase::setSortKey(const Int32 value)
{
    editSField(SortKeyFieldMask);

    _sfSortKey.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void UIRectangleBase::execSync (      UIRectangleBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (PointFieldMask & whichField))
        _sfPoint.syncWith(pFrom->_sfPoint);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pFrom->_sfWidth);

    if(FieldBits::NoField != (HeightFieldMask & whichField))
        _sfHeight.syncWith(pFrom->_sfHeight);

    if(FieldBits::NoField != (DrawingSurfaceFieldMask & whichField))
        _sfDrawingSurface.syncWith(pFrom->_sfDrawingSurface);

    if(FieldBits::NoField != (RectColorMaskFieldMask & whichField))
        _sfRectColorMask.syncWith(pFrom->_sfRectColorMask);

    if(FieldBits::NoField != (RectPolygonFieldMask & whichField))
        _sfRectPolygon.syncWith(pFrom->_sfRectPolygon);

    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
        _sfMouseTransformFunctor.syncWith(pFrom->_sfMouseTransformFunctor);

    if(FieldBits::NoField != (SortKeyFieldMask & whichField))
        _sfSortKey.syncWith(pFrom->_sfSortKey);
}
#endif


inline
const Char8 *UIRectangleBase::getClassname(void)
{
    return "UIRectangle";
}
OSG_GEN_CONTAINERPTR(UIRectangle);

OSG_END_NAMESPACE

