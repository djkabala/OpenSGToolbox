/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class UIDrawingSurface!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGInternalWindow.h"          // InternalWindows Class
#include "OSGWindowEventProducer.h"     // EventProducer Class
#include "OSGGraphics.h"                // Graphics Class
#include "OSGUIDrawingSurfaceMouseTransformFunctor.h" // MouseTransformFunctor Class

#include "OSGUIDrawingSurfaceBase.h"
#include "OSGUIDrawingSurface.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::UIDrawingSurface
    A UI DrawingSurface.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var InternalWindow * UIDrawingSurfaceBase::_mfInternalWindows
    
*/

/*! \var InternalWindow * UIDrawingSurfaceBase::_sfFocusedWindow
    
*/

/*! \var WindowEventProducer * UIDrawingSurfaceBase::_sfEventProducer
    
*/

/*! \var Graphics *      UIDrawingSurfaceBase::_sfGraphics
    
*/

/*! \var UIDrawingSurfaceMouseTransformFunctor * UIDrawingSurfaceBase::_sfMouseTransformFunctor
    
*/

/*! \var Vec2f           UIDrawingSurfaceBase::_sfSize
    
*/

/*! \var bool            UIDrawingSurfaceBase::_sfActive
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<UIDrawingSurface *>::_type("UIDrawingSurfacePtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(UIDrawingSurface *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           UIDrawingSurface *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           UIDrawingSurface *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void UIDrawingSurfaceBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecChildInternalWindowPtr::Description(
        MFUnrecChildInternalWindowPtr::getClassType(),
        "InternalWindows",
        "",
        InternalWindowsFieldId, InternalWindowsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&UIDrawingSurface::editHandleInternalWindows),
        static_cast<FieldGetMethodSig >(&UIDrawingSurface::getHandleInternalWindows));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakInternalWindowPtr::Description(
        SFWeakInternalWindowPtr::getClassType(),
        "FocusedWindow",
        "",
        FocusedWindowFieldId, FocusedWindowFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&UIDrawingSurface::editHandleFocusedWindow),
        static_cast<FieldGetMethodSig >(&UIDrawingSurface::getHandleFocusedWindow));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakWindowEventProducerPtr::Description(
        SFWeakWindowEventProducerPtr::getClassType(),
        "EventProducer",
        "",
        EventProducerFieldId, EventProducerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&UIDrawingSurface::editHandleEventProducer),
        static_cast<FieldGetMethodSig >(&UIDrawingSurface::getHandleEventProducer));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecGraphicsPtr::Description(
        SFUnrecGraphicsPtr::getClassType(),
        "Graphics",
        "",
        GraphicsFieldId, GraphicsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&UIDrawingSurface::editHandleGraphics),
        static_cast<FieldGetMethodSig >(&UIDrawingSurface::getHandleGraphics));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr::Description(
        SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr::getClassType(),
        "MouseTransformFunctor",
        "",
        MouseTransformFunctorFieldId, MouseTransformFunctorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&UIDrawingSurface::editHandleMouseTransformFunctor),
        static_cast<FieldGetMethodSig >(&UIDrawingSurface::getHandleMouseTransformFunctor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "Size",
        "",
        SizeFieldId, SizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&UIDrawingSurface::editHandleSize),
        static_cast<FieldGetMethodSig >(&UIDrawingSurface::getHandleSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Active",
        "",
        ActiveFieldId, ActiveFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&UIDrawingSurface::editHandleActive),
        static_cast<FieldGetMethodSig >(&UIDrawingSurface::getHandleActive));

    oType.addInitialDesc(pDesc);
}


UIDrawingSurfaceBase::TypeObject UIDrawingSurfaceBase::_type(
    UIDrawingSurfaceBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&UIDrawingSurfaceBase::createEmptyLocal),
    UIDrawingSurface::initMethod,
    UIDrawingSurface::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&UIDrawingSurface::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"UIDrawingSurface\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "    library=\"ContribUserInterface\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "A UI DrawingSurface.\n"
    "\t<Field\n"
    "\t\tname=\"InternalWindows\"\n"
    "\t\ttype=\"InternalWindow\"\n"
    "\t\tcardinality=\"multi\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentDrawingSurface\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FocusedWindow\"\n"
    "\t\ttype=\"InternalWindow\"\n"
    "\t\tcategory=\"weakpointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"EventProducer\"\n"
    "\t\ttype=\"WindowEventProducer\"\n"
    "\t\tcategory=\"weakpointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Graphics\"\n"
    "\t\ttype=\"Graphics\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MouseTransformFunctor\"\n"
    "\t\ttype=\"UIDrawingSurfaceMouseTransformFunctor\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Size\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.0f,0.0f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Active\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "A UI DrawingSurface.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &UIDrawingSurfaceBase::getType(void)
{
    return _type;
}

const FieldContainerType &UIDrawingSurfaceBase::getType(void) const
{
    return _type;
}

UInt32 UIDrawingSurfaceBase::getContainerSize(void) const
{
    return sizeof(UIDrawingSurface);
}

/*------------------------- decorator get ------------------------------*/


//! Get the UIDrawingSurface::_mfInternalWindows field.
const MFUnrecChildInternalWindowPtr *UIDrawingSurfaceBase::getMFInternalWindows(void) const
{
    return &_mfInternalWindows;
}

//! Get the UIDrawingSurface::_sfFocusedWindow field.
const SFWeakInternalWindowPtr *UIDrawingSurfaceBase::getSFFocusedWindow(void) const
{
    return &_sfFocusedWindow;
}

SFWeakInternalWindowPtr *UIDrawingSurfaceBase::editSFFocusedWindow  (void)
{
    editSField(FocusedWindowFieldMask);

    return &_sfFocusedWindow;
}

//! Get the UIDrawingSurface::_sfEventProducer field.
const SFWeakWindowEventProducerPtr *UIDrawingSurfaceBase::getSFEventProducer(void) const
{
    return &_sfEventProducer;
}

SFWeakWindowEventProducerPtr *UIDrawingSurfaceBase::editSFEventProducer  (void)
{
    editSField(EventProducerFieldMask);

    return &_sfEventProducer;
}

//! Get the UIDrawingSurface::_sfGraphics field.
const SFUnrecGraphicsPtr *UIDrawingSurfaceBase::getSFGraphics(void) const
{
    return &_sfGraphics;
}

SFUnrecGraphicsPtr  *UIDrawingSurfaceBase::editSFGraphics       (void)
{
    editSField(GraphicsFieldMask);

    return &_sfGraphics;
}

//! Get the UIDrawingSurface::_sfMouseTransformFunctor field.
const SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr *UIDrawingSurfaceBase::getSFMouseTransformFunctor(void) const
{
    return &_sfMouseTransformFunctor;
}

SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr *UIDrawingSurfaceBase::editSFMouseTransformFunctor(void)
{
    editSField(MouseTransformFunctorFieldMask);

    return &_sfMouseTransformFunctor;
}

SFVec2f *UIDrawingSurfaceBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFVec2f *UIDrawingSurfaceBase::getSFSize(void) const
{
    return &_sfSize;
}


SFBool *UIDrawingSurfaceBase::editSFActive(void)
{
    editSField(ActiveFieldMask);

    return &_sfActive;
}

const SFBool *UIDrawingSurfaceBase::getSFActive(void) const
{
    return &_sfActive;
}




void UIDrawingSurfaceBase::pushToInternalWindows(InternalWindow * const value)
{
    if(value == NULL)
        return;

    editMField(InternalWindowsFieldMask, _mfInternalWindows);

    _mfInternalWindows.push_back(value);
}

void UIDrawingSurfaceBase::assignInternalWindows(const MFUnrecChildInternalWindowPtr &value)
{
    MFUnrecChildInternalWindowPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildInternalWindowPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<UIDrawingSurface *>(this)->clearInternalWindows();

    while(elemIt != elemEnd)
    {
        this->pushToInternalWindows(*elemIt);

        ++elemIt;
    }
}

void UIDrawingSurfaceBase::insertIntoInternalWindows(UInt32               uiIndex,
                                                   InternalWindow * const value   )
{
    if(value == NULL)
        return;

    editMField(InternalWindowsFieldMask, _mfInternalWindows);

    MFUnrecChildInternalWindowPtr::iterator fieldIt = _mfInternalWindows.begin_nc();

    fieldIt += uiIndex;

    _mfInternalWindows.insert(fieldIt, value);
}

void UIDrawingSurfaceBase::replaceInInternalWindows(UInt32               uiIndex,
                                                       InternalWindow * const value   )
{
    if(value == NULL)
        return;

    if(uiIndex >= _mfInternalWindows.size())
        return;

    editMField(InternalWindowsFieldMask, _mfInternalWindows);

    _mfInternalWindows.replace(uiIndex, value);
}

void UIDrawingSurfaceBase::replaceObjInInternalWindows(InternalWindow * const pOldElem,
                                                        InternalWindow * const pNewElem)
{
    if(pNewElem == NULL)
        return;

    Int32  elemIdx = _mfInternalWindows.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(InternalWindowsFieldMask, _mfInternalWindows);

        _mfInternalWindows.replace(elemIdx, pNewElem);
    }
}

void UIDrawingSurfaceBase::removeFromInternalWindows(UInt32 uiIndex)
{
    if(uiIndex < _mfInternalWindows.size())
    {
        editMField(InternalWindowsFieldMask, _mfInternalWindows);

        _mfInternalWindows.erase(uiIndex);
    }
}

void UIDrawingSurfaceBase::removeObjFromInternalWindows(InternalWindow * const value)
{
    Int32 iElemIdx = _mfInternalWindows.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(InternalWindowsFieldMask, _mfInternalWindows);

        _mfInternalWindows.erase(iElemIdx);
    }
}
void UIDrawingSurfaceBase::clearInternalWindows(void)
{
    editMField(InternalWindowsFieldMask, _mfInternalWindows);


    _mfInternalWindows.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 UIDrawingSurfaceBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
    {
        returnValue += _mfInternalWindows.getBinSize();
    }
    if(FieldBits::NoField != (FocusedWindowFieldMask & whichField))
    {
        returnValue += _sfFocusedWindow.getBinSize();
    }
    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        returnValue += _sfEventProducer.getBinSize();
    }
    if(FieldBits::NoField != (GraphicsFieldMask & whichField))
    {
        returnValue += _sfGraphics.getBinSize();
    }
    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
    {
        returnValue += _sfMouseTransformFunctor.getBinSize();
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }
    if(FieldBits::NoField != (ActiveFieldMask & whichField))
    {
        returnValue += _sfActive.getBinSize();
    }

    return returnValue;
}

void UIDrawingSurfaceBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
    {
        _mfInternalWindows.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FocusedWindowFieldMask & whichField))
    {
        _sfFocusedWindow.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GraphicsFieldMask & whichField))
    {
        _sfGraphics.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
    {
        _sfMouseTransformFunctor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ActiveFieldMask & whichField))
    {
        _sfActive.copyToBin(pMem);
    }
}

void UIDrawingSurfaceBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InternalWindowsFieldMask & whichField))
    {
        _mfInternalWindows.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FocusedWindowFieldMask & whichField))
    {
        _sfFocusedWindow.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EventProducerFieldMask & whichField))
    {
        _sfEventProducer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GraphicsFieldMask & whichField))
    {
        _sfGraphics.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MouseTransformFunctorFieldMask & whichField))
    {
        _sfMouseTransformFunctor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ActiveFieldMask & whichField))
    {
        _sfActive.copyFromBin(pMem);
    }
}

//! create a new instance of the class
UIDrawingSurfaceTransitPtr UIDrawingSurfaceBase::createLocal(BitVector bFlags)
{
    UIDrawingSurfaceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<UIDrawingSurface>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
UIDrawingSurfaceTransitPtr UIDrawingSurfaceBase::createDependent(BitVector bFlags)
{
    UIDrawingSurfaceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<UIDrawingSurface>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
UIDrawingSurfaceTransitPtr UIDrawingSurfaceBase::create(void)
{
    UIDrawingSurfaceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<UIDrawingSurface>(tmpPtr);
    }

    return fc;
}

UIDrawingSurface *UIDrawingSurfaceBase::createEmptyLocal(BitVector bFlags)
{
    UIDrawingSurface *returnValue;

    newPtr<UIDrawingSurface>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
UIDrawingSurface *UIDrawingSurfaceBase::createEmpty(void)
{
    UIDrawingSurface *returnValue;

    newPtr<UIDrawingSurface>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}

FieldContainerTransitPtr UIDrawingSurfaceBase::shallowCopyLocal(
    BitVector bFlags) const
{
    UIDrawingSurface *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const UIDrawingSurface *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr UIDrawingSurfaceBase::shallowCopyDependent(
    BitVector bFlags) const
{
    UIDrawingSurface *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const UIDrawingSurface *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr UIDrawingSurfaceBase::shallowCopy(void) const
{
    UIDrawingSurface *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const UIDrawingSurface *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

UIDrawingSurfaceBase::UIDrawingSurfaceBase(void) :
    Inherited(),
    _mfInternalWindows        (this,
                          InternalWindowsFieldId,
                          InternalWindow::ParentDrawingSurfaceFieldId),
    _sfFocusedWindow          (NULL),
    _sfEventProducer          (NULL),
    _sfGraphics               (NULL),
    _sfMouseTransformFunctor  (NULL),
    _sfSize                   (Vec2f(0.0f,0.0f)),
    _sfActive                 (bool(true))
{
}

UIDrawingSurfaceBase::UIDrawingSurfaceBase(const UIDrawingSurfaceBase &source) :
    Inherited(source),
    _mfInternalWindows        (this,
                          InternalWindowsFieldId,
                          InternalWindow::ParentDrawingSurfaceFieldId),
    _sfFocusedWindow          (NULL),
    _sfEventProducer          (NULL),
    _sfGraphics               (NULL),
    _sfMouseTransformFunctor  (NULL),
    _sfSize                   (source._sfSize                   ),
    _sfActive                 (source._sfActive                 )
{
}


/*-------------------------- destructors ----------------------------------*/

UIDrawingSurfaceBase::~UIDrawingSurfaceBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool UIDrawingSurfaceBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == InternalWindowsFieldId)
    {
        InternalWindow * pTypedChild =
            dynamic_cast<InternalWindow *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfInternalWindows.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(InternalWindowsFieldMask, _mfInternalWindows);

                _mfInternalWindows.erase(iChildIdx);

                return true;
            }

            FWARNING(("UIDrawingSurfaceBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void UIDrawingSurfaceBase::onCreate(const UIDrawingSurface *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        UIDrawingSurface *pThis = static_cast<UIDrawingSurface *>(this);

        MFUnrecChildInternalWindowPtr::const_iterator InternalWindowsIt  =
            source->_mfInternalWindows.begin();
        MFUnrecChildInternalWindowPtr::const_iterator InternalWindowsEnd =
            source->_mfInternalWindows.end  ();

        while(InternalWindowsIt != InternalWindowsEnd)
        {
            pThis->pushToInternalWindows(*InternalWindowsIt);

            ++InternalWindowsIt;
        }

        pThis->setFocusedWindow(source->getFocusedWindow());

        pThis->setEventProducer(source->getEventProducer());

        pThis->setGraphics(source->getGraphics());

        pThis->setMouseTransformFunctor(source->getMouseTransformFunctor());
    }
}

GetFieldHandlePtr UIDrawingSurfaceBase::getHandleInternalWindows (void) const
{
    MFUnrecChildInternalWindowPtr::GetHandlePtr returnValue(
        new  MFUnrecChildInternalWindowPtr::GetHandle(
             &_mfInternalWindows,
             this->getType().getFieldDesc(InternalWindowsFieldId),
             const_cast<UIDrawingSurfaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIDrawingSurfaceBase::editHandleInternalWindows(void)
{
    MFUnrecChildInternalWindowPtr::EditHandlePtr returnValue(
        new  MFUnrecChildInternalWindowPtr::EditHandle(
             &_mfInternalWindows,
             this->getType().getFieldDesc(InternalWindowsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&UIDrawingSurface::pushToInternalWindows,
                    static_cast<UIDrawingSurface *>(this), _1));
    returnValue->setInsertMethod(
        boost::bind(&UIDrawingSurface::insertIntoInternalWindows,
                    static_cast<UIDrawingSurface *>(this), _1, _2));
    returnValue->setReplaceMethod(
        boost::bind(&UIDrawingSurface::replaceInInternalWindows,
                    static_cast<UIDrawingSurface *>(this), _1, _2));
    returnValue->setReplaceObjMethod(
        boost::bind(&UIDrawingSurface::replaceObjInInternalWindows,
                    static_cast<UIDrawingSurface *>(this), _1, _2));
    returnValue->setRemoveMethod(
        boost::bind(&UIDrawingSurface::removeFromInternalWindows,
                    static_cast<UIDrawingSurface *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&UIDrawingSurface::removeObjFromInternalWindows,
                    static_cast<UIDrawingSurface *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&UIDrawingSurface::clearInternalWindows,
                    static_cast<UIDrawingSurface *>(this)));

    editMField(InternalWindowsFieldMask, _mfInternalWindows);

    return returnValue;
}

GetFieldHandlePtr UIDrawingSurfaceBase::getHandleFocusedWindow   (void) const
{
    SFWeakInternalWindowPtr::GetHandlePtr returnValue(
        new  SFWeakInternalWindowPtr::GetHandle(
             &_sfFocusedWindow,
             this->getType().getFieldDesc(FocusedWindowFieldId),
             const_cast<UIDrawingSurfaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIDrawingSurfaceBase::editHandleFocusedWindow  (void)
{
    SFWeakInternalWindowPtr::EditHandlePtr returnValue(
        new  SFWeakInternalWindowPtr::EditHandle(
             &_sfFocusedWindow,
             this->getType().getFieldDesc(FocusedWindowFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&UIDrawingSurface::setFocusedWindow,
                    static_cast<UIDrawingSurface *>(this), _1));

    editSField(FocusedWindowFieldMask);

    return returnValue;
}

GetFieldHandlePtr UIDrawingSurfaceBase::getHandleEventProducer   (void) const
{
    SFWeakWindowEventProducerPtr::GetHandlePtr returnValue(
        new  SFWeakWindowEventProducerPtr::GetHandle(
             &_sfEventProducer,
             this->getType().getFieldDesc(EventProducerFieldId),
             const_cast<UIDrawingSurfaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIDrawingSurfaceBase::editHandleEventProducer  (void)
{
    SFWeakWindowEventProducerPtr::EditHandlePtr returnValue(
        new  SFWeakWindowEventProducerPtr::EditHandle(
             &_sfEventProducer,
             this->getType().getFieldDesc(EventProducerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&UIDrawingSurface::setEventProducer,
                    static_cast<UIDrawingSurface *>(this), _1));

    editSField(EventProducerFieldMask);

    return returnValue;
}

GetFieldHandlePtr UIDrawingSurfaceBase::getHandleGraphics        (void) const
{
    SFUnrecGraphicsPtr::GetHandlePtr returnValue(
        new  SFUnrecGraphicsPtr::GetHandle(
             &_sfGraphics,
             this->getType().getFieldDesc(GraphicsFieldId),
             const_cast<UIDrawingSurfaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIDrawingSurfaceBase::editHandleGraphics       (void)
{
    SFUnrecGraphicsPtr::EditHandlePtr returnValue(
        new  SFUnrecGraphicsPtr::EditHandle(
             &_sfGraphics,
             this->getType().getFieldDesc(GraphicsFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&UIDrawingSurface::setGraphics,
                    static_cast<UIDrawingSurface *>(this), _1));

    editSField(GraphicsFieldMask);

    return returnValue;
}

GetFieldHandlePtr UIDrawingSurfaceBase::getHandleMouseTransformFunctor (void) const
{
    SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr::GetHandlePtr returnValue(
        new  SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr::GetHandle(
             &_sfMouseTransformFunctor,
             this->getType().getFieldDesc(MouseTransformFunctorFieldId),
             const_cast<UIDrawingSurfaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIDrawingSurfaceBase::editHandleMouseTransformFunctor(void)
{
    SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr::EditHandlePtr returnValue(
        new  SFUnrecUIDrawingSurfaceMouseTransformFunctorPtr::EditHandle(
             &_sfMouseTransformFunctor,
             this->getType().getFieldDesc(MouseTransformFunctorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&UIDrawingSurface::setMouseTransformFunctor,
                    static_cast<UIDrawingSurface *>(this), _1));

    editSField(MouseTransformFunctorFieldMask);

    return returnValue;
}

GetFieldHandlePtr UIDrawingSurfaceBase::getHandleSize            (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             const_cast<UIDrawingSurfaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIDrawingSurfaceBase::editHandleSize           (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             this));


    editSField(SizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr UIDrawingSurfaceBase::getHandleActive          (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfActive,
             this->getType().getFieldDesc(ActiveFieldId),
             const_cast<UIDrawingSurfaceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr UIDrawingSurfaceBase::editHandleActive         (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfActive,
             this->getType().getFieldDesc(ActiveFieldId),
             this));


    editSField(ActiveFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void UIDrawingSurfaceBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    UIDrawingSurface *pThis = static_cast<UIDrawingSurface *>(this);

    pThis->execSync(static_cast<UIDrawingSurface *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *UIDrawingSurfaceBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    UIDrawingSurface *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const UIDrawingSurface *>(pRefAspect),
                  dynamic_cast<const UIDrawingSurface *>(this));

    return returnValue;
}
#endif

void UIDrawingSurfaceBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<UIDrawingSurface *>(this)->clearInternalWindows();

    static_cast<UIDrawingSurface *>(this)->setFocusedWindow(NULL);

    static_cast<UIDrawingSurface *>(this)->setEventProducer(NULL);

    static_cast<UIDrawingSurface *>(this)->setGraphics(NULL);

    static_cast<UIDrawingSurface *>(this)->setMouseTransformFunctor(NULL);


}


OSG_END_NAMESPACE
